<?xml version="1.0" encoding="UTF-8"?>
<w:document xmlns:w="http://schemas.openxmlformats.org/wordprocessingml/2006/main" xmlns:m="http://schemas.openxmlformats.org/officeDocument/2006/math" xmlns:r="http://schemas.openxmlformats.org/officeDocument/2006/relationships" xmlns:o="urn:schemas-microsoft-com:office:office" xmlns:v="urn:schemas-microsoft-com:vml" xmlns:w10="urn:schemas-microsoft-com:office:word" xmlns:a="http://schemas.openxmlformats.org/drawingml/2006/main" xmlns:pic="http://schemas.openxmlformats.org/drawingml/2006/picture" xmlns:wp="http://schemas.openxmlformats.org/drawingml/2006/wordprocessingDrawing"><w:body><w:p><w:pPr><w:pStyle w:val="Title" /></w:pPr><w:r><w:t xml:space="preserve">Data</w:t></w:r><w:r><w:t xml:space="preserve"> </w:t></w:r><w:r><w:t xml:space="preserve">Science</w:t></w:r><w:r><w:t xml:space="preserve"> </w:t></w:r><w:r><w:t xml:space="preserve">R</w:t></w:r><w:r><w:t xml:space="preserve"> </w:t></w:r><w:r><w:t xml:space="preserve">Basics</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="FirstParagraph" /></w:pPr><w:r><w:t xml:space="preserve">The textbook for the Data Science course series is</w:t></w:r><w:r><w:t xml:space="preserve"> </w:t></w:r><w:hyperlink r:id="rId20"><w:r><w:rPr><w:rStyle w:val="Hyperlink" /></w:rPr><w:t xml:space="preserve">freely available online</w:t></w:r></w:hyperlink><w:r><w:t xml:space="preserve">.</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="Heading2" /></w:pPr><w:bookmarkStart w:id="21" w:name="learning-objectives" /><w:r><w:t xml:space="preserve">Learning Objectives</w:t></w:r><w:bookmarkEnd w:id="21" /></w:p><w:p><w:pPr><w:pStyle w:val="Compact" /><w:numPr><w:numId w:val="1001" /><w:ilvl w:val="0" /></w:numPr></w:pPr><w:r><w:t xml:space="preserve">Learn to read, extract, and create datasets in R</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="Compact" /><w:numPr><w:numId w:val="1001" /><w:ilvl w:val="0" /></w:numPr></w:pPr><w:r><w:t xml:space="preserve">Learn to perform a variety of operations on datasets using R</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="Compact" /><w:numPr><w:numId w:val="1001" /><w:ilvl w:val="0" /></w:numPr></w:pPr><w:r><w:t xml:space="preserve">Learn to write your own functions/sub-routines in R</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="Heading2" /></w:pPr><w:bookmarkStart w:id="22" w:name="course-overview" /><w:r><w:t xml:space="preserve">Course Overview</w:t></w:r><w:bookmarkEnd w:id="22" /></w:p><w:p><w:pPr><w:pStyle w:val="Heading3" /></w:pPr><w:bookmarkStart w:id="23" w:name="section-1-r-basics-functions-data-types" /><w:r><w:t xml:space="preserve">Section 1: R Basics, Functions, Data types</w:t></w:r><w:bookmarkEnd w:id="23" /></w:p><w:p><w:pPr><w:pStyle w:val="FirstParagraph" /></w:pPr><w:r><w:t xml:space="preserve">You will get started with R, learn about its functions and data types.</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="Heading3" /></w:pPr><w:bookmarkStart w:id="24" w:name="section-2-vectors-sorting" /><w:r><w:t xml:space="preserve">Section 2: Vectors, Sorting</w:t></w:r><w:bookmarkEnd w:id="24" /></w:p><w:p><w:pPr><w:pStyle w:val="FirstParagraph" /></w:pPr><w:r><w:t xml:space="preserve">You will learn to operate on vectors and advanced functions such as sorting.</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="Heading3" /></w:pPr><w:bookmarkStart w:id="25" w:name="X8787142f59ce2212e70a6d1c7ab4d2e70d98eff" /><w:r><w:t xml:space="preserve">Section 3: Indexing, Data Manipulation, Plots</w:t></w:r><w:bookmarkEnd w:id="25" /></w:p><w:p><w:pPr><w:pStyle w:val="FirstParagraph" /></w:pPr><w:r><w:t xml:space="preserve">You will learn to wrangle and visualize data.</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="Heading3" /></w:pPr><w:bookmarkStart w:id="26" w:name="section-4-programming-basics" /><w:r><w:t xml:space="preserve">Section 4: Programming Basics</w:t></w:r><w:bookmarkEnd w:id="26" /></w:p><w:p><w:pPr><w:pStyle w:val="FirstParagraph" /></w:pPr><w:r><w:t xml:space="preserve">You will learn to use general programming features like</w:t></w:r><w:r><w:t xml:space="preserve"> </w:t></w:r><w:r><w:t xml:space="preserve">‘</w:t></w:r><w:r><w:t xml:space="preserve">if-else</w:t></w:r><w:r><w:t xml:space="preserve">’</w:t></w:r><w:r><w:t xml:space="preserve">, and</w:t></w:r><w:r><w:t xml:space="preserve"> </w:t></w:r><w:r><w:t xml:space="preserve">‘</w:t></w:r><w:r><w:t xml:space="preserve">for loop</w:t></w:r><w:r><w:t xml:space="preserve">’</w:t></w:r><w:r><w:t xml:space="preserve"> </w:t></w:r><w:r><w:t xml:space="preserve">commands, and write your own functions to perform various operations on datasets.</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="Heading2" /></w:pPr><w:bookmarkStart w:id="27" w:name="section-1-overview" /><w:r><w:t xml:space="preserve">Section 1 Overview</w:t></w:r><w:bookmarkEnd w:id="27" /></w:p><w:p><w:pPr><w:pStyle w:val="FirstParagraph" /></w:pPr><w:r><w:t xml:space="preserve">Section 1 introduces you to R Basics, Functions and Datatypes.</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="BodyText" /></w:pPr><w:r><w:t xml:space="preserve">In Section 1, you will learn to:</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="Compact" /><w:numPr><w:numId w:val="1002" /><w:ilvl w:val="0" /></w:numPr></w:pPr><w:r><w:t xml:space="preserve">Appreciate the rationale for data analysis using R</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="Compact" /><w:numPr><w:numId w:val="1002" /><w:ilvl w:val="0" /></w:numPr></w:pPr><w:r><w:t xml:space="preserve">Define objects and perform basic arithmetic and logical operations</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="Compact" /><w:numPr><w:numId w:val="1002" /><w:ilvl w:val="0" /></w:numPr></w:pPr><w:r><w:t xml:space="preserve">Use pre-defined functions to perform operations on objects</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="Compact" /><w:numPr><w:numId w:val="1002" /><w:ilvl w:val="0" /></w:numPr></w:pPr><w:r><w:t xml:space="preserve">Distinguish between various data types</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="FirstParagraph" /></w:pPr><w:r><w:t xml:space="preserve">The textbook for this section is available</w:t></w:r><w:r><w:t xml:space="preserve"> </w:t></w:r><w:hyperlink r:id="rId28"><w:r><w:rPr><w:rStyle w:val="Hyperlink" /></w:rPr><w:t xml:space="preserve">here</w:t></w:r></w:hyperlink></w:p><w:p><w:pPr><w:pStyle w:val="Heading2" /></w:pPr><w:bookmarkStart w:id="29" w:name="motivation" /><w:r><w:t xml:space="preserve">Motivation</w:t></w:r><w:bookmarkEnd w:id="29" /></w:p><w:p><w:pPr><w:pStyle w:val="FirstParagraph" /></w:pPr><w:r><w:t xml:space="preserve">Here is a link to the</w:t></w:r><w:r><w:t xml:space="preserve"> </w:t></w:r><w:hyperlink r:id="rId30"><w:r><w:rPr><w:rStyle w:val="Hyperlink" /></w:rPr><w:t xml:space="preserve">textbook section on the motivation for this course</w:t></w:r></w:hyperlink><w:r><w:t xml:space="preserve">.</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="Heading2" /></w:pPr><w:bookmarkStart w:id="31" w:name="getting-started" /><w:r><w:t xml:space="preserve">Getting started</w:t></w:r><w:bookmarkEnd w:id="31" /></w:p><w:p><w:pPr><w:pStyle w:val="FirstParagraph" /></w:pPr><w:r><w:t xml:space="preserve">Here is a link to the textbook section on</w:t></w:r><w:r><w:t xml:space="preserve"> </w:t></w:r><w:hyperlink r:id="rId32"><w:r><w:rPr><w:rStyle w:val="Hyperlink" /></w:rPr><w:t xml:space="preserve">Getting Started</w:t></w:r></w:hyperlink><w:r><w:t xml:space="preserve"> </w:t></w:r><w:r><w:t xml:space="preserve">with R.</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="BodyText" /></w:pPr><w:r><w:rPr><w:b /></w:rPr><w:t xml:space="preserve">Key Points</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="Compact" /><w:numPr><w:numId w:val="1003" /><w:ilvl w:val="0" /></w:numPr></w:pPr><w:r><w:t xml:space="preserve">R was developed by statisticians and data analysts as an interactive environment for data analysis.</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="Compact" /><w:numPr><w:numId w:val="1003" /><w:ilvl w:val="0" /></w:numPr></w:pPr><w:r><w:t xml:space="preserve">Some of the advantages of R are that (1) it is free and open source, (2) it has the capability to save scripts, (3) there are numerous resources for learning, and (4) it is easy for developers to share software implementation.</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="Compact" /><w:numPr><w:numId w:val="1003" /><w:ilvl w:val="0" /></w:numPr></w:pPr><w:r><w:t xml:space="preserve">Expressions are evaluated in the R console when you type the expression into the console and hit Return.</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="Compact" /><w:numPr><w:numId w:val="1003" /><w:ilvl w:val="0" /></w:numPr></w:pPr><w:r><w:t xml:space="preserve">A great advantage of R over point and click analysis software is that you can save your work as scripts.</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="Compact" /><w:numPr><w:numId w:val="1003" /><w:ilvl w:val="0" /></w:numPr></w:pPr><w:r><w:t xml:space="preserve">“</w:t></w:r><w:r><w:t xml:space="preserve">Base R</w:t></w:r><w:r><w:t xml:space="preserve">”</w:t></w:r><w:r><w:t xml:space="preserve"> </w:t></w:r><w:r><w:t xml:space="preserve">is what you get after you first install R. Additional components are available via packages.</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="SourceCode" /></w:pPr><w:r><w:rPr><w:rStyle w:val="CommentTok" /></w:rPr><w:t xml:space="preserve"># installing the dslabs package</w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="ControlFlowTok" /></w:rPr><w:t xml:space="preserve">if</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">(</w:t></w:r><w:r><w:rPr><w:rStyle w:val="OperatorTok" /></w:rPr><w:t xml:space="preserve">!</w:t></w:r><w:r><w:rPr><w:rStyle w:val="KeywordTok" /></w:rPr><w:t xml:space="preserve">require</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">(dslabs)) </w:t></w:r><w:r><w:rPr><w:rStyle w:val="KeywordTok" /></w:rPr><w:t xml:space="preserve">install.packages</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">(</w:t></w:r><w:r><w:rPr><w:rStyle w:val="StringTok" /></w:rPr><w:t xml:space="preserve">&quot;dslabs&quot;</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">)</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="SourceCode" /></w:pPr><w:r><w:rPr><w:rStyle w:val="VerbatimChar" /></w:rPr><w:t xml:space="preserve">## Loading required package: dslabs</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="SourceCode" /></w:pPr><w:r><w:rPr><w:rStyle w:val="CommentTok" /></w:rPr><w:t xml:space="preserve"># loading the dslabs package into the R session</w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="KeywordTok" /></w:rPr><w:t xml:space="preserve">library</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">(dslabs)</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="Heading2" /></w:pPr><w:bookmarkStart w:id="33" w:name="installing-r-and-r-studio" /><w:r><w:t xml:space="preserve">Installing R and R Studio</w:t></w:r><w:bookmarkEnd w:id="33" /></w:p><w:p><w:pPr><w:pStyle w:val="Heading3" /></w:pPr><w:bookmarkStart w:id="34" w:name="installing-r" /><w:r><w:t xml:space="preserve">Installing R</w:t></w:r><w:bookmarkEnd w:id="34" /></w:p><w:p><w:pPr><w:pStyle w:val="FirstParagraph" /></w:pPr><w:r><w:t xml:space="preserve">To install R to work on your own computer, you can download it freely from the</w:t></w:r><w:r><w:t xml:space="preserve"> </w:t></w:r><w:hyperlink r:id="rId35"><w:r><w:rPr><w:rStyle w:val="Hyperlink" /></w:rPr><w:t xml:space="preserve">Comprehensive R Archive Network</w:t></w:r></w:hyperlink><w:r><w:t xml:space="preserve"> </w:t></w:r><w:r><w:t xml:space="preserve">(CRAN). Note that CRAN makes several versions of R available: versions for multiple operating systems and releases older than the current one. You want to read the CRAN instructions to assure you download the correct version. If you need further help, you read the walkthrough in this</w:t></w:r><w:r><w:t xml:space="preserve"> </w:t></w:r><w:hyperlink r:id="rId36"><w:r><w:rPr><w:rStyle w:val="Hyperlink" /></w:rPr><w:t xml:space="preserve">Chapter of the textbook</w:t></w:r></w:hyperlink><w:r><w:t xml:space="preserve">.</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="Heading3" /></w:pPr><w:bookmarkStart w:id="37" w:name="installing-rstudio" /><w:r><w:t xml:space="preserve">Installing RStudio</w:t></w:r><w:bookmarkEnd w:id="37" /></w:p><w:p><w:pPr><w:pStyle w:val="FirstParagraph" /></w:pPr><w:r><w:t xml:space="preserve">RStudio is an integrated development environment (IDE). We highly recommend installing and using RStudio to edit and test your code. You can install RStudio through the</w:t></w:r><w:r><w:t xml:space="preserve"> </w:t></w:r><w:hyperlink r:id="rId38"><w:r><w:rPr><w:rStyle w:val="Hyperlink" /></w:rPr><w:t xml:space="preserve">RStudio website</w:t></w:r></w:hyperlink><w:r><w:t xml:space="preserve">. Their</w:t></w:r><w:r><w:t xml:space="preserve"> </w:t></w:r><w:hyperlink r:id="rId39"><w:r><w:rPr><w:rStyle w:val="Hyperlink" /></w:rPr><w:t xml:space="preserve">cheatsheet</w:t></w:r></w:hyperlink><w:r><w:t xml:space="preserve"> </w:t></w:r><w:r><w:t xml:space="preserve">is a great resource. You must install R before installing RStudio.</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="Heading3" /></w:pPr><w:bookmarkStart w:id="40" w:name="textbook-link" /><w:r><w:t xml:space="preserve">Textbook Link</w:t></w:r><w:bookmarkEnd w:id="40" /></w:p><w:p><w:pPr><w:pStyle w:val="FirstParagraph" /></w:pPr><w:r><w:t xml:space="preserve">Here is a link to the textbook section on</w:t></w:r><w:r><w:t xml:space="preserve"> </w:t></w:r><w:hyperlink r:id="rId41"><w:r><w:rPr><w:rStyle w:val="Hyperlink" /></w:rPr><w:t xml:space="preserve">Installing R and RStudio</w:t></w:r></w:hyperlink><w:r><w:t xml:space="preserve">.</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="Heading2" /></w:pPr><w:bookmarkStart w:id="42" w:name="r-basics---objects" /><w:r><w:t xml:space="preserve">R Basics - Objects</w:t></w:r><w:bookmarkEnd w:id="42" /></w:p><w:p><w:pPr><w:pStyle w:val="FirstParagraph" /></w:pPr><w:r><w:t xml:space="preserve">Here is a link to the textbook section on</w:t></w:r><w:r><w:t xml:space="preserve"> </w:t></w:r><w:hyperlink r:id="rId43"><w:r><w:rPr><w:rStyle w:val="Hyperlink" /></w:rPr><w:t xml:space="preserve">objects in R</w:t></w:r></w:hyperlink><w:r><w:t xml:space="preserve">.</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="BodyText" /></w:pPr><w:r><w:rPr><w:b /></w:rPr><w:t xml:space="preserve">Key Points</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="Compact" /><w:numPr><w:numId w:val="1004" /><w:ilvl w:val="0" /></w:numPr></w:pPr><w:r><w:t xml:space="preserve">To define a variable, we may use the assignment symbol “&lt;-“.</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="Compact" /><w:numPr><w:numId w:val="1004" /><w:ilvl w:val="0" /></w:numPr></w:pPr><w:r><w:t xml:space="preserve">There are two ways to see the value stored in a variable: (1) type the variable into the console and hit Return, or (2) type print(</w:t></w:r><w:r><w:t xml:space="preserve">“</w:t></w:r><w:r><w:t xml:space="preserve">variable name</w:t></w:r><w:r><w:t xml:space="preserve">”</w:t></w:r><w:r><w:t xml:space="preserve">) and hit Return.</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="Compact" /><w:numPr><w:numId w:val="1004" /><w:ilvl w:val="0" /></w:numPr></w:pPr><w:r><w:t xml:space="preserve">Objects are stuff that is stored in R. They can be variables, functions, etc.</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="Compact" /><w:numPr><w:numId w:val="1004" /><w:ilvl w:val="0" /></w:numPr></w:pPr><w:r><w:t xml:space="preserve">The ls() function shows the names of the objects saved in your workspace.</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="FirstParagraph" /></w:pPr><w:r><w:rPr><w:i /></w:rPr><w:t xml:space="preserve">Solving the equation x2+x−1=0</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="SourceCode" /></w:pPr><w:r><w:rPr><w:rStyle w:val="CommentTok" /></w:rPr><w:t xml:space="preserve"># assigning values to variables</w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">a &lt;-</w:t></w:r><w:r><w:rPr><w:rStyle w:val="StringTok" /></w:rPr><w:t xml:space="preserve"> </w:t></w:r><w:r><w:rPr><w:rStyle w:val="DecValTok" /></w:rPr><w:t xml:space="preserve">1</w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">b &lt;-</w:t></w:r><w:r><w:rPr><w:rStyle w:val="StringTok" /></w:rPr><w:t xml:space="preserve"> </w:t></w:r><w:r><w:rPr><w:rStyle w:val="DecValTok" /></w:rPr><w:t xml:space="preserve">1</w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">c &lt;-</w:t></w:r><w:r><w:rPr><w:rStyle w:val="StringTok" /></w:rPr><w:t xml:space="preserve"> </w:t></w:r><w:r><w:rPr><w:rStyle w:val="DecValTok" /></w:rPr><w:t xml:space="preserve">-1</w:t></w:r><w:r><w:br /></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="CommentTok" /></w:rPr><w:t xml:space="preserve"># solving the quadratic equation</w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">(</w:t></w:r><w:r><w:rPr><w:rStyle w:val="OperatorTok" /></w:rPr><w:t xml:space="preserve">-</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">b </w:t></w:r><w:r><w:rPr><w:rStyle w:val="OperatorTok" /></w:rPr><w:t xml:space="preserve">+</w:t></w:r><w:r><w:rPr><w:rStyle w:val="StringTok" /></w:rPr><w:t xml:space="preserve"> </w:t></w:r><w:r><w:rPr><w:rStyle w:val="KeywordTok" /></w:rPr><w:t xml:space="preserve">sqrt</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">(b</w:t></w:r><w:r><w:rPr><w:rStyle w:val="OperatorTok" /></w:rPr><w:t xml:space="preserve">^</w:t></w:r><w:r><w:rPr><w:rStyle w:val="DecValTok" /></w:rPr><w:t xml:space="preserve">2</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve"> </w:t></w:r><w:r><w:rPr><w:rStyle w:val="OperatorTok" /></w:rPr><w:t xml:space="preserve">-</w:t></w:r><w:r><w:rPr><w:rStyle w:val="StringTok" /></w:rPr><w:t xml:space="preserve"> </w:t></w:r><w:r><w:rPr><w:rStyle w:val="DecValTok" /></w:rPr><w:t xml:space="preserve">4</w:t></w:r><w:r><w:rPr><w:rStyle w:val="OperatorTok" /></w:rPr><w:t xml:space="preserve">*</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">a</w:t></w:r><w:r><w:rPr><w:rStyle w:val="OperatorTok" /></w:rPr><w:t xml:space="preserve">*</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">c) ) </w:t></w:r><w:r><w:rPr><w:rStyle w:val="OperatorTok" /></w:rPr><w:t xml:space="preserve">/</w:t></w:r><w:r><w:rPr><w:rStyle w:val="StringTok" /></w:rPr><w:t xml:space="preserve"> </w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">( </w:t></w:r><w:r><w:rPr><w:rStyle w:val="DecValTok" /></w:rPr><w:t xml:space="preserve">2</w:t></w:r><w:r><w:rPr><w:rStyle w:val="OperatorTok" /></w:rPr><w:t xml:space="preserve">*</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">a )</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="SourceCode" /></w:pPr><w:r><w:rPr><w:rStyle w:val="VerbatimChar" /></w:rPr><w:t xml:space="preserve">## [1] 0.618034</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="SourceCode" /></w:pPr><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">(</w:t></w:r><w:r><w:rPr><w:rStyle w:val="OperatorTok" /></w:rPr><w:t xml:space="preserve">-</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">b </w:t></w:r><w:r><w:rPr><w:rStyle w:val="OperatorTok" /></w:rPr><w:t xml:space="preserve">-</w:t></w:r><w:r><w:rPr><w:rStyle w:val="StringTok" /></w:rPr><w:t xml:space="preserve"> </w:t></w:r><w:r><w:rPr><w:rStyle w:val="KeywordTok" /></w:rPr><w:t xml:space="preserve">sqrt</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">(b</w:t></w:r><w:r><w:rPr><w:rStyle w:val="OperatorTok" /></w:rPr><w:t xml:space="preserve">^</w:t></w:r><w:r><w:rPr><w:rStyle w:val="DecValTok" /></w:rPr><w:t xml:space="preserve">2</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve"> </w:t></w:r><w:r><w:rPr><w:rStyle w:val="OperatorTok" /></w:rPr><w:t xml:space="preserve">-</w:t></w:r><w:r><w:rPr><w:rStyle w:val="StringTok" /></w:rPr><w:t xml:space="preserve"> </w:t></w:r><w:r><w:rPr><w:rStyle w:val="DecValTok" /></w:rPr><w:t xml:space="preserve">4</w:t></w:r><w:r><w:rPr><w:rStyle w:val="OperatorTok" /></w:rPr><w:t xml:space="preserve">*</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">a</w:t></w:r><w:r><w:rPr><w:rStyle w:val="OperatorTok" /></w:rPr><w:t xml:space="preserve">*</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">c) ) </w:t></w:r><w:r><w:rPr><w:rStyle w:val="OperatorTok" /></w:rPr><w:t xml:space="preserve">/</w:t></w:r><w:r><w:rPr><w:rStyle w:val="StringTok" /></w:rPr><w:t xml:space="preserve"> </w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">( </w:t></w:r><w:r><w:rPr><w:rStyle w:val="DecValTok" /></w:rPr><w:t xml:space="preserve">2</w:t></w:r><w:r><w:rPr><w:rStyle w:val="OperatorTok" /></w:rPr><w:t xml:space="preserve">*</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">a )</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="SourceCode" /></w:pPr><w:r><w:rPr><w:rStyle w:val="VerbatimChar" /></w:rPr><w:t xml:space="preserve">## [1] -1.618034</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="Heading2" /></w:pPr><w:bookmarkStart w:id="44" w:name="r-basics---functions" /><w:r><w:t xml:space="preserve">R Basics - Functions</w:t></w:r><w:bookmarkEnd w:id="44" /></w:p><w:p><w:pPr><w:pStyle w:val="FirstParagraph" /></w:pPr><w:r><w:t xml:space="preserve">Here is a link to the textbook section on</w:t></w:r><w:r><w:t xml:space="preserve"> </w:t></w:r><w:hyperlink r:id="rId45"><w:r><w:rPr><w:rStyle w:val="Hyperlink" /></w:rPr><w:t xml:space="preserve">functions</w:t></w:r></w:hyperlink><w:r><w:t xml:space="preserve">.</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="BodyText" /></w:pPr><w:r><w:rPr><w:b /></w:rPr><w:t xml:space="preserve">Key points</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="Compact" /><w:numPr><w:numId w:val="1005" /><w:ilvl w:val="0" /></w:numPr></w:pPr><w:r><w:t xml:space="preserve">In general, to evaluate a function we need to use parentheses. If we type a function without parenthesis, R shows us the code for the function. Most functions also require an argument, that is, something to be written inside the parenthesis.</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="Compact" /><w:numPr><w:numId w:val="1005" /><w:ilvl w:val="0" /></w:numPr></w:pPr><w:r><w:t xml:space="preserve">To access help files, we may use the help function help(</w:t></w:r><w:r><w:t xml:space="preserve">“</w:t></w:r><w:r><w:t xml:space="preserve">function name</w:t></w:r><w:r><w:t xml:space="preserve">”</w:t></w:r><w:r><w:t xml:space="preserve">), or write the question mark followed by the function name.</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="Compact" /><w:numPr><w:numId w:val="1005" /><w:ilvl w:val="0" /></w:numPr></w:pPr><w:r><w:t xml:space="preserve">The help file shows you the arguments the function is expecting, some of which are required and some are optional. If an argument is optional, a default value is assigned with the equal sign. The args() function also shows the arguments a function needs.</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="Compact" /><w:numPr><w:numId w:val="1005" /><w:ilvl w:val="0" /></w:numPr></w:pPr><w:r><w:t xml:space="preserve">To specify arguments, we use the equals sign. If no argument name is used, R assumes you’re entering arguments in the order shown in the help file.</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="Compact" /><w:numPr><w:numId w:val="1005" /><w:ilvl w:val="0" /></w:numPr></w:pPr><w:r><w:t xml:space="preserve">Creating and saving a script makes code much easier to execute.</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="Compact" /><w:numPr><w:numId w:val="1005" /><w:ilvl w:val="0" /></w:numPr></w:pPr><w:r><w:t xml:space="preserve">To make your code more readable, use intuitive variable names and include comments (using the</w:t></w:r><w:r><w:t xml:space="preserve"> </w:t></w:r><w:r><w:t xml:space="preserve">“</w:t></w:r><w:r><w:t xml:space="preserve">#</w:t></w:r><w:r><w:t xml:space="preserve">”</w:t></w:r><w:r><w:t xml:space="preserve"> </w:t></w:r><w:r><w:t xml:space="preserve">symbol) to remind yourself why you wrote a particular line of code.</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="Heading2" /></w:pPr><w:bookmarkStart w:id="46" w:name="assessment---r-basics" /><w:r><w:t xml:space="preserve">Assessment - R Basics</w:t></w:r><w:bookmarkEnd w:id="46" /></w:p><w:p><w:pPr><w:pStyle w:val="Compact" /><w:numPr><w:numId w:val="1006" /><w:ilvl w:val="0" /></w:numPr></w:pPr><w:r><w:t xml:space="preserve">What is the sum of the first n positive integers? We can use the formula</w:t></w:r><w:r><w:t xml:space="preserve"> </w:t></w:r><m:oMath><m:r><m:t>n</m:t></m:r><m:r><m:t>(</m:t></m:r><m:r><m:t>n</m:t></m:r><m:r><m:t>+</m:t></m:r><m:r><m:t>1</m:t></m:r><m:r><m:t>)</m:t></m:r><m:r><m:t>/</m:t></m:r><m:r><m:t>2</m:t></m:r></m:oMath><w:r><w:t xml:space="preserve"> </w:t></w:r><w:r><w:t xml:space="preserve">to quickly compute this quantity.</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="SourceCode" /></w:pPr><w:r><w:rPr><w:rStyle w:val="CommentTok" /></w:rPr><w:t xml:space="preserve"># Here is how you compute the sum for the first 20 integers</w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="DecValTok" /></w:rPr><w:t xml:space="preserve">20</w:t></w:r><w:r><w:rPr><w:rStyle w:val="OperatorTok" /></w:rPr><w:t xml:space="preserve">*</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">(</w:t></w:r><w:r><w:rPr><w:rStyle w:val="DecValTok" /></w:rPr><w:t xml:space="preserve">20</w:t></w:r><w:r><w:rPr><w:rStyle w:val="OperatorTok" /></w:rPr><w:t xml:space="preserve">+</w:t></w:r><w:r><w:rPr><w:rStyle w:val="DecValTok" /></w:rPr><w:t xml:space="preserve">1</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">)</w:t></w:r><w:r><w:rPr><w:rStyle w:val="OperatorTok" /></w:rPr><w:t xml:space="preserve">/</w:t></w:r><w:r><w:rPr><w:rStyle w:val="DecValTok" /></w:rPr><w:t xml:space="preserve">2</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve"> </w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="SourceCode" /></w:pPr><w:r><w:rPr><w:rStyle w:val="VerbatimChar" /></w:rPr><w:t xml:space="preserve">## [1] 210</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="SourceCode" /></w:pPr><w:r><w:rPr><w:rStyle w:val="CommentTok" /></w:rPr><w:t xml:space="preserve"># However, we can define a variable to use the formula for other values of n</w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">n &lt;-</w:t></w:r><w:r><w:rPr><w:rStyle w:val="StringTok" /></w:rPr><w:t xml:space="preserve"> </w:t></w:r><w:r><w:rPr><w:rStyle w:val="DecValTok" /></w:rPr><w:t xml:space="preserve">20</w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">n</w:t></w:r><w:r><w:rPr><w:rStyle w:val="OperatorTok" /></w:rPr><w:t xml:space="preserve">*</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">(n</w:t></w:r><w:r><w:rPr><w:rStyle w:val="OperatorTok" /></w:rPr><w:t xml:space="preserve">+</w:t></w:r><w:r><w:rPr><w:rStyle w:val="DecValTok" /></w:rPr><w:t xml:space="preserve">1</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">)</w:t></w:r><w:r><w:rPr><w:rStyle w:val="OperatorTok" /></w:rPr><w:t xml:space="preserve">/</w:t></w:r><w:r><w:rPr><w:rStyle w:val="DecValTok" /></w:rPr><w:t xml:space="preserve">2</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="SourceCode" /></w:pPr><w:r><w:rPr><w:rStyle w:val="VerbatimChar" /></w:rPr><w:t xml:space="preserve">## [1] 210</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="SourceCode" /></w:pPr><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">n &lt;-</w:t></w:r><w:r><w:rPr><w:rStyle w:val="StringTok" /></w:rPr><w:t xml:space="preserve"> </w:t></w:r><w:r><w:rPr><w:rStyle w:val="DecValTok" /></w:rPr><w:t xml:space="preserve">25</w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">n</w:t></w:r><w:r><w:rPr><w:rStyle w:val="OperatorTok" /></w:rPr><w:t xml:space="preserve">*</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">(n</w:t></w:r><w:r><w:rPr><w:rStyle w:val="OperatorTok" /></w:rPr><w:t xml:space="preserve">+</w:t></w:r><w:r><w:rPr><w:rStyle w:val="DecValTok" /></w:rPr><w:t xml:space="preserve">1</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">)</w:t></w:r><w:r><w:rPr><w:rStyle w:val="OperatorTok" /></w:rPr><w:t xml:space="preserve">/</w:t></w:r><w:r><w:rPr><w:rStyle w:val="DecValTok" /></w:rPr><w:t xml:space="preserve">2</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="SourceCode" /></w:pPr><w:r><w:rPr><w:rStyle w:val="VerbatimChar" /></w:rPr><w:t xml:space="preserve">## [1] 325</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="SourceCode" /></w:pPr><w:r><w:rPr><w:rStyle w:val="CommentTok" /></w:rPr><w:t xml:space="preserve"># Below, write code to calculate the sum of the first 100 integers</w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">n&lt;-</w:t></w:r><w:r><w:rPr><w:rStyle w:val="DecValTok" /></w:rPr><w:t xml:space="preserve">100</w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">n</w:t></w:r><w:r><w:rPr><w:rStyle w:val="OperatorTok" /></w:rPr><w:t xml:space="preserve">*</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">(n</w:t></w:r><w:r><w:rPr><w:rStyle w:val="OperatorTok" /></w:rPr><w:t xml:space="preserve">+</w:t></w:r><w:r><w:rPr><w:rStyle w:val="DecValTok" /></w:rPr><w:t xml:space="preserve">1</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">)</w:t></w:r><w:r><w:rPr><w:rStyle w:val="OperatorTok" /></w:rPr><w:t xml:space="preserve">/</w:t></w:r><w:r><w:rPr><w:rStyle w:val="DecValTok" /></w:rPr><w:t xml:space="preserve">2</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="SourceCode" /></w:pPr><w:r><w:rPr><w:rStyle w:val="VerbatimChar" /></w:rPr><w:t xml:space="preserve">## [1] 5050</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="Compact" /><w:numPr><w:numId w:val="1007" /><w:ilvl w:val="0" /></w:numPr></w:pPr><w:r><w:t xml:space="preserve">What is the sum of the first 1000 positive integers? We can use the formula</w:t></w:r><w:r><w:t xml:space="preserve"> </w:t></w:r><m:oMath><m:r><m:t>n</m:t></m:r><m:r><m:t>(</m:t></m:r><m:r><m:t>n</m:t></m:r><m:r><m:t>+</m:t></m:r><m:r><m:t>1</m:t></m:r><m:r><m:t>)</m:t></m:r><m:r><m:t>/</m:t></m:r><m:r><m:t>2</m:t></m:r></m:oMath><w:r><w:t xml:space="preserve"> </w:t></w:r><w:r><w:t xml:space="preserve">to quickly compute this quantity.</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="SourceCode" /></w:pPr><w:r><w:rPr><w:rStyle w:val="CommentTok" /></w:rPr><w:t xml:space="preserve"># Below, write code to calculate the sum of the first 1000 integers </w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">n&lt;-</w:t></w:r><w:r><w:rPr><w:rStyle w:val="DecValTok" /></w:rPr><w:t xml:space="preserve">1000</w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">n</w:t></w:r><w:r><w:rPr><w:rStyle w:val="OperatorTok" /></w:rPr><w:t xml:space="preserve">*</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">(n</w:t></w:r><w:r><w:rPr><w:rStyle w:val="OperatorTok" /></w:rPr><w:t xml:space="preserve">+</w:t></w:r><w:r><w:rPr><w:rStyle w:val="DecValTok" /></w:rPr><w:t xml:space="preserve">1</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">)</w:t></w:r><w:r><w:rPr><w:rStyle w:val="OperatorTok" /></w:rPr><w:t xml:space="preserve">/</w:t></w:r><w:r><w:rPr><w:rStyle w:val="DecValTok" /></w:rPr><w:t xml:space="preserve">2</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="SourceCode" /></w:pPr><w:r><w:rPr><w:rStyle w:val="VerbatimChar" /></w:rPr><w:t xml:space="preserve">## [1] 500500</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="Compact" /><w:numPr><w:numId w:val="1008" /><w:ilvl w:val="0" /></w:numPr></w:pPr><w:r><w:t xml:space="preserve">Run the following code in the R console.</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="SourceCode" /></w:pPr><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">n &lt;-</w:t></w:r><w:r><w:rPr><w:rStyle w:val="StringTok" /></w:rPr><w:t xml:space="preserve"> </w:t></w:r><w:r><w:rPr><w:rStyle w:val="DecValTok" /></w:rPr><w:t xml:space="preserve">1000</w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">x &lt;-</w:t></w:r><w:r><w:rPr><w:rStyle w:val="StringTok" /></w:rPr><w:t xml:space="preserve"> </w:t></w:r><w:r><w:rPr><w:rStyle w:val="KeywordTok" /></w:rPr><w:t xml:space="preserve">seq</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">(</w:t></w:r><w:r><w:rPr><w:rStyle w:val="DecValTok" /></w:rPr><w:t xml:space="preserve">1</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">, n)</w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="KeywordTok" /></w:rPr><w:t xml:space="preserve">sum</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">(x)</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="SourceCode" /></w:pPr><w:r><w:rPr><w:rStyle w:val="VerbatimChar" /></w:rPr><w:t xml:space="preserve">## [1] 500500</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="FirstParagraph" /></w:pPr><w:r><w:t xml:space="preserve">Based on the result, what do you think the functions</w:t></w:r><w:r><w:t xml:space="preserve"> </w:t></w:r><w:r><w:rPr><w:rStyle w:val="VerbatimChar" /></w:rPr><w:t xml:space="preserve">seq</w:t></w:r><w:r><w:t xml:space="preserve"> </w:t></w:r><w:r><w:t xml:space="preserve">and</w:t></w:r><w:r><w:t xml:space="preserve"> </w:t></w:r><w:r><w:rPr><w:rStyle w:val="VerbatimChar" /></w:rPr><w:t xml:space="preserve">sum</w:t></w:r><w:r><w:t xml:space="preserve"> </w:t></w:r><w:r><w:t xml:space="preserve">do?</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="Compact" /><w:numPr><w:numId w:val="1009" /><w:ilvl w:val="0" /></w:numPr></w:pPr><w:r><w:t xml:space="preserve">☐ A. sum creates a list of numbers and seq adds them up.</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="Compact" /><w:numPr><w:numId w:val="1009" /><w:ilvl w:val="0" /></w:numPr></w:pPr><w:r><w:t xml:space="preserve">☒ B. seq creates a list of numbers and sum adds them up.</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="Compact" /><w:numPr><w:numId w:val="1009" /><w:ilvl w:val="0" /></w:numPr></w:pPr><w:r><w:t xml:space="preserve">☐ C. seq computes the difference between two arguments and sum computes the sum of 1 through 1000.</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="Compact" /><w:numPr><w:numId w:val="1009" /><w:ilvl w:val="0" /></w:numPr></w:pPr><w:r><w:t xml:space="preserve">☐ D. sum always returns the same number.</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="Compact" /><w:numPr><w:numId w:val="1010" /><w:ilvl w:val="0" /></w:numPr></w:pPr><w:r><w:t xml:space="preserve">In math and programming we say we evaluate a function when we replace arguments with specific values. So if we type</w:t></w:r><w:r><w:t xml:space="preserve"> </w:t></w:r><w:r><w:rPr><w:rStyle w:val="VerbatimChar" /></w:rPr><w:t xml:space="preserve">log2(16)</w:t></w:r><w:r><w:t xml:space="preserve"> </w:t></w:r><w:r><w:t xml:space="preserve">we evaluate the</w:t></w:r><w:r><w:t xml:space="preserve"> </w:t></w:r><w:r><w:rPr><w:rStyle w:val="VerbatimChar" /></w:rPr><w:t xml:space="preserve">log2</w:t></w:r><w:r><w:t xml:space="preserve"> </w:t></w:r><w:r><w:t xml:space="preserve">function to get the log base 2 of</w:t></w:r><w:r><w:t xml:space="preserve"> </w:t></w:r><w:r><w:rPr><w:rStyle w:val="VerbatimChar" /></w:rPr><w:t xml:space="preserve">16</w:t></w:r><w:r><w:t xml:space="preserve"> </w:t></w:r><w:r><w:t xml:space="preserve">which is</w:t></w:r><w:r><w:t xml:space="preserve"> </w:t></w:r><w:r><w:rPr><w:rStyle w:val="VerbatimChar" /></w:rPr><w:t xml:space="preserve">4</w:t></w:r><w:r><w:t xml:space="preserve">.</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="FirstParagraph" /></w:pPr><w:r><w:t xml:space="preserve">In R it is often useful to evaluate a function inside another function. For example,</w:t></w:r><w:r><w:t xml:space="preserve"> </w:t></w:r><w:r><w:rPr><w:rStyle w:val="VerbatimChar" /></w:rPr><w:t xml:space="preserve">sqrt(log2(16))</w:t></w:r><w:r><w:t xml:space="preserve"> </w:t></w:r><w:r><w:t xml:space="preserve">will calculate the log to the base 2 of 16 and then compute the square root of that value. So the first evaluation gives a 4 and this gets evaluated by</w:t></w:r><w:r><w:t xml:space="preserve"> </w:t></w:r><w:r><w:rPr><w:rStyle w:val="VerbatimChar" /></w:rPr><w:t xml:space="preserve">sqrt</w:t></w:r><w:r><w:t xml:space="preserve"> </w:t></w:r><w:r><w:t xml:space="preserve">to give the final answer of 2.</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="SourceCode" /></w:pPr><w:r><w:rPr><w:rStyle w:val="CommentTok" /></w:rPr><w:t xml:space="preserve"># log to the base 2 </w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="KeywordTok" /></w:rPr><w:t xml:space="preserve">log2</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">(</w:t></w:r><w:r><w:rPr><w:rStyle w:val="DecValTok" /></w:rPr><w:t xml:space="preserve">16</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">)</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="SourceCode" /></w:pPr><w:r><w:rPr><w:rStyle w:val="VerbatimChar" /></w:rPr><w:t xml:space="preserve">## [1] 4</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="SourceCode" /></w:pPr><w:r><w:rPr><w:rStyle w:val="CommentTok" /></w:rPr><w:t xml:space="preserve"># sqrt of the log to the base 2 of 16:</w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="KeywordTok" /></w:rPr><w:t xml:space="preserve">sqrt</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">(</w:t></w:r><w:r><w:rPr><w:rStyle w:val="KeywordTok" /></w:rPr><w:t xml:space="preserve">log2</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">(</w:t></w:r><w:r><w:rPr><w:rStyle w:val="DecValTok" /></w:rPr><w:t xml:space="preserve">16</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">))</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="SourceCode" /></w:pPr><w:r><w:rPr><w:rStyle w:val="VerbatimChar" /></w:rPr><w:t xml:space="preserve">## [1] 2</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="SourceCode" /></w:pPr><w:r><w:rPr><w:rStyle w:val="CommentTok" /></w:rPr><w:t xml:space="preserve"># Compute log to the base 10 (log10) of the sqrt of 100. Do not use variables.</w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="KeywordTok" /></w:rPr><w:t xml:space="preserve">log10</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">(</w:t></w:r><w:r><w:rPr><w:rStyle w:val="KeywordTok" /></w:rPr><w:t xml:space="preserve">sqrt</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">(</w:t></w:r><w:r><w:rPr><w:rStyle w:val="DecValTok" /></w:rPr><w:t xml:space="preserve">100</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">))</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="SourceCode" /></w:pPr><w:r><w:rPr><w:rStyle w:val="VerbatimChar" /></w:rPr><w:t xml:space="preserve">## [1] 1</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="Compact" /><w:numPr><w:numId w:val="1011" /><w:ilvl w:val="0" /></w:numPr></w:pPr><w:r><w:t xml:space="preserve">Which of the following will always return the numeric value stored in</w:t></w:r><w:r><w:t xml:space="preserve"> </w:t></w:r><w:r><w:rPr><w:rStyle w:val="VerbatimChar" /></w:rPr><w:t xml:space="preserve">x</w:t></w:r><w:r><w:t xml:space="preserve">? You can try out examples and use the help system in the R console.</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="Compact" /><w:numPr><w:numId w:val="1012" /><w:ilvl w:val="0" /></w:numPr></w:pPr><w:r><w:t xml:space="preserve">☐ A. log(10^x)</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="Compact" /><w:numPr><w:numId w:val="1012" /><w:ilvl w:val="0" /></w:numPr></w:pPr><w:r><w:t xml:space="preserve">☐ B. log10(x^10)</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="Compact" /><w:numPr><w:numId w:val="1012" /><w:ilvl w:val="0" /></w:numPr></w:pPr><w:r><w:t xml:space="preserve">☒ C. log(exp(x))</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="Compact" /><w:numPr><w:numId w:val="1012" /><w:ilvl w:val="0" /></w:numPr></w:pPr><w:r><w:t xml:space="preserve">☐ D. exp(log(x, base = 2))</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="Heading2" /></w:pPr><w:bookmarkStart w:id="47" w:name="data-types" /><w:r><w:t xml:space="preserve">Data Types</w:t></w:r><w:bookmarkEnd w:id="47" /></w:p><w:p><w:pPr><w:pStyle w:val="FirstParagraph" /></w:pPr><w:r><w:t xml:space="preserve">You can find the</w:t></w:r><w:r><w:t xml:space="preserve"> </w:t></w:r><w:hyperlink r:id="rId48"><w:r><w:rPr><w:rStyle w:val="Hyperlink" /></w:rPr><w:t xml:space="preserve">section of the textbook on data types here</w:t></w:r></w:hyperlink><w:r><w:t xml:space="preserve">.</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="BodyText" /></w:pPr><w:r><w:rPr><w:b /></w:rPr><w:t xml:space="preserve">Key Points</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="Compact" /><w:numPr><w:numId w:val="1013" /><w:ilvl w:val="0" /></w:numPr></w:pPr><w:r><w:t xml:space="preserve">The function</w:t></w:r><w:r><w:t xml:space="preserve"> </w:t></w:r><w:r><w:t xml:space="preserve">“</w:t></w:r><w:r><w:t xml:space="preserve">class</w:t></w:r><w:r><w:t xml:space="preserve">”</w:t></w:r><w:r><w:t xml:space="preserve"> </w:t></w:r><w:r><w:t xml:space="preserve">helps us determine the type of an object.</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="Compact" /><w:numPr><w:numId w:val="1013" /><w:ilvl w:val="0" /></w:numPr></w:pPr><w:r><w:t xml:space="preserve">Data frames can be thought of as tables with rows representing observations and columns representing different variables.</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="Compact" /><w:numPr><w:numId w:val="1013" /><w:ilvl w:val="0" /></w:numPr></w:pPr><w:r><w:t xml:space="preserve">To access data from columns of a data frame, we use the dollar sign symbol, which is called the accessor.</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="Compact" /><w:numPr><w:numId w:val="1013" /><w:ilvl w:val="0" /></w:numPr></w:pPr><w:r><w:t xml:space="preserve">A vector is an object consisting of several entries and can be a numeric vector, a character vector, or a logical vector.</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="Compact" /><w:numPr><w:numId w:val="1013" /><w:ilvl w:val="0" /></w:numPr></w:pPr><w:r><w:t xml:space="preserve">We use quotes to distinguish between variable names and character strings.</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="Compact" /><w:numPr><w:numId w:val="1013" /><w:ilvl w:val="0" /></w:numPr></w:pPr><w:r><w:t xml:space="preserve">Factors are useful for storing categorical data, and are more memory efficient than storing characters.</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="FirstParagraph" /></w:pPr><w:r><w:rPr><w:i /></w:rPr><w:t xml:space="preserve">Code</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="SourceCode" /></w:pPr><w:r><w:rPr><w:rStyle w:val="CommentTok" /></w:rPr><w:t xml:space="preserve"># loading the the murders dataset</w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="KeywordTok" /></w:rPr><w:t xml:space="preserve">data</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">(murders)</w:t></w:r><w:r><w:br /></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="CommentTok" /></w:rPr><w:t xml:space="preserve"># determining that the murders dataset is of the &quot;data frame&quot; class</w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="KeywordTok" /></w:rPr><w:t xml:space="preserve">class</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">(murders)</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="SourceCode" /></w:pPr><w:r><w:rPr><w:rStyle w:val="VerbatimChar" /></w:rPr><w:t xml:space="preserve">## [1] &quot;data.frame&quot;</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="SourceCode" /></w:pPr><w:r><w:rPr><w:rStyle w:val="CommentTok" /></w:rPr><w:t xml:space="preserve"># finding out more about the structure of the object</w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="KeywordTok" /></w:rPr><w:t xml:space="preserve">str</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">(murders)</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="SourceCode" /></w:pPr><w:r><w:rPr><w:rStyle w:val="VerbatimChar" /></w:rPr><w:t xml:space="preserve">## &#39;data.frame&#39;:    51 obs. of  5 variables:</w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="VerbatimChar" /></w:rPr><w:t xml:space="preserve">##  $ state     : chr  &quot;Alabama&quot; &quot;Alaska&quot; &quot;Arizona&quot; &quot;Arkansas&quot; ...</w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="VerbatimChar" /></w:rPr><w:t xml:space="preserve">##  $ abb       : chr  &quot;AL&quot; &quot;AK&quot; &quot;AZ&quot; &quot;AR&quot; ...</w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="VerbatimChar" /></w:rPr><w:t xml:space="preserve">##  $ region    : Factor w/ 4 levels &quot;Northeast&quot;,&quot;South&quot;,..: 2 4 4 2 4 4 1 2 2 2 ...</w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="VerbatimChar" /></w:rPr><w:t xml:space="preserve">##  $ population: num  4779736 710231 6392017 2915918 37253956 ...</w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="VerbatimChar" /></w:rPr><w:t xml:space="preserve">##  $ total     : num  135 19 232 93 1257 ...</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="SourceCode" /></w:pPr><w:r><w:rPr><w:rStyle w:val="CommentTok" /></w:rPr><w:t xml:space="preserve"># showing the first 6 lines of the dataset</w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="KeywordTok" /></w:rPr><w:t xml:space="preserve">head</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">(murders)</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="SourceCode" /></w:pPr><w:r><w:rPr><w:rStyle w:val="VerbatimChar" /></w:rPr><w:t xml:space="preserve">##        state abb region population total</w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="VerbatimChar" /></w:rPr><w:t xml:space="preserve">## 1    Alabama  AL  South    4779736   135</w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="VerbatimChar" /></w:rPr><w:t xml:space="preserve">## 2     Alaska  AK   West     710231    19</w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="VerbatimChar" /></w:rPr><w:t xml:space="preserve">## 3    Arizona  AZ   West    6392017   232</w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="VerbatimChar" /></w:rPr><w:t xml:space="preserve">## 4   Arkansas  AR  South    2915918    93</w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="VerbatimChar" /></w:rPr><w:t xml:space="preserve">## 5 California  CA   West   37253956  1257</w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="VerbatimChar" /></w:rPr><w:t xml:space="preserve">## 6   Colorado  CO   West    5029196    65</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="SourceCode" /></w:pPr><w:r><w:rPr><w:rStyle w:val="CommentTok" /></w:rPr><w:t xml:space="preserve"># using the accessor operator to obtain the population column</w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">murders</w:t></w:r><w:r><w:rPr><w:rStyle w:val="OperatorTok" /></w:rPr><w:t xml:space="preserve">$</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">population</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="SourceCode" /></w:pPr><w:r><w:rPr><w:rStyle w:val="VerbatimChar" /></w:rPr><w:t xml:space="preserve">##  [1]  4779736   710231  6392017  2915918 37253956  5029196  3574097   897934</w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="VerbatimChar" /></w:rPr><w:t xml:space="preserve">##  [9]   601723 19687653  9920000  1360301  1567582 12830632  6483802  3046355</w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="VerbatimChar" /></w:rPr><w:t xml:space="preserve">## [17]  2853118  4339367  4533372  1328361  5773552  6547629  9883640  5303925</w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="VerbatimChar" /></w:rPr><w:t xml:space="preserve">## [25]  2967297  5988927   989415  1826341  2700551  1316470  8791894  2059179</w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="VerbatimChar" /></w:rPr><w:t xml:space="preserve">## [33] 19378102  9535483   672591 11536504  3751351  3831074 12702379  1052567</w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="VerbatimChar" /></w:rPr><w:t xml:space="preserve">## [41]  4625364   814180  6346105 25145561  2763885   625741  8001024  6724540</w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="VerbatimChar" /></w:rPr><w:t xml:space="preserve">## [49]  1852994  5686986   563626</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="SourceCode" /></w:pPr><w:r><w:rPr><w:rStyle w:val="CommentTok" /></w:rPr><w:t xml:space="preserve"># displaying the variable names in the murders dataset</w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="KeywordTok" /></w:rPr><w:t xml:space="preserve">names</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">(murders)</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="SourceCode" /></w:pPr><w:r><w:rPr><w:rStyle w:val="VerbatimChar" /></w:rPr><w:t xml:space="preserve">## [1] &quot;state&quot;      &quot;abb&quot;        &quot;region&quot;     &quot;population&quot; &quot;total&quot;</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="SourceCode" /></w:pPr><w:r><w:rPr><w:rStyle w:val="CommentTok" /></w:rPr><w:t xml:space="preserve"># determining how many entries are in a vector</w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">pop &lt;-</w:t></w:r><w:r><w:rPr><w:rStyle w:val="StringTok" /></w:rPr><w:t xml:space="preserve"> </w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">murders</w:t></w:r><w:r><w:rPr><w:rStyle w:val="OperatorTok" /></w:rPr><w:t xml:space="preserve">$</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">population</w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="KeywordTok" /></w:rPr><w:t xml:space="preserve">length</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">(pop)</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="SourceCode" /></w:pPr><w:r><w:rPr><w:rStyle w:val="VerbatimChar" /></w:rPr><w:t xml:space="preserve">## [1] 51</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="SourceCode" /></w:pPr><w:r><w:rPr><w:rStyle w:val="CommentTok" /></w:rPr><w:t xml:space="preserve"># vectors can be of class numeric and character</w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="KeywordTok" /></w:rPr><w:t xml:space="preserve">class</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">(pop)</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="SourceCode" /></w:pPr><w:r><w:rPr><w:rStyle w:val="VerbatimChar" /></w:rPr><w:t xml:space="preserve">## [1] &quot;numeric&quot;</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="SourceCode" /></w:pPr><w:r><w:rPr><w:rStyle w:val="KeywordTok" /></w:rPr><w:t xml:space="preserve">class</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">(murders</w:t></w:r><w:r><w:rPr><w:rStyle w:val="OperatorTok" /></w:rPr><w:t xml:space="preserve">$</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">state)</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="SourceCode" /></w:pPr><w:r><w:rPr><w:rStyle w:val="VerbatimChar" /></w:rPr><w:t xml:space="preserve">## [1] &quot;character&quot;</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="SourceCode" /></w:pPr><w:r><w:rPr><w:rStyle w:val="CommentTok" /></w:rPr><w:t xml:space="preserve"># logical vectors are either TRUE or FALSE</w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">z &lt;-</w:t></w:r><w:r><w:rPr><w:rStyle w:val="StringTok" /></w:rPr><w:t xml:space="preserve"> </w:t></w:r><w:r><w:rPr><w:rStyle w:val="DecValTok" /></w:rPr><w:t xml:space="preserve">3</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve"> </w:t></w:r><w:r><w:rPr><w:rStyle w:val="OperatorTok" /></w:rPr><w:t xml:space="preserve">==</w:t></w:r><w:r><w:rPr><w:rStyle w:val="StringTok" /></w:rPr><w:t xml:space="preserve"> </w:t></w:r><w:r><w:rPr><w:rStyle w:val="DecValTok" /></w:rPr><w:t xml:space="preserve">2</w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">z</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="SourceCode" /></w:pPr><w:r><w:rPr><w:rStyle w:val="VerbatimChar" /></w:rPr><w:t xml:space="preserve">## [1] FALSE</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="SourceCode" /></w:pPr><w:r><w:rPr><w:rStyle w:val="KeywordTok" /></w:rPr><w:t xml:space="preserve">class</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">(z)</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="SourceCode" /></w:pPr><w:r><w:rPr><w:rStyle w:val="VerbatimChar" /></w:rPr><w:t xml:space="preserve">## [1] &quot;logical&quot;</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="SourceCode" /></w:pPr><w:r><w:rPr><w:rStyle w:val="CommentTok" /></w:rPr><w:t xml:space="preserve"># factors are another type of class</w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="KeywordTok" /></w:rPr><w:t xml:space="preserve">class</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">(murders</w:t></w:r><w:r><w:rPr><w:rStyle w:val="OperatorTok" /></w:rPr><w:t xml:space="preserve">$</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">region)</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="SourceCode" /></w:pPr><w:r><w:rPr><w:rStyle w:val="VerbatimChar" /></w:rPr><w:t xml:space="preserve">## [1] &quot;factor&quot;</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="SourceCode" /></w:pPr><w:r><w:rPr><w:rStyle w:val="CommentTok" /></w:rPr><w:t xml:space="preserve"># obtaining the levels of a factor</w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="KeywordTok" /></w:rPr><w:t xml:space="preserve">levels</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">(murders</w:t></w:r><w:r><w:rPr><w:rStyle w:val="OperatorTok" /></w:rPr><w:t xml:space="preserve">$</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">region)</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="SourceCode" /></w:pPr><w:r><w:rPr><w:rStyle w:val="VerbatimChar" /></w:rPr><w:t xml:space="preserve">## [1] &quot;Northeast&quot;     &quot;South&quot;         &quot;North Central&quot; &quot;West&quot;</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="Heading2" /></w:pPr><w:bookmarkStart w:id="49" w:name="assessment---data-types" /><w:r><w:t xml:space="preserve">Assessment - Data Types</w:t></w:r><w:bookmarkEnd w:id="49" /></w:p><w:p><w:pPr><w:pStyle w:val="Compact" /><w:numPr><w:numId w:val="1014" /><w:ilvl w:val="0" /></w:numPr></w:pPr><w:r><w:t xml:space="preserve">We’re going to be using the following dataset for this module. Run this code in the console.</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="SourceCode" /></w:pPr><w:r><w:rPr><w:rStyle w:val="KeywordTok" /></w:rPr><w:t xml:space="preserve">library</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">(dslabs)  </w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="KeywordTok" /></w:rPr><w:t xml:space="preserve">data</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">(murders)</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="FirstParagraph" /></w:pPr><w:r><w:t xml:space="preserve">Next, use the function</w:t></w:r><w:r><w:t xml:space="preserve"> </w:t></w:r><w:r><w:rPr><w:rStyle w:val="VerbatimChar" /></w:rPr><w:t xml:space="preserve">str</w:t></w:r><w:r><w:t xml:space="preserve"> </w:t></w:r><w:r><w:t xml:space="preserve">to examine the structure of the</w:t></w:r><w:r><w:t xml:space="preserve"> </w:t></w:r><w:r><w:rPr><w:rStyle w:val="VerbatimChar" /></w:rPr><w:t xml:space="preserve">murders</w:t></w:r><w:r><w:t xml:space="preserve"> </w:t></w:r><w:r><w:t xml:space="preserve">object. We can see that this object is a data frame with 51 rows and five columns.</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="SourceCode" /></w:pPr><w:r><w:rPr><w:rStyle w:val="KeywordTok" /></w:rPr><w:t xml:space="preserve">str</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">(murders)</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="SourceCode" /></w:pPr><w:r><w:rPr><w:rStyle w:val="VerbatimChar" /></w:rPr><w:t xml:space="preserve">## &#39;data.frame&#39;:    51 obs. of  5 variables:</w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="VerbatimChar" /></w:rPr><w:t xml:space="preserve">##  $ state     : chr  &quot;Alabama&quot; &quot;Alaska&quot; &quot;Arizona&quot; &quot;Arkansas&quot; ...</w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="VerbatimChar" /></w:rPr><w:t xml:space="preserve">##  $ abb       : chr  &quot;AL&quot; &quot;AK&quot; &quot;AZ&quot; &quot;AR&quot; ...</w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="VerbatimChar" /></w:rPr><w:t xml:space="preserve">##  $ region    : Factor w/ 4 levels &quot;Northeast&quot;,&quot;South&quot;,..: 2 4 4 2 4 4 1 2 2 2 ...</w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="VerbatimChar" /></w:rPr><w:t xml:space="preserve">##  $ population: num  4779736 710231 6392017 2915918 37253956 ...</w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="VerbatimChar" /></w:rPr><w:t xml:space="preserve">##  $ total     : num  135 19 232 93 1257 ...</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="FirstParagraph" /></w:pPr><w:r><w:t xml:space="preserve">Which of the following best describes the variables represented in this data frame?</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="Compact" /><w:numPr><w:numId w:val="1015" /><w:ilvl w:val="0" /></w:numPr></w:pPr><w:r><w:t xml:space="preserve">☐ A. The 51 states.</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="Compact" /><w:numPr><w:numId w:val="1015" /><w:ilvl w:val="0" /></w:numPr></w:pPr><w:r><w:t xml:space="preserve">☐ B. The murder rates for all 50 states and DC.</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="Compact" /><w:numPr><w:numId w:val="1015" /><w:ilvl w:val="0" /></w:numPr></w:pPr><w:r><w:t xml:space="preserve">☒ C. The state name, the abbreviation of the state name, the state’s region, and the state’s population and total number of murders for 2010.</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="Compact" /><w:numPr><w:numId w:val="1015" /><w:ilvl w:val="0" /></w:numPr></w:pPr><w:r><w:t xml:space="preserve">☐ D. str shows no relevant information.</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="Compact" /><w:numPr><w:numId w:val="1016" /><w:ilvl w:val="0" /></w:numPr></w:pPr><w:r><w:t xml:space="preserve">In the previous question, we saw the different variables that are a part of this dataset from the output of the</w:t></w:r><w:r><w:t xml:space="preserve"> </w:t></w:r><w:r><w:rPr><w:rStyle w:val="VerbatimChar" /></w:rPr><w:t xml:space="preserve">str()</w:t></w:r><w:r><w:t xml:space="preserve"> </w:t></w:r><w:r><w:t xml:space="preserve">function. The function</w:t></w:r><w:r><w:t xml:space="preserve"> </w:t></w:r><w:r><w:rPr><w:rStyle w:val="VerbatimChar" /></w:rPr><w:t xml:space="preserve">names()</w:t></w:r><w:r><w:t xml:space="preserve"> </w:t></w:r><w:r><w:t xml:space="preserve">is specifically designed to extract the column names from a data frame.</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="SourceCode" /></w:pPr><w:r><w:rPr><w:rStyle w:val="CommentTok" /></w:rPr><w:t xml:space="preserve"># Load package and data</w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="KeywordTok" /></w:rPr><w:t xml:space="preserve">library</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">(dslabs)</w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="KeywordTok" /></w:rPr><w:t xml:space="preserve">data</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">(murders)</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="SourceCode" /></w:pPr><w:r><w:rPr><w:rStyle w:val="CommentTok" /></w:rPr><w:t xml:space="preserve"># Use the function names to extract the variable names </w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="KeywordTok" /></w:rPr><w:t xml:space="preserve">names</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">(murders)</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="SourceCode" /></w:pPr><w:r><w:rPr><w:rStyle w:val="VerbatimChar" /></w:rPr><w:t xml:space="preserve">## [1] &quot;state&quot;      &quot;abb&quot;        &quot;region&quot;     &quot;population&quot; &quot;total&quot;</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="Compact" /><w:numPr><w:numId w:val="1017" /><w:ilvl w:val="0" /></w:numPr></w:pPr><w:r><w:t xml:space="preserve">In this module we have learned that every variable has a class. For example, the class can be a</w:t></w:r><w:r><w:t xml:space="preserve"> </w:t></w:r><w:r><w:rPr><w:i /></w:rPr><w:t xml:space="preserve">character</w:t></w:r><w:r><w:t xml:space="preserve">,</w:t></w:r><w:r><w:t xml:space="preserve"> </w:t></w:r><w:r><w:rPr><w:i /></w:rPr><w:t xml:space="preserve">numeric</w:t></w:r><w:r><w:t xml:space="preserve"> </w:t></w:r><w:r><w:t xml:space="preserve">or</w:t></w:r><w:r><w:t xml:space="preserve"> </w:t></w:r><w:r><w:rPr><w:i /></w:rPr><w:t xml:space="preserve">logical</w:t></w:r><w:r><w:t xml:space="preserve">. The function</w:t></w:r><w:r><w:t xml:space="preserve"> </w:t></w:r><w:r><w:rPr><w:rStyle w:val="VerbatimChar" /></w:rPr><w:t xml:space="preserve">class()</w:t></w:r><w:r><w:t xml:space="preserve"> </w:t></w:r><w:r><w:t xml:space="preserve">can be used to determine the class of an object.</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="FirstParagraph" /></w:pPr><w:r><w:t xml:space="preserve">Here we are going to determine the class of one of the variables in the</w:t></w:r><w:r><w:t xml:space="preserve"> </w:t></w:r><w:r><w:rPr><w:rStyle w:val="VerbatimChar" /></w:rPr><w:t xml:space="preserve">murders</w:t></w:r><w:r><w:t xml:space="preserve"> </w:t></w:r><w:r><w:t xml:space="preserve">data frame. To extract variables from a data frame we use</w:t></w:r><w:r><w:t xml:space="preserve"> </w:t></w:r><w:r><w:rPr><w:rStyle w:val="VerbatimChar" /></w:rPr><w:t xml:space="preserve">$</w:t></w:r><w:r><w:t xml:space="preserve">, referred to as the accessor.</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="SourceCode" /></w:pPr><w:r><w:rPr><w:rStyle w:val="CommentTok" /></w:rPr><w:t xml:space="preserve"># To access the population variable from the murders dataset use this code:</w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">p &lt;-</w:t></w:r><w:r><w:rPr><w:rStyle w:val="StringTok" /></w:rPr><w:t xml:space="preserve"> </w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">murders</w:t></w:r><w:r><w:rPr><w:rStyle w:val="OperatorTok" /></w:rPr><w:t xml:space="preserve">$</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">population </w:t></w:r><w:r><w:br /></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="CommentTok" /></w:rPr><w:t xml:space="preserve"># To determine the class of object `p` we use this code:</w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="KeywordTok" /></w:rPr><w:t xml:space="preserve">class</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">(p)</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="SourceCode" /></w:pPr><w:r><w:rPr><w:rStyle w:val="VerbatimChar" /></w:rPr><w:t xml:space="preserve">## [1] &quot;numeric&quot;</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="SourceCode" /></w:pPr><w:r><w:rPr><w:rStyle w:val="CommentTok" /></w:rPr><w:t xml:space="preserve"># Use the accessor to extract state abbreviations and assign it to a</w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">a &lt;-</w:t></w:r><w:r><w:rPr><w:rStyle w:val="StringTok" /></w:rPr><w:t xml:space="preserve"> </w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">murders</w:t></w:r><w:r><w:rPr><w:rStyle w:val="OperatorTok" /></w:rPr><w:t xml:space="preserve">$</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">abb</w:t></w:r><w:r><w:br /></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="CommentTok" /></w:rPr><w:t xml:space="preserve"># Determine the class of a</w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="KeywordTok" /></w:rPr><w:t xml:space="preserve">class</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">(a)</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="SourceCode" /></w:pPr><w:r><w:rPr><w:rStyle w:val="VerbatimChar" /></w:rPr><w:t xml:space="preserve">## [1] &quot;character&quot;</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="Compact" /><w:numPr><w:numId w:val="1018" /><w:ilvl w:val="0" /></w:numPr></w:pPr><w:r><w:t xml:space="preserve">An important lesson you should learn early on is that there are multiple ways to do things in R. For example, to generate the first five integers we note that</w:t></w:r><w:r><w:t xml:space="preserve"> </w:t></w:r><w:r><w:rPr><w:rStyle w:val="VerbatimChar" /></w:rPr><w:t xml:space="preserve">1:5</w:t></w:r><w:r><w:t xml:space="preserve"> </w:t></w:r><w:r><w:t xml:space="preserve">and</w:t></w:r><w:r><w:t xml:space="preserve"> </w:t></w:r><w:r><w:rPr><w:rStyle w:val="VerbatimChar" /></w:rPr><w:t xml:space="preserve">seq(1,5)</w:t></w:r><w:r><w:t xml:space="preserve"> </w:t></w:r><w:r><w:t xml:space="preserve">return the same result.</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="FirstParagraph" /></w:pPr><w:r><w:t xml:space="preserve">There are also multiple ways to access variables in a data frame. For example we can use the square brackets</w:t></w:r><w:r><w:t xml:space="preserve"> </w:t></w:r><w:r><w:rPr><w:rStyle w:val="VerbatimChar" /></w:rPr><w:t xml:space="preserve">[[</w:t></w:r><w:r><w:t xml:space="preserve"> </w:t></w:r><w:r><w:t xml:space="preserve">instead of the accessor</w:t></w:r><w:r><w:t xml:space="preserve"> </w:t></w:r><w:r><w:rPr><w:rStyle w:val="VerbatimChar" /></w:rPr><w:t xml:space="preserve">$</w:t></w:r><w:r><w:t xml:space="preserve">.</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="BodyText" /></w:pPr><w:r><w:t xml:space="preserve">If you instead try to access a column with just one bracket,</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="SourceCode" /></w:pPr><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">murders[</w:t></w:r><w:r><w:rPr><w:rStyle w:val="StringTok" /></w:rPr><w:t xml:space="preserve">&quot;population&quot;</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">]</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="FirstParagraph" /></w:pPr><w:r><w:t xml:space="preserve">R returns a subset of the original data frame containing just this column. This new object will be of class</w:t></w:r><w:r><w:t xml:space="preserve"> </w:t></w:r><w:r><w:rPr><w:rStyle w:val="VerbatimChar" /></w:rPr><w:t xml:space="preserve">data.frame</w:t></w:r><w:r><w:t xml:space="preserve"> </w:t></w:r><w:r><w:t xml:space="preserve">rather than a vector. To access the column itself you need to use either the</w:t></w:r><w:r><w:t xml:space="preserve"> </w:t></w:r><w:r><w:rPr><w:rStyle w:val="VerbatimChar" /></w:rPr><w:t xml:space="preserve">$</w:t></w:r><w:r><w:t xml:space="preserve"> </w:t></w:r><w:r><w:t xml:space="preserve">accessor or the double square brackets</w:t></w:r><w:r><w:t xml:space="preserve"> </w:t></w:r><w:r><w:rPr><w:rStyle w:val="VerbatimChar" /></w:rPr><w:t xml:space="preserve">[[</w:t></w:r><w:r><w:t xml:space="preserve">.</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="BodyText" /></w:pPr><w:r><w:t xml:space="preserve">Parentheses, in contrast, are mainly used alongside functions to indicate what argument the function should be doing something to. For example, when we did</w:t></w:r><w:r><w:t xml:space="preserve"> </w:t></w:r><w:r><w:rPr><w:rStyle w:val="VerbatimChar" /></w:rPr><w:t xml:space="preserve">class(p)</w:t></w:r><w:r><w:t xml:space="preserve"> </w:t></w:r><w:r><w:t xml:space="preserve">in the last question, we wanted the function</w:t></w:r><w:r><w:t xml:space="preserve"> </w:t></w:r><w:r><w:rPr><w:rStyle w:val="VerbatimChar" /></w:rPr><w:t xml:space="preserve">class</w:t></w:r><w:r><w:t xml:space="preserve"> </w:t></w:r><w:r><w:t xml:space="preserve">to do something related to the argument</w:t></w:r><w:r><w:t xml:space="preserve"> </w:t></w:r><w:r><w:rPr><w:rStyle w:val="VerbatimChar" /></w:rPr><w:t xml:space="preserve">p</w:t></w:r><w:r><w:t xml:space="preserve">.</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="BodyText" /></w:pPr><w:r><w:t xml:space="preserve">This is an example of how R can be a bit idiosyncratic sometimes. It is very common to find it confusing at first.</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="SourceCode" /></w:pPr><w:r><w:rPr><w:rStyle w:val="CommentTok" /></w:rPr><w:t xml:space="preserve"># We extract the population like this:</w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">p &lt;-</w:t></w:r><w:r><w:rPr><w:rStyle w:val="StringTok" /></w:rPr><w:t xml:space="preserve"> </w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">murders</w:t></w:r><w:r><w:rPr><w:rStyle w:val="OperatorTok" /></w:rPr><w:t xml:space="preserve">$</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">population</w:t></w:r><w:r><w:br /></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="CommentTok" /></w:rPr><w:t xml:space="preserve"># This is how we do the same with the square brackets:</w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">o &lt;-</w:t></w:r><w:r><w:rPr><w:rStyle w:val="StringTok" /></w:rPr><w:t xml:space="preserve"> </w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">murders[[</w:t></w:r><w:r><w:rPr><w:rStyle w:val="StringTok" /></w:rPr><w:t xml:space="preserve">&quot;population&quot;</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">]]</w:t></w:r><w:r><w:br /></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="CommentTok" /></w:rPr><w:t xml:space="preserve"># We can confirm these two are the same</w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="KeywordTok" /></w:rPr><w:t xml:space="preserve">identical</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">(o, p)</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="SourceCode" /></w:pPr><w:r><w:rPr><w:rStyle w:val="VerbatimChar" /></w:rPr><w:t xml:space="preserve">## [1] TRUE</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="SourceCode" /></w:pPr><w:r><w:rPr><w:rStyle w:val="CommentTok" /></w:rPr><w:t xml:space="preserve"># Use square brackets to extract `abb` from `murders` and assign it to b</w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">b &lt;-</w:t></w:r><w:r><w:rPr><w:rStyle w:val="StringTok" /></w:rPr><w:t xml:space="preserve"> </w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">murders[[</w:t></w:r><w:r><w:rPr><w:rStyle w:val="StringTok" /></w:rPr><w:t xml:space="preserve">&quot;abb&quot;</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">]]</w:t></w:r><w:r><w:br /></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="CommentTok" /></w:rPr><w:t xml:space="preserve"># Check if `a` and `b` are identical </w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="KeywordTok" /></w:rPr><w:t xml:space="preserve">identical</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">(a, b)</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="SourceCode" /></w:pPr><w:r><w:rPr><w:rStyle w:val="VerbatimChar" /></w:rPr><w:t xml:space="preserve">## [1] TRUE</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="Compact" /><w:numPr><w:numId w:val="1019" /><w:ilvl w:val="0" /></w:numPr></w:pPr><w:r><w:t xml:space="preserve">Using the</w:t></w:r><w:r><w:t xml:space="preserve"> </w:t></w:r><w:r><w:rPr><w:rStyle w:val="VerbatimChar" /></w:rPr><w:t xml:space="preserve">str()</w:t></w:r><w:r><w:t xml:space="preserve"> </w:t></w:r><w:r><w:t xml:space="preserve">command, we saw that the</w:t></w:r><w:r><w:t xml:space="preserve"> </w:t></w:r><w:r><w:rPr><w:i /></w:rPr><w:t xml:space="preserve">region</w:t></w:r><w:r><w:t xml:space="preserve"> </w:t></w:r><w:r><w:t xml:space="preserve">column stores a factor. You can corroborate this by using the</w:t></w:r><w:r><w:t xml:space="preserve"> </w:t></w:r><w:r><w:rPr><w:rStyle w:val="VerbatimChar" /></w:rPr><w:t xml:space="preserve">class</w:t></w:r><w:r><w:t xml:space="preserve"> </w:t></w:r><w:r><w:t xml:space="preserve">command on the</w:t></w:r><w:r><w:t xml:space="preserve"> </w:t></w:r><w:r><w:rPr><w:i /></w:rPr><w:t xml:space="preserve">region</w:t></w:r><w:r><w:t xml:space="preserve"> </w:t></w:r><w:r><w:t xml:space="preserve">column.</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="FirstParagraph" /></w:pPr><w:r><w:t xml:space="preserve">The function</w:t></w:r><w:r><w:t xml:space="preserve"> </w:t></w:r><w:r><w:rPr><w:rStyle w:val="VerbatimChar" /></w:rPr><w:t xml:space="preserve">levels</w:t></w:r><w:r><w:t xml:space="preserve"> </w:t></w:r><w:r><w:t xml:space="preserve">shows us the categories for the factor.</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="SourceCode" /></w:pPr><w:r><w:rPr><w:rStyle w:val="CommentTok" /></w:rPr><w:t xml:space="preserve"># We can see the class of the region variable using class</w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="KeywordTok" /></w:rPr><w:t xml:space="preserve">class</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">(murders</w:t></w:r><w:r><w:rPr><w:rStyle w:val="OperatorTok" /></w:rPr><w:t xml:space="preserve">$</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">region)</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="SourceCode" /></w:pPr><w:r><w:rPr><w:rStyle w:val="VerbatimChar" /></w:rPr><w:t xml:space="preserve">## [1] &quot;factor&quot;</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="SourceCode" /></w:pPr><w:r><w:rPr><w:rStyle w:val="CommentTok" /></w:rPr><w:t xml:space="preserve"># Determine the number of regions included in this variable </w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="KeywordTok" /></w:rPr><w:t xml:space="preserve">length</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">(</w:t></w:r><w:r><w:rPr><w:rStyle w:val="KeywordTok" /></w:rPr><w:t xml:space="preserve">levels</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">(murders</w:t></w:r><w:r><w:rPr><w:rStyle w:val="OperatorTok" /></w:rPr><w:t xml:space="preserve">$</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">region))</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="SourceCode" /></w:pPr><w:r><w:rPr><w:rStyle w:val="VerbatimChar" /></w:rPr><w:t xml:space="preserve">## [1] 4</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="Compact" /><w:numPr><w:numId w:val="1020" /><w:ilvl w:val="0" /></w:numPr></w:pPr><w:r><w:t xml:space="preserve">The function</w:t></w:r><w:r><w:t xml:space="preserve"> </w:t></w:r><w:r><w:rPr><w:rStyle w:val="VerbatimChar" /></w:rPr><w:t xml:space="preserve">table</w:t></w:r><w:r><w:t xml:space="preserve"> </w:t></w:r><w:r><w:t xml:space="preserve">takes a vector as input and returns the frequency of each unique element in the vector.</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="SourceCode" /></w:pPr><w:r><w:rPr><w:rStyle w:val="CommentTok" /></w:rPr><w:t xml:space="preserve"># Here is an example of what the table function does</w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">x &lt;-</w:t></w:r><w:r><w:rPr><w:rStyle w:val="StringTok" /></w:rPr><w:t xml:space="preserve"> </w:t></w:r><w:r><w:rPr><w:rStyle w:val="KeywordTok" /></w:rPr><w:t xml:space="preserve">c</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">(</w:t></w:r><w:r><w:rPr><w:rStyle w:val="StringTok" /></w:rPr><w:t xml:space="preserve">&quot;a&quot;</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">, </w:t></w:r><w:r><w:rPr><w:rStyle w:val="StringTok" /></w:rPr><w:t xml:space="preserve">&quot;a&quot;</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">, </w:t></w:r><w:r><w:rPr><w:rStyle w:val="StringTok" /></w:rPr><w:t xml:space="preserve">&quot;b&quot;</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">, </w:t></w:r><w:r><w:rPr><w:rStyle w:val="StringTok" /></w:rPr><w:t xml:space="preserve">&quot;b&quot;</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">, </w:t></w:r><w:r><w:rPr><w:rStyle w:val="StringTok" /></w:rPr><w:t xml:space="preserve">&quot;b&quot;</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">, </w:t></w:r><w:r><w:rPr><w:rStyle w:val="StringTok" /></w:rPr><w:t xml:space="preserve">&quot;c&quot;</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">)</w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="KeywordTok" /></w:rPr><w:t xml:space="preserve">table</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">(x)</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="SourceCode" /></w:pPr><w:r><w:rPr><w:rStyle w:val="VerbatimChar" /></w:rPr><w:t xml:space="preserve">## x</w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="VerbatimChar" /></w:rPr><w:t xml:space="preserve">## a b c </w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="VerbatimChar" /></w:rPr><w:t xml:space="preserve">## 2 3 1</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="SourceCode" /></w:pPr><w:r><w:rPr><w:rStyle w:val="CommentTok" /></w:rPr><w:t xml:space="preserve"># Write one line of code to show the number of states per region</w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="KeywordTok" /></w:rPr><w:t xml:space="preserve">table</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">(murders</w:t></w:r><w:r><w:rPr><w:rStyle w:val="OperatorTok" /></w:rPr><w:t xml:space="preserve">$</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">region)</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="SourceCode" /></w:pPr><w:r><w:rPr><w:rStyle w:val="VerbatimChar" /></w:rPr><w:t xml:space="preserve">## </w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="VerbatimChar" /></w:rPr><w:t xml:space="preserve">##     Northeast         South North Central          West </w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="VerbatimChar" /></w:rPr><w:t xml:space="preserve">##             9            17            12            13</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="Heading2" /></w:pPr><w:bookmarkStart w:id="50" w:name="section-1-assessment" /><w:r><w:t xml:space="preserve">Section 1 Assessment</w:t></w:r><w:bookmarkEnd w:id="50" /></w:p><w:p><w:pPr><w:pStyle w:val="Compact" /><w:numPr><w:numId w:val="1021" /><w:ilvl w:val="0" /></w:numPr></w:pPr><w:r><w:t xml:space="preserve">To find the solutions to an equation of the format</w:t></w:r><w:r><w:t xml:space="preserve"> </w:t></w:r><m:oMath><m:r><m:t>a</m:t></m:r><m:sSup><m:e><m:r><m:t>x</m:t></m:r></m:e><m:sup><m:r><m:t>2</m:t></m:r></m:sup></m:sSup><m:r><m:t>+</m:t></m:r><m:r><m:t>b</m:t></m:r><m:r><m:t>x</m:t></m:r><m:r><m:t>+</m:t></m:r><m:r><m:t>c</m:t></m:r></m:oMath><w:r><w:t xml:space="preserve">, use the quadratic equation:</w:t></w:r><w:r><w:t xml:space="preserve"> </w:t></w:r><m:oMath><m:r><m:t>x</m:t></m:r><m:r><m:t>=</m:t></m:r><m:f><m:fPr><m:type m:val="bar" /></m:fPr><m:num><m:r><m:t>−</m:t></m:r><m:r><m:t>b</m:t></m:r><m:r><m:t>±</m:t></m:r><m:rad><m:radPr><m:degHide m:val="1" /></m:radPr><m:deg /><m:e><m:r><m:t>(</m:t></m:r></m:e></m:rad><m:sSup><m:e><m:r><m:t>b</m:t></m:r></m:e><m:sup><m:r><m:t>2</m:t></m:r></m:sup></m:sSup><m:r><m:t>−</m:t></m:r><m:r><m:t>4</m:t></m:r><m:r><m:t>a</m:t></m:r><m:r><m:t>c</m:t></m:r><m:r><m:t>)</m:t></m:r></m:num><m:den><m:r><m:t>2</m:t></m:r><m:r><m:t>a</m:t></m:r></m:den></m:f></m:oMath><w:r><w:t xml:space="preserve">.</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="FirstParagraph" /></w:pPr><w:r><w:t xml:space="preserve">What are the two solutions to</w:t></w:r><w:r><w:t xml:space="preserve"> </w:t></w:r><m:oMath><m:r><m:t>2</m:t></m:r><m:sSup><m:e><m:r><m:t>x</m:t></m:r></m:e><m:sup><m:r><m:t>2</m:t></m:r></m:sup></m:sSup><m:r><m:t>−</m:t></m:r><m:r><m:t>x</m:t></m:r><m:r><m:t>−</m:t></m:r><m:r><m:t>4</m:t></m:r><m:r><m:t>=</m:t></m:r><m:r><m:t>0</m:t></m:r></m:oMath><w:r><w:t xml:space="preserve">? Use the quadratic equation. (Report the greater of the two solutions first, using 3 significant digits for both solutions)</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="SourceCode" /></w:pPr><w:r><w:rPr><w:rStyle w:val="KeywordTok" /></w:rPr><w:t xml:space="preserve">options</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">(</w:t></w:r><w:r><w:rPr><w:rStyle w:val="DataTypeTok" /></w:rPr><w:t xml:space="preserve">digits =</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve"> </w:t></w:r><w:r><w:rPr><w:rStyle w:val="DecValTok" /></w:rPr><w:t xml:space="preserve">3</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">)</w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">a &lt;-</w:t></w:r><w:r><w:rPr><w:rStyle w:val="StringTok" /></w:rPr><w:t xml:space="preserve"> </w:t></w:r><w:r><w:rPr><w:rStyle w:val="DecValTok" /></w:rPr><w:t xml:space="preserve">2</w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">b &lt;-</w:t></w:r><w:r><w:rPr><w:rStyle w:val="StringTok" /></w:rPr><w:t xml:space="preserve"> </w:t></w:r><w:r><w:rPr><w:rStyle w:val="DecValTok" /></w:rPr><w:t xml:space="preserve">-1</w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">c &lt;-</w:t></w:r><w:r><w:rPr><w:rStyle w:val="StringTok" /></w:rPr><w:t xml:space="preserve"> </w:t></w:r><w:r><w:rPr><w:rStyle w:val="DecValTok" /></w:rPr><w:t xml:space="preserve">-4</w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">(</w:t></w:r><w:r><w:rPr><w:rStyle w:val="OperatorTok" /></w:rPr><w:t xml:space="preserve">-</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">b</w:t></w:r><w:r><w:rPr><w:rStyle w:val="OperatorTok" /></w:rPr><w:t xml:space="preserve">+</w:t></w:r><w:r><w:rPr><w:rStyle w:val="KeywordTok" /></w:rPr><w:t xml:space="preserve">sqrt</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">(b</w:t></w:r><w:r><w:rPr><w:rStyle w:val="OperatorTok" /></w:rPr><w:t xml:space="preserve">^</w:t></w:r><w:r><w:rPr><w:rStyle w:val="DecValTok" /></w:rPr><w:t xml:space="preserve">2-4</w:t></w:r><w:r><w:rPr><w:rStyle w:val="OperatorTok" /></w:rPr><w:t xml:space="preserve">*</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">a</w:t></w:r><w:r><w:rPr><w:rStyle w:val="OperatorTok" /></w:rPr><w:t xml:space="preserve">*</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">c))</w:t></w:r><w:r><w:rPr><w:rStyle w:val="OperatorTok" /></w:rPr><w:t xml:space="preserve">/</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">(</w:t></w:r><w:r><w:rPr><w:rStyle w:val="DecValTok" /></w:rPr><w:t xml:space="preserve">2</w:t></w:r><w:r><w:rPr><w:rStyle w:val="OperatorTok" /></w:rPr><w:t xml:space="preserve">*</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">a)</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="SourceCode" /></w:pPr><w:r><w:rPr><w:rStyle w:val="VerbatimChar" /></w:rPr><w:t xml:space="preserve">## [1] 1.69</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="SourceCode" /></w:pPr><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">(</w:t></w:r><w:r><w:rPr><w:rStyle w:val="OperatorTok" /></w:rPr><w:t xml:space="preserve">-</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">b</w:t></w:r><w:r><w:rPr><w:rStyle w:val="OperatorTok" /></w:rPr><w:t xml:space="preserve">-</w:t></w:r><w:r><w:rPr><w:rStyle w:val="KeywordTok" /></w:rPr><w:t xml:space="preserve">sqrt</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">(b</w:t></w:r><w:r><w:rPr><w:rStyle w:val="OperatorTok" /></w:rPr><w:t xml:space="preserve">^</w:t></w:r><w:r><w:rPr><w:rStyle w:val="DecValTok" /></w:rPr><w:t xml:space="preserve">2-4</w:t></w:r><w:r><w:rPr><w:rStyle w:val="OperatorTok" /></w:rPr><w:t xml:space="preserve">*</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">a</w:t></w:r><w:r><w:rPr><w:rStyle w:val="OperatorTok" /></w:rPr><w:t xml:space="preserve">*</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">c))</w:t></w:r><w:r><w:rPr><w:rStyle w:val="OperatorTok" /></w:rPr><w:t xml:space="preserve">/</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">(</w:t></w:r><w:r><w:rPr><w:rStyle w:val="DecValTok" /></w:rPr><w:t xml:space="preserve">2</w:t></w:r><w:r><w:rPr><w:rStyle w:val="OperatorTok" /></w:rPr><w:t xml:space="preserve">*</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">a)</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="SourceCode" /></w:pPr><w:r><w:rPr><w:rStyle w:val="VerbatimChar" /></w:rPr><w:t xml:space="preserve">## [1] -1.19</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="Compact" /><w:numPr><w:numId w:val="1022" /><w:ilvl w:val="0" /></w:numPr></w:pPr><w:r><w:t xml:space="preserve">Use R to compute log base 4 of 1024. You can use the</w:t></w:r><w:r><w:t xml:space="preserve"> </w:t></w:r><w:r><w:rPr><w:rStyle w:val="VerbatimChar" /></w:rPr><w:t xml:space="preserve">help</w:t></w:r><w:r><w:t xml:space="preserve"> </w:t></w:r><w:r><w:t xml:space="preserve">function to learn how to use arguments to change the base of the</w:t></w:r><w:r><w:t xml:space="preserve"> </w:t></w:r><w:r><w:rPr><w:rStyle w:val="VerbatimChar" /></w:rPr><w:t xml:space="preserve">log</w:t></w:r><w:r><w:t xml:space="preserve"> </w:t></w:r><w:r><w:t xml:space="preserve">function.</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="SourceCode" /></w:pPr><w:r><w:rPr><w:rStyle w:val="KeywordTok" /></w:rPr><w:t xml:space="preserve">log</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">(</w:t></w:r><w:r><w:rPr><w:rStyle w:val="DecValTok" /></w:rPr><w:t xml:space="preserve">1024</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">, </w:t></w:r><w:r><w:rPr><w:rStyle w:val="DataTypeTok" /></w:rPr><w:t xml:space="preserve">base =</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve"> </w:t></w:r><w:r><w:rPr><w:rStyle w:val="DecValTok" /></w:rPr><w:t xml:space="preserve">4</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">)</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="SourceCode" /></w:pPr><w:r><w:rPr><w:rStyle w:val="VerbatimChar" /></w:rPr><w:t xml:space="preserve">## [1] 5</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="Compact" /><w:numPr><w:numId w:val="1023" /><w:ilvl w:val="0" /></w:numPr></w:pPr><w:r><w:t xml:space="preserve">Load the</w:t></w:r><w:r><w:t xml:space="preserve"> </w:t></w:r><w:r><w:rPr><w:rStyle w:val="VerbatimChar" /></w:rPr><w:t xml:space="preserve">movielens</w:t></w:r><w:r><w:t xml:space="preserve"> </w:t></w:r><w:r><w:t xml:space="preserve">dataset</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="SourceCode" /></w:pPr><w:r><w:rPr><w:rStyle w:val="KeywordTok" /></w:rPr><w:t xml:space="preserve">data</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">(movielens)</w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="KeywordTok" /></w:rPr><w:t xml:space="preserve">str</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">(movielens)</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="SourceCode" /></w:pPr><w:r><w:rPr><w:rStyle w:val="VerbatimChar" /></w:rPr><w:t xml:space="preserve">## &#39;data.frame&#39;:    100004 obs. of  7 variables:</w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="VerbatimChar" /></w:rPr><w:t xml:space="preserve">##  $ movieId  : int  31 1029 1061 1129 1172 1263 1287 1293 1339 1343 ...</w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="VerbatimChar" /></w:rPr><w:t xml:space="preserve">##  $ title    : chr  &quot;Dangerous Minds&quot; &quot;Dumbo&quot; &quot;Sleepers&quot; &quot;Escape from New York&quot; ...</w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="VerbatimChar" /></w:rPr><w:t xml:space="preserve">##  $ year     : int  1995 1941 1996 1981 1989 1978 1959 1982 1992 1991 ...</w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="VerbatimChar" /></w:rPr><w:t xml:space="preserve">##  $ genres   : Factor w/ 901 levels &quot;(no genres listed)&quot;,..: 762 510 899 120 762 836 81 762 844 899 ...</w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="VerbatimChar" /></w:rPr><w:t xml:space="preserve">##  $ userId   : int  1 1 1 1 1 1 1 1 1 1 ...</w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="VerbatimChar" /></w:rPr><w:t xml:space="preserve">##  $ rating   : num  2.5 3 3 2 4 2 2 2 3.5 2 ...</w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="VerbatimChar" /></w:rPr><w:t xml:space="preserve">##  $ timestamp: int  1260759144 1260759179 1260759182 1260759185 1260759205 1260759151 1260759187 1260759148 1260759125 1260759131 ...</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="FirstParagraph" /></w:pPr><w:r><w:t xml:space="preserve">How many rows are in the dataset?</w:t></w:r><w:r><w:t xml:space="preserve"> </w:t></w:r><w:r><w:rPr><w:rStyle w:val="VerbatimChar" /></w:rPr><w:t xml:space="preserve">100004</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="BodyText" /></w:pPr><w:r><w:t xml:space="preserve">How many different variables are in the dataset?</w:t></w:r><w:r><w:t xml:space="preserve"> </w:t></w:r><w:r><w:rPr><w:rStyle w:val="VerbatimChar" /></w:rPr><w:t xml:space="preserve">7</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="BodyText" /></w:pPr><w:r><w:t xml:space="preserve">What is the variable type of</w:t></w:r><w:r><w:t xml:space="preserve"> </w:t></w:r><w:r><w:rPr><w:rStyle w:val="VerbatimChar" /></w:rPr><w:t xml:space="preserve">title</w:t></w:r><w:r><w:t xml:space="preserve">?</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="Compact" /><w:numPr><w:numId w:val="1024" /><w:ilvl w:val="0" /></w:numPr></w:pPr><w:r><w:t xml:space="preserve">☐ A. It is a text (txt) variable</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="Compact" /><w:numPr><w:numId w:val="1024" /><w:ilvl w:val="0" /></w:numPr></w:pPr><w:r><w:t xml:space="preserve">☐ B. It is a chronological (chr) variable</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="Compact" /><w:numPr><w:numId w:val="1024" /><w:ilvl w:val="0" /></w:numPr></w:pPr><w:r><w:t xml:space="preserve">☐ C. It is a string (str) variable</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="Compact" /><w:numPr><w:numId w:val="1024" /><w:ilvl w:val="0" /></w:numPr></w:pPr><w:r><w:t xml:space="preserve">☐ D. It is a numeric (num) variable</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="Compact" /><w:numPr><w:numId w:val="1024" /><w:ilvl w:val="0" /></w:numPr></w:pPr><w:r><w:t xml:space="preserve">☐ E. It is an integer (int) variable</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="Compact" /><w:numPr><w:numId w:val="1024" /><w:ilvl w:val="0" /></w:numPr></w:pPr><w:r><w:t xml:space="preserve">☐ F. It is a factor (Factor) variable</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="Compact" /><w:numPr><w:numId w:val="1024" /><w:ilvl w:val="0" /></w:numPr></w:pPr><w:r><w:t xml:space="preserve">☒ G. It is a character (chr) variable</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="FirstParagraph" /></w:pPr><w:r><w:t xml:space="preserve">What is the variable type of</w:t></w:r><w:r><w:t xml:space="preserve"> </w:t></w:r><w:r><w:rPr><w:rStyle w:val="VerbatimChar" /></w:rPr><w:t xml:space="preserve">genres</w:t></w:r><w:r><w:t xml:space="preserve">?</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="Compact" /><w:numPr><w:numId w:val="1025" /><w:ilvl w:val="0" /></w:numPr></w:pPr><w:r><w:t xml:space="preserve">☐ A. It is a text (txt) variable</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="Compact" /><w:numPr><w:numId w:val="1025" /><w:ilvl w:val="0" /></w:numPr></w:pPr><w:r><w:t xml:space="preserve">☐ B. It is a chronological (chr) variable</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="Compact" /><w:numPr><w:numId w:val="1025" /><w:ilvl w:val="0" /></w:numPr></w:pPr><w:r><w:t xml:space="preserve">☐ C. It is a string (str) variable</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="Compact" /><w:numPr><w:numId w:val="1025" /><w:ilvl w:val="0" /></w:numPr></w:pPr><w:r><w:t xml:space="preserve">☐ D. It is a numeric (num) variable</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="Compact" /><w:numPr><w:numId w:val="1025" /><w:ilvl w:val="0" /></w:numPr></w:pPr><w:r><w:t xml:space="preserve">☐ E. It is an integer (int) variable</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="Compact" /><w:numPr><w:numId w:val="1025" /><w:ilvl w:val="0" /></w:numPr></w:pPr><w:r><w:t xml:space="preserve">☒ F. It is a factor (Factor) variable</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="Compact" /><w:numPr><w:numId w:val="1025" /><w:ilvl w:val="0" /></w:numPr></w:pPr><w:r><w:t xml:space="preserve">☐ G. It is a character (chr) variable</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="Compact" /><w:numPr><w:numId w:val="1026" /><w:ilvl w:val="0" /></w:numPr></w:pPr><w:r><w:t xml:space="preserve">We already know we can use the</w:t></w:r><w:r><w:t xml:space="preserve"> </w:t></w:r><w:r><w:rPr><w:rStyle w:val="VerbatimChar" /></w:rPr><w:t xml:space="preserve">levels()</w:t></w:r><w:r><w:t xml:space="preserve"> </w:t></w:r><w:r><w:t xml:space="preserve">function to determine the levels of a factor. A different function,</w:t></w:r><w:r><w:t xml:space="preserve"> </w:t></w:r><w:r><w:rPr><w:rStyle w:val="VerbatimChar" /></w:rPr><w:t xml:space="preserve">nlevels()</w:t></w:r><w:r><w:t xml:space="preserve">, may be used to determine the number of levels of a factor.</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="FirstParagraph" /></w:pPr><w:r><w:t xml:space="preserve">Use this function to determine how many levels are in the factor</w:t></w:r><w:r><w:t xml:space="preserve"> </w:t></w:r><w:r><w:rPr><w:rStyle w:val="VerbatimChar" /></w:rPr><w:t xml:space="preserve">genres</w:t></w:r><w:r><w:t xml:space="preserve"> </w:t></w:r><w:r><w:t xml:space="preserve">in the</w:t></w:r><w:r><w:t xml:space="preserve"> </w:t></w:r><w:r><w:rPr><w:rStyle w:val="VerbatimChar" /></w:rPr><w:t xml:space="preserve">movielens</w:t></w:r><w:r><w:t xml:space="preserve"> </w:t></w:r><w:r><w:t xml:space="preserve">data frame.</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="SourceCode" /></w:pPr><w:r><w:rPr><w:rStyle w:val="KeywordTok" /></w:rPr><w:t xml:space="preserve">nlevels</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">(movielens</w:t></w:r><w:r><w:rPr><w:rStyle w:val="OperatorTok" /></w:rPr><w:t xml:space="preserve">$</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">genres)</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="SourceCode" /></w:pPr><w:r><w:rPr><w:rStyle w:val="VerbatimChar" /></w:rPr><w:t xml:space="preserve">## [1] 901</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="Heading2" /></w:pPr><w:bookmarkStart w:id="51" w:name="section-2-overview" /><w:r><w:t xml:space="preserve">Section 2 Overview</w:t></w:r><w:bookmarkEnd w:id="51" /></w:p><w:p><w:pPr><w:pStyle w:val="FirstParagraph" /></w:pPr><w:r><w:t xml:space="preserve">In Section 2.1, you will:</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="Compact" /><w:numPr><w:numId w:val="1027" /><w:ilvl w:val="0" /></w:numPr></w:pPr><w:r><w:t xml:space="preserve">Create numeric and character vectors.</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="Compact" /><w:numPr><w:numId w:val="1027" /><w:ilvl w:val="0" /></w:numPr></w:pPr><w:r><w:t xml:space="preserve">Name the columns of a vector.</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="Compact" /><w:numPr><w:numId w:val="1027" /><w:ilvl w:val="0" /></w:numPr></w:pPr><w:r><w:t xml:space="preserve">Generate numeric sequences.</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="Compact" /><w:numPr><w:numId w:val="1027" /><w:ilvl w:val="0" /></w:numPr></w:pPr><w:r><w:t xml:space="preserve">Access specific elements or parts of a vector.</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="Compact" /><w:numPr><w:numId w:val="1027" /><w:ilvl w:val="0" /></w:numPr></w:pPr><w:r><w:t xml:space="preserve">Coerce data into different data types as needed.</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="FirstParagraph" /></w:pPr><w:r><w:t xml:space="preserve">In Section 2.2, you will:</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="Compact" /><w:numPr><w:numId w:val="1028" /><w:ilvl w:val="0" /></w:numPr></w:pPr><w:r><w:t xml:space="preserve">Sort vectors in ascending and descending order.</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="Compact" /><w:numPr><w:numId w:val="1028" /><w:ilvl w:val="0" /></w:numPr></w:pPr><w:r><w:t xml:space="preserve">Extract the indices of the sorted elements from the original vector.</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="Compact" /><w:numPr><w:numId w:val="1028" /><w:ilvl w:val="0" /></w:numPr></w:pPr><w:r><w:t xml:space="preserve">Find the maximum and minimum elements, as well as their indices, in a vector.</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="Compact" /><w:numPr><w:numId w:val="1028" /><w:ilvl w:val="0" /></w:numPr></w:pPr><w:r><w:t xml:space="preserve">Rank the elements of a vector in increasing order.</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="FirstParagraph" /></w:pPr><w:r><w:t xml:space="preserve">In Section 2.3, you will:</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="Compact" /><w:numPr><w:numId w:val="1029" /><w:ilvl w:val="0" /></w:numPr></w:pPr><w:r><w:t xml:space="preserve">Perform arithmetic between a vector and a single number.</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="Compact" /><w:numPr><w:numId w:val="1029" /><w:ilvl w:val="0" /></w:numPr></w:pPr><w:r><w:t xml:space="preserve">Perform arithmetic between two vectors of same length.</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="Heading2" /></w:pPr><w:bookmarkStart w:id="52" w:name="vectors" /><w:r><w:t xml:space="preserve">Vectors</w:t></w:r><w:bookmarkEnd w:id="52" /></w:p><w:p><w:pPr><w:pStyle w:val="FirstParagraph" /></w:pPr><w:r><w:t xml:space="preserve">The textbook for this section is available</w:t></w:r><w:r><w:t xml:space="preserve"> </w:t></w:r><w:hyperlink r:id="rId53"><w:r><w:rPr><w:rStyle w:val="Hyperlink" /></w:rPr><w:t xml:space="preserve">here</w:t></w:r></w:hyperlink></w:p><w:p><w:pPr><w:pStyle w:val="BodyText" /></w:pPr><w:r><w:rPr><w:b /></w:rPr><w:t xml:space="preserve">Key Points</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="Compact" /><w:numPr><w:numId w:val="1030" /><w:ilvl w:val="0" /></w:numPr></w:pPr><w:r><w:t xml:space="preserve">The function</w:t></w:r><w:r><w:t xml:space="preserve"> </w:t></w:r><w:r><w:rPr><w:rStyle w:val="VerbatimChar" /></w:rPr><w:t xml:space="preserve">c()</w:t></w:r><w:r><w:t xml:space="preserve">, which stands for concatenate, is useful for creating vectors.</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="Compact" /><w:numPr><w:numId w:val="1030" /><w:ilvl w:val="0" /></w:numPr></w:pPr><w:r><w:t xml:space="preserve">Another useful function for creating vectors is the</w:t></w:r><w:r><w:t xml:space="preserve"> </w:t></w:r><w:r><w:rPr><w:rStyle w:val="VerbatimChar" /></w:rPr><w:t xml:space="preserve">seq()</w:t></w:r><w:r><w:t xml:space="preserve"> </w:t></w:r><w:r><w:t xml:space="preserve">function, which generates sequences.</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="Compact" /><w:numPr><w:numId w:val="1030" /><w:ilvl w:val="0" /></w:numPr></w:pPr><w:r><w:t xml:space="preserve">Subsetting lets us access specific parts of a vector by using square brackets to access elements of a vector.</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="FirstParagraph" /></w:pPr><w:r><w:rPr><w:i /></w:rPr><w:t xml:space="preserve">Code</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="SourceCode" /></w:pPr><w:r><w:rPr><w:rStyle w:val="CommentTok" /></w:rPr><w:t xml:space="preserve"># We may create vectors of class numeric or character with the concatenate function</w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">codes &lt;-</w:t></w:r><w:r><w:rPr><w:rStyle w:val="StringTok" /></w:rPr><w:t xml:space="preserve"> </w:t></w:r><w:r><w:rPr><w:rStyle w:val="KeywordTok" /></w:rPr><w:t xml:space="preserve">c</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">(</w:t></w:r><w:r><w:rPr><w:rStyle w:val="DecValTok" /></w:rPr><w:t xml:space="preserve">380</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">, </w:t></w:r><w:r><w:rPr><w:rStyle w:val="DecValTok" /></w:rPr><w:t xml:space="preserve">124</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">, </w:t></w:r><w:r><w:rPr><w:rStyle w:val="DecValTok" /></w:rPr><w:t xml:space="preserve">818</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">)</w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">country &lt;-</w:t></w:r><w:r><w:rPr><w:rStyle w:val="StringTok" /></w:rPr><w:t xml:space="preserve"> </w:t></w:r><w:r><w:rPr><w:rStyle w:val="KeywordTok" /></w:rPr><w:t xml:space="preserve">c</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">(</w:t></w:r><w:r><w:rPr><w:rStyle w:val="StringTok" /></w:rPr><w:t xml:space="preserve">&quot;italy&quot;</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">, </w:t></w:r><w:r><w:rPr><w:rStyle w:val="StringTok" /></w:rPr><w:t xml:space="preserve">&quot;canada&quot;</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">, </w:t></w:r><w:r><w:rPr><w:rStyle w:val="StringTok" /></w:rPr><w:t xml:space="preserve">&quot;egypt&quot;</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">)</w:t></w:r><w:r><w:br /></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="CommentTok" /></w:rPr><w:t xml:space="preserve"># We can also name the elements of a numeric vector</w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="CommentTok" /></w:rPr><w:t xml:space="preserve"># Note that the two lines of code below have the same result</w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">codes &lt;-</w:t></w:r><w:r><w:rPr><w:rStyle w:val="StringTok" /></w:rPr><w:t xml:space="preserve"> </w:t></w:r><w:r><w:rPr><w:rStyle w:val="KeywordTok" /></w:rPr><w:t xml:space="preserve">c</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">(</w:t></w:r><w:r><w:rPr><w:rStyle w:val="DataTypeTok" /></w:rPr><w:t xml:space="preserve">italy =</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve"> </w:t></w:r><w:r><w:rPr><w:rStyle w:val="DecValTok" /></w:rPr><w:t xml:space="preserve">380</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">, </w:t></w:r><w:r><w:rPr><w:rStyle w:val="DataTypeTok" /></w:rPr><w:t xml:space="preserve">canada =</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve"> </w:t></w:r><w:r><w:rPr><w:rStyle w:val="DecValTok" /></w:rPr><w:t xml:space="preserve">124</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">, </w:t></w:r><w:r><w:rPr><w:rStyle w:val="DataTypeTok" /></w:rPr><w:t xml:space="preserve">egypt =</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve"> </w:t></w:r><w:r><w:rPr><w:rStyle w:val="DecValTok" /></w:rPr><w:t xml:space="preserve">818</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">)</w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">codes &lt;-</w:t></w:r><w:r><w:rPr><w:rStyle w:val="StringTok" /></w:rPr><w:t xml:space="preserve"> </w:t></w:r><w:r><w:rPr><w:rStyle w:val="KeywordTok" /></w:rPr><w:t xml:space="preserve">c</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">(</w:t></w:r><w:r><w:rPr><w:rStyle w:val="StringTok" /></w:rPr><w:t xml:space="preserve">&quot;italy&quot;</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve"> =</w:t></w:r><w:r><w:rPr><w:rStyle w:val="StringTok" /></w:rPr><w:t xml:space="preserve"> </w:t></w:r><w:r><w:rPr><w:rStyle w:val="DecValTok" /></w:rPr><w:t xml:space="preserve">380</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">, </w:t></w:r><w:r><w:rPr><w:rStyle w:val="StringTok" /></w:rPr><w:t xml:space="preserve">&quot;canada&quot;</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve"> =</w:t></w:r><w:r><w:rPr><w:rStyle w:val="StringTok" /></w:rPr><w:t xml:space="preserve"> </w:t></w:r><w:r><w:rPr><w:rStyle w:val="DecValTok" /></w:rPr><w:t xml:space="preserve">124</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">, </w:t></w:r><w:r><w:rPr><w:rStyle w:val="StringTok" /></w:rPr><w:t xml:space="preserve">&quot;egypt&quot;</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve"> =</w:t></w:r><w:r><w:rPr><w:rStyle w:val="StringTok" /></w:rPr><w:t xml:space="preserve"> </w:t></w:r><w:r><w:rPr><w:rStyle w:val="DecValTok" /></w:rPr><w:t xml:space="preserve">818</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">)</w:t></w:r><w:r><w:br /></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="CommentTok" /></w:rPr><w:t xml:space="preserve"># We can also name the elements of a numeric vector using the names() function</w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">codes &lt;-</w:t></w:r><w:r><w:rPr><w:rStyle w:val="StringTok" /></w:rPr><w:t xml:space="preserve"> </w:t></w:r><w:r><w:rPr><w:rStyle w:val="KeywordTok" /></w:rPr><w:t xml:space="preserve">c</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">(</w:t></w:r><w:r><w:rPr><w:rStyle w:val="DecValTok" /></w:rPr><w:t xml:space="preserve">380</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">, </w:t></w:r><w:r><w:rPr><w:rStyle w:val="DecValTok" /></w:rPr><w:t xml:space="preserve">124</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">, </w:t></w:r><w:r><w:rPr><w:rStyle w:val="DecValTok" /></w:rPr><w:t xml:space="preserve">818</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">)</w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">country &lt;-</w:t></w:r><w:r><w:rPr><w:rStyle w:val="StringTok" /></w:rPr><w:t xml:space="preserve"> </w:t></w:r><w:r><w:rPr><w:rStyle w:val="KeywordTok" /></w:rPr><w:t xml:space="preserve">c</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">(</w:t></w:r><w:r><w:rPr><w:rStyle w:val="StringTok" /></w:rPr><w:t xml:space="preserve">&quot;italy&quot;</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">,</w:t></w:r><w:r><w:rPr><w:rStyle w:val="StringTok" /></w:rPr><w:t xml:space="preserve">&quot;canada&quot;</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">,</w:t></w:r><w:r><w:rPr><w:rStyle w:val="StringTok" /></w:rPr><w:t xml:space="preserve">&quot;egypt&quot;</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">)</w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="KeywordTok" /></w:rPr><w:t xml:space="preserve">names</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">(codes) &lt;-</w:t></w:r><w:r><w:rPr><w:rStyle w:val="StringTok" /></w:rPr><w:t xml:space="preserve"> </w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">country</w:t></w:r><w:r><w:br /></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="CommentTok" /></w:rPr><w:t xml:space="preserve"># Using square brackets is useful for subsetting to access specific elements of a vector</w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">codes[</w:t></w:r><w:r><w:rPr><w:rStyle w:val="DecValTok" /></w:rPr><w:t xml:space="preserve">2</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">]</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="SourceCode" /></w:pPr><w:r><w:rPr><w:rStyle w:val="VerbatimChar" /></w:rPr><w:t xml:space="preserve">## canada </w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="VerbatimChar" /></w:rPr><w:t xml:space="preserve">##    124</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="SourceCode" /></w:pPr><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">codes[</w:t></w:r><w:r><w:rPr><w:rStyle w:val="KeywordTok" /></w:rPr><w:t xml:space="preserve">c</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">(</w:t></w:r><w:r><w:rPr><w:rStyle w:val="DecValTok" /></w:rPr><w:t xml:space="preserve">1</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">,</w:t></w:r><w:r><w:rPr><w:rStyle w:val="DecValTok" /></w:rPr><w:t xml:space="preserve">3</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">)]</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="SourceCode" /></w:pPr><w:r><w:rPr><w:rStyle w:val="VerbatimChar" /></w:rPr><w:t xml:space="preserve">## italy egypt </w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="VerbatimChar" /></w:rPr><w:t xml:space="preserve">##   380   818</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="SourceCode" /></w:pPr><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">codes[</w:t></w:r><w:r><w:rPr><w:rStyle w:val="DecValTok" /></w:rPr><w:t xml:space="preserve">1</w:t></w:r><w:r><w:rPr><w:rStyle w:val="OperatorTok" /></w:rPr><w:t xml:space="preserve">:</w:t></w:r><w:r><w:rPr><w:rStyle w:val="DecValTok" /></w:rPr><w:t xml:space="preserve">2</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">]</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="SourceCode" /></w:pPr><w:r><w:rPr><w:rStyle w:val="VerbatimChar" /></w:rPr><w:t xml:space="preserve">##  italy canada </w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="VerbatimChar" /></w:rPr><w:t xml:space="preserve">##    380    124</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="SourceCode" /></w:pPr><w:r><w:rPr><w:rStyle w:val="CommentTok" /></w:rPr><w:t xml:space="preserve"># If the entries of a vector are named, they may be accessed by referring to their name</w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">codes[</w:t></w:r><w:r><w:rPr><w:rStyle w:val="StringTok" /></w:rPr><w:t xml:space="preserve">&quot;canada&quot;</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">]</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="SourceCode" /></w:pPr><w:r><w:rPr><w:rStyle w:val="VerbatimChar" /></w:rPr><w:t xml:space="preserve">## canada </w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="VerbatimChar" /></w:rPr><w:t xml:space="preserve">##    124</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="SourceCode" /></w:pPr><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">codes[</w:t></w:r><w:r><w:rPr><w:rStyle w:val="KeywordTok" /></w:rPr><w:t xml:space="preserve">c</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">(</w:t></w:r><w:r><w:rPr><w:rStyle w:val="StringTok" /></w:rPr><w:t xml:space="preserve">&quot;egypt&quot;</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">,</w:t></w:r><w:r><w:rPr><w:rStyle w:val="StringTok" /></w:rPr><w:t xml:space="preserve">&quot;italy&quot;</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">)]</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="SourceCode" /></w:pPr><w:r><w:rPr><w:rStyle w:val="VerbatimChar" /></w:rPr><w:t xml:space="preserve">## egypt italy </w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="VerbatimChar" /></w:rPr><w:t xml:space="preserve">##   818   380</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="Heading2" /></w:pPr><w:bookmarkStart w:id="54" w:name="vectors---vector-coercion" /><w:r><w:t xml:space="preserve">Vectors - Vector Coercion</w:t></w:r><w:bookmarkEnd w:id="54" /></w:p><w:p><w:pPr><w:pStyle w:val="FirstParagraph" /></w:pPr><w:r><w:t xml:space="preserve">The textbook for this section is available</w:t></w:r><w:r><w:t xml:space="preserve"> </w:t></w:r><w:hyperlink r:id="rId55"><w:r><w:rPr><w:rStyle w:val="Hyperlink" /></w:rPr><w:t xml:space="preserve">here</w:t></w:r></w:hyperlink></w:p><w:p><w:pPr><w:pStyle w:val="BodyText" /></w:pPr><w:r><w:rPr><w:b /></w:rPr><w:t xml:space="preserve">Key Points</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="Compact" /><w:numPr><w:numId w:val="1031" /><w:ilvl w:val="0" /></w:numPr></w:pPr><w:r><w:t xml:space="preserve">In general,</w:t></w:r><w:r><w:t xml:space="preserve"> </w:t></w:r><w:r><w:rPr><w:i /></w:rPr><w:t xml:space="preserve">coercion</w:t></w:r><w:r><w:t xml:space="preserve"> </w:t></w:r><w:r><w:t xml:space="preserve">is an attempt by R to be flexible with data types by guessing what was meant when an entry does not match the expected. For example, when defining x as</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="FirstParagraph" /></w:pPr><w:r><w:t xml:space="preserve">x &lt;- c(1,</w:t></w:r><w:r><w:t xml:space="preserve"> </w:t></w:r><w:r><w:t xml:space="preserve">“</w:t></w:r><w:r><w:t xml:space="preserve">canada</w:t></w:r><w:r><w:t xml:space="preserve">”</w:t></w:r><w:r><w:t xml:space="preserve">, 3)</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="BodyText" /></w:pPr><w:r><w:t xml:space="preserve">R</w:t></w:r><w:r><w:t xml:space="preserve"> </w:t></w:r><w:r><w:rPr><w:i /></w:rPr><w:t xml:space="preserve">coerced</w:t></w:r><w:r><w:t xml:space="preserve"> </w:t></w:r><w:r><w:t xml:space="preserve">the data into characters. It guessed that because you put a character string in the vector, you meant the 1 and 3 to actually be character strings</w:t></w:r><w:r><w:t xml:space="preserve"> </w:t></w:r><w:r><w:t xml:space="preserve">“</w:t></w:r><w:r><w:t xml:space="preserve">1</w:t></w:r><w:r><w:t xml:space="preserve">”</w:t></w:r><w:r><w:t xml:space="preserve"> </w:t></w:r><w:r><w:t xml:space="preserve">and</w:t></w:r><w:r><w:t xml:space="preserve"> </w:t></w:r><w:r><w:t xml:space="preserve">“</w:t></w:r><w:r><w:t xml:space="preserve">3</w:t></w:r><w:r><w:t xml:space="preserve">”</w:t></w:r><w:r><w:t xml:space="preserve">.</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="Compact" /><w:numPr><w:numId w:val="1032" /><w:ilvl w:val="0" /></w:numPr></w:pPr><w:r><w:t xml:space="preserve">The function</w:t></w:r><w:r><w:t xml:space="preserve"> </w:t></w:r><w:r><w:rPr><w:rStyle w:val="VerbatimChar" /></w:rPr><w:t xml:space="preserve">as.character()</w:t></w:r><w:r><w:t xml:space="preserve"> </w:t></w:r><w:r><w:t xml:space="preserve">turns numbers into characters.</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="Compact" /><w:numPr><w:numId w:val="1032" /><w:ilvl w:val="0" /></w:numPr></w:pPr><w:r><w:t xml:space="preserve">The function</w:t></w:r><w:r><w:t xml:space="preserve"> </w:t></w:r><w:r><w:rPr><w:rStyle w:val="VerbatimChar" /></w:rPr><w:t xml:space="preserve">as.numeric()</w:t></w:r><w:r><w:t xml:space="preserve"> </w:t></w:r><w:r><w:t xml:space="preserve">turns characters into numbers.</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="Compact" /><w:numPr><w:numId w:val="1032" /><w:ilvl w:val="0" /></w:numPr></w:pPr><w:r><w:t xml:space="preserve">In R, missing data is assigned the value NA.</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="Heading2" /></w:pPr><w:bookmarkStart w:id="56" w:name="assessment---vectors" /><w:r><w:t xml:space="preserve">Assessment - Vectors</w:t></w:r><w:bookmarkEnd w:id="56" /></w:p><w:p><w:pPr><w:pStyle w:val="Compact" /><w:numPr><w:numId w:val="1033" /><w:ilvl w:val="0" /></w:numPr></w:pPr><w:r><w:t xml:space="preserve">A vector is a series of values, all of the same type. They are the most basic data type in R and can hold numeric data, character data, or logical data. In R, you can create a vector with the concatenate (or combine) function</w:t></w:r><w:r><w:t xml:space="preserve"> </w:t></w:r><w:r><w:rPr><w:rStyle w:val="VerbatimChar" /></w:rPr><w:t xml:space="preserve">c()</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="FirstParagraph" /></w:pPr><w:r><w:t xml:space="preserve">You place the vector elements separated by a comma between the parentheses. For example a numeric vector would look something like this:</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="SourceCode" /></w:pPr><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">cost &lt;-</w:t></w:r><w:r><w:rPr><w:rStyle w:val="StringTok" /></w:rPr><w:t xml:space="preserve"> </w:t></w:r><w:r><w:rPr><w:rStyle w:val="KeywordTok" /></w:rPr><w:t xml:space="preserve">c</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">(</w:t></w:r><w:r><w:rPr><w:rStyle w:val="DecValTok" /></w:rPr><w:t xml:space="preserve">50</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">, </w:t></w:r><w:r><w:rPr><w:rStyle w:val="DecValTok" /></w:rPr><w:t xml:space="preserve">75</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">, </w:t></w:r><w:r><w:rPr><w:rStyle w:val="DecValTok" /></w:rPr><w:t xml:space="preserve">90</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">, </w:t></w:r><w:r><w:rPr><w:rStyle w:val="DecValTok" /></w:rPr><w:t xml:space="preserve">100</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">, </w:t></w:r><w:r><w:rPr><w:rStyle w:val="DecValTok" /></w:rPr><w:t xml:space="preserve">150</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">)</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="SourceCode" /></w:pPr><w:r><w:rPr><w:rStyle w:val="CommentTok" /></w:rPr><w:t xml:space="preserve"># Here is an example creating a numeric vector named cost</w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">cost &lt;-</w:t></w:r><w:r><w:rPr><w:rStyle w:val="StringTok" /></w:rPr><w:t xml:space="preserve"> </w:t></w:r><w:r><w:rPr><w:rStyle w:val="KeywordTok" /></w:rPr><w:t xml:space="preserve">c</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">(</w:t></w:r><w:r><w:rPr><w:rStyle w:val="DecValTok" /></w:rPr><w:t xml:space="preserve">50</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">, </w:t></w:r><w:r><w:rPr><w:rStyle w:val="DecValTok" /></w:rPr><w:t xml:space="preserve">75</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">, </w:t></w:r><w:r><w:rPr><w:rStyle w:val="DecValTok" /></w:rPr><w:t xml:space="preserve">90</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">, </w:t></w:r><w:r><w:rPr><w:rStyle w:val="DecValTok" /></w:rPr><w:t xml:space="preserve">100</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">, </w:t></w:r><w:r><w:rPr><w:rStyle w:val="DecValTok" /></w:rPr><w:t xml:space="preserve">150</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">)</w:t></w:r><w:r><w:br /></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="CommentTok" /></w:rPr><w:t xml:space="preserve"># Create a numeric vector to store the temperatures listed in the instructions into a vector named temp</w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="CommentTok" /></w:rPr><w:t xml:space="preserve"># Make sure to follow the same order in the instructions</w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">temp &lt;-</w:t></w:r><w:r><w:rPr><w:rStyle w:val="StringTok" /></w:rPr><w:t xml:space="preserve"> </w:t></w:r><w:r><w:rPr><w:rStyle w:val="KeywordTok" /></w:rPr><w:t xml:space="preserve">c</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">(</w:t></w:r><w:r><w:rPr><w:rStyle w:val="StringTok" /></w:rPr><w:t xml:space="preserve">&quot;Beijing&quot;</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">=</w:t></w:r><w:r><w:rPr><w:rStyle w:val="DecValTok" /></w:rPr><w:t xml:space="preserve">35</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">, </w:t></w:r><w:r><w:rPr><w:rStyle w:val="StringTok" /></w:rPr><w:t xml:space="preserve">&quot;Lagos&quot;</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">=</w:t></w:r><w:r><w:rPr><w:rStyle w:val="DecValTok" /></w:rPr><w:t xml:space="preserve">88</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">, </w:t></w:r><w:r><w:rPr><w:rStyle w:val="StringTok" /></w:rPr><w:t xml:space="preserve">&quot;Paris&quot;</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">=</w:t></w:r><w:r><w:rPr><w:rStyle w:val="DecValTok" /></w:rPr><w:t xml:space="preserve">42</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">, </w:t></w:r><w:r><w:rPr><w:rStyle w:val="StringTok" /></w:rPr><w:t xml:space="preserve">&quot;Rio de Janeiro&quot;</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">=</w:t></w:r><w:r><w:rPr><w:rStyle w:val="DecValTok" /></w:rPr><w:t xml:space="preserve">84</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">, </w:t></w:r><w:r><w:rPr><w:rStyle w:val="StringTok" /></w:rPr><w:t xml:space="preserve">&quot;San Juan&quot;</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">=</w:t></w:r><w:r><w:rPr><w:rStyle w:val="DecValTok" /></w:rPr><w:t xml:space="preserve">81</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">, </w:t></w:r><w:r><w:rPr><w:rStyle w:val="StringTok" /></w:rPr><w:t xml:space="preserve">&quot;Toronto&quot;</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">=</w:t></w:r><w:r><w:rPr><w:rStyle w:val="DecValTok" /></w:rPr><w:t xml:space="preserve">30</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">)</w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">cost</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="SourceCode" /></w:pPr><w:r><w:rPr><w:rStyle w:val="VerbatimChar" /></w:rPr><w:t xml:space="preserve">## [1]  50  75  90 100 150</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="SourceCode" /></w:pPr><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">temp</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="SourceCode" /></w:pPr><w:r><w:rPr><w:rStyle w:val="VerbatimChar" /></w:rPr><w:t xml:space="preserve">##        Beijing          Lagos          Paris Rio de Janeiro       San Juan </w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="VerbatimChar" /></w:rPr><w:t xml:space="preserve">##             35             88             42             84             81 </w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="VerbatimChar" /></w:rPr><w:t xml:space="preserve">##        Toronto </w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="VerbatimChar" /></w:rPr><w:t xml:space="preserve">##             30</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="SourceCode" /></w:pPr><w:r><w:rPr><w:rStyle w:val="KeywordTok" /></w:rPr><w:t xml:space="preserve">class</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">(temp)</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="SourceCode" /></w:pPr><w:r><w:rPr><w:rStyle w:val="VerbatimChar" /></w:rPr><w:t xml:space="preserve">## [1] &quot;numeric&quot;</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="Compact" /><w:numPr><w:numId w:val="1034" /><w:ilvl w:val="0" /></w:numPr></w:pPr><w:r><w:t xml:space="preserve">As in the previous question, we are going to create a vector. Only this time, we learn to create</w:t></w:r><w:r><w:t xml:space="preserve"> </w:t></w:r><w:r><w:rPr><w:i /></w:rPr><w:t xml:space="preserve">character</w:t></w:r><w:r><w:t xml:space="preserve"> </w:t></w:r><w:r><w:t xml:space="preserve">vectors. The main difference is that these have to be written as strings and so the names are enclosed within double quotes.</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="FirstParagraph" /></w:pPr><w:r><w:t xml:space="preserve">A</w:t></w:r><w:r><w:t xml:space="preserve"> </w:t></w:r><w:r><w:rPr><w:i /></w:rPr><w:t xml:space="preserve">character</w:t></w:r><w:r><w:t xml:space="preserve"> </w:t></w:r><w:r><w:t xml:space="preserve">vector would look something like this:</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="SourceCode" /></w:pPr><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">food &lt;-</w:t></w:r><w:r><w:rPr><w:rStyle w:val="StringTok" /></w:rPr><w:t xml:space="preserve"> </w:t></w:r><w:r><w:rPr><w:rStyle w:val="KeywordTok" /></w:rPr><w:t xml:space="preserve">c</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">(</w:t></w:r><w:r><w:rPr><w:rStyle w:val="StringTok" /></w:rPr><w:t xml:space="preserve">&quot;pizza&quot;</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">, </w:t></w:r><w:r><w:rPr><w:rStyle w:val="StringTok" /></w:rPr><w:t xml:space="preserve">&quot;burgers&quot;</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">, </w:t></w:r><w:r><w:rPr><w:rStyle w:val="StringTok" /></w:rPr><w:t xml:space="preserve">&quot;salads&quot;</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">, </w:t></w:r><w:r><w:rPr><w:rStyle w:val="StringTok" /></w:rPr><w:t xml:space="preserve">&quot;cheese&quot;</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">, </w:t></w:r><w:r><w:rPr><w:rStyle w:val="StringTok" /></w:rPr><w:t xml:space="preserve">&quot;pasta&quot;</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">)</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="SourceCode" /></w:pPr><w:r><w:rPr><w:rStyle w:val="CommentTok" /></w:rPr><w:t xml:space="preserve"># here is an example of how to create a character vector</w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">food &lt;-</w:t></w:r><w:r><w:rPr><w:rStyle w:val="StringTok" /></w:rPr><w:t xml:space="preserve"> </w:t></w:r><w:r><w:rPr><w:rStyle w:val="KeywordTok" /></w:rPr><w:t xml:space="preserve">c</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">(</w:t></w:r><w:r><w:rPr><w:rStyle w:val="StringTok" /></w:rPr><w:t xml:space="preserve">&quot;pizza&quot;</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">, </w:t></w:r><w:r><w:rPr><w:rStyle w:val="StringTok" /></w:rPr><w:t xml:space="preserve">&quot;burgers&quot;</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">, </w:t></w:r><w:r><w:rPr><w:rStyle w:val="StringTok" /></w:rPr><w:t xml:space="preserve">&quot;salads&quot;</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">, </w:t></w:r><w:r><w:rPr><w:rStyle w:val="StringTok" /></w:rPr><w:t xml:space="preserve">&quot;cheese&quot;</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">, </w:t></w:r><w:r><w:rPr><w:rStyle w:val="StringTok" /></w:rPr><w:t xml:space="preserve">&quot;pasta&quot;</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">)</w:t></w:r><w:r><w:br /></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="CommentTok" /></w:rPr><w:t xml:space="preserve"># Create a character vector called city to store the city names</w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="CommentTok" /></w:rPr><w:t xml:space="preserve"># Make sure to follow the same order as in the instructions</w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">city &lt;-</w:t></w:r><w:r><w:rPr><w:rStyle w:val="StringTok" /></w:rPr><w:t xml:space="preserve"> </w:t></w:r><w:r><w:rPr><w:rStyle w:val="KeywordTok" /></w:rPr><w:t xml:space="preserve">c</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">(</w:t></w:r><w:r><w:rPr><w:rStyle w:val="StringTok" /></w:rPr><w:t xml:space="preserve">&quot;Beijing&quot;</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">, </w:t></w:r><w:r><w:rPr><w:rStyle w:val="StringTok" /></w:rPr><w:t xml:space="preserve">&quot;Lagos&quot;</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">, </w:t></w:r><w:r><w:rPr><w:rStyle w:val="StringTok" /></w:rPr><w:t xml:space="preserve">&quot;Paris&quot;</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">, </w:t></w:r><w:r><w:rPr><w:rStyle w:val="StringTok" /></w:rPr><w:t xml:space="preserve">&quot;Rio de Janeiro&quot;</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">, </w:t></w:r><w:r><w:rPr><w:rStyle w:val="StringTok" /></w:rPr><w:t xml:space="preserve">&quot;San Juan&quot;</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">, </w:t></w:r><w:r><w:rPr><w:rStyle w:val="StringTok" /></w:rPr><w:t xml:space="preserve">&quot;Toronto&quot;</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">)</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="Compact" /><w:numPr><w:numId w:val="1035" /><w:ilvl w:val="0" /></w:numPr></w:pPr><w:r><w:t xml:space="preserve">We have successfully assigned the temperatures as</w:t></w:r><w:r><w:t xml:space="preserve"> </w:t></w:r><w:r><w:rPr><w:i /></w:rPr><w:t xml:space="preserve">numeric</w:t></w:r><w:r><w:t xml:space="preserve"> </w:t></w:r><w:r><w:t xml:space="preserve">values to</w:t></w:r><w:r><w:t xml:space="preserve"> </w:t></w:r><w:r><w:rPr><w:rStyle w:val="VerbatimChar" /></w:rPr><w:t xml:space="preserve">temp</w:t></w:r><w:r><w:t xml:space="preserve"> </w:t></w:r><w:r><w:t xml:space="preserve">and the</w:t></w:r><w:r><w:t xml:space="preserve"> </w:t></w:r><w:r><w:rPr><w:rStyle w:val="VerbatimChar" /></w:rPr><w:t xml:space="preserve">city</w:t></w:r><w:r><w:t xml:space="preserve"> </w:t></w:r><w:r><w:t xml:space="preserve">names as character values to city. But can we associate the temperature to its related city? Yes! We can do so using a code we already know -</w:t></w:r><w:r><w:t xml:space="preserve"> </w:t></w:r><w:r><w:rPr><w:rStyle w:val="VerbatimChar" /></w:rPr><w:t xml:space="preserve">names</w:t></w:r><w:r><w:t xml:space="preserve">. We assign names to the</w:t></w:r><w:r><w:t xml:space="preserve"> </w:t></w:r><w:r><w:rPr><w:i /></w:rPr><w:t xml:space="preserve">numeric</w:t></w:r><w:r><w:t xml:space="preserve"> </w:t></w:r><w:r><w:t xml:space="preserve">values.</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="FirstParagraph" /></w:pPr><w:r><w:t xml:space="preserve">It would look like this:</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="SourceCode" /></w:pPr><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">cost &lt;-</w:t></w:r><w:r><w:rPr><w:rStyle w:val="StringTok" /></w:rPr><w:t xml:space="preserve"> </w:t></w:r><w:r><w:rPr><w:rStyle w:val="KeywordTok" /></w:rPr><w:t xml:space="preserve">c</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">(</w:t></w:r><w:r><w:rPr><w:rStyle w:val="DecValTok" /></w:rPr><w:t xml:space="preserve">50</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">, </w:t></w:r><w:r><w:rPr><w:rStyle w:val="DecValTok" /></w:rPr><w:t xml:space="preserve">75</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">, </w:t></w:r><w:r><w:rPr><w:rStyle w:val="DecValTok" /></w:rPr><w:t xml:space="preserve">90</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">, </w:t></w:r><w:r><w:rPr><w:rStyle w:val="DecValTok" /></w:rPr><w:t xml:space="preserve">100</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">, </w:t></w:r><w:r><w:rPr><w:rStyle w:val="DecValTok" /></w:rPr><w:t xml:space="preserve">150</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">)</w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">food &lt;-</w:t></w:r><w:r><w:rPr><w:rStyle w:val="StringTok" /></w:rPr><w:t xml:space="preserve"> </w:t></w:r><w:r><w:rPr><w:rStyle w:val="KeywordTok" /></w:rPr><w:t xml:space="preserve">c</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">(</w:t></w:r><w:r><w:rPr><w:rStyle w:val="StringTok" /></w:rPr><w:t xml:space="preserve">&quot;pizza&quot;</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">, </w:t></w:r><w:r><w:rPr><w:rStyle w:val="StringTok" /></w:rPr><w:t xml:space="preserve">&quot;burgers&quot;</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">, </w:t></w:r><w:r><w:rPr><w:rStyle w:val="StringTok" /></w:rPr><w:t xml:space="preserve">&quot;salads&quot;</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">, </w:t></w:r><w:r><w:rPr><w:rStyle w:val="StringTok" /></w:rPr><w:t xml:space="preserve">&quot;cheese&quot;</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">, </w:t></w:r><w:r><w:rPr><w:rStyle w:val="StringTok" /></w:rPr><w:t xml:space="preserve">&quot;pasta&quot;</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">)</w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="KeywordTok" /></w:rPr><w:t xml:space="preserve">names</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">(cost) &lt;-</w:t></w:r><w:r><w:rPr><w:rStyle w:val="StringTok" /></w:rPr><w:t xml:space="preserve"> </w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">food</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="SourceCode" /></w:pPr><w:r><w:rPr><w:rStyle w:val="CommentTok" /></w:rPr><w:t xml:space="preserve"># Associate the cost values with its corresponding food item</w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">cost &lt;-</w:t></w:r><w:r><w:rPr><w:rStyle w:val="StringTok" /></w:rPr><w:t xml:space="preserve"> </w:t></w:r><w:r><w:rPr><w:rStyle w:val="KeywordTok" /></w:rPr><w:t xml:space="preserve">c</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">(</w:t></w:r><w:r><w:rPr><w:rStyle w:val="DecValTok" /></w:rPr><w:t xml:space="preserve">50</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">, </w:t></w:r><w:r><w:rPr><w:rStyle w:val="DecValTok" /></w:rPr><w:t xml:space="preserve">75</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">, </w:t></w:r><w:r><w:rPr><w:rStyle w:val="DecValTok" /></w:rPr><w:t xml:space="preserve">90</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">, </w:t></w:r><w:r><w:rPr><w:rStyle w:val="DecValTok" /></w:rPr><w:t xml:space="preserve">100</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">, </w:t></w:r><w:r><w:rPr><w:rStyle w:val="DecValTok" /></w:rPr><w:t xml:space="preserve">150</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">)</w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">food &lt;-</w:t></w:r><w:r><w:rPr><w:rStyle w:val="StringTok" /></w:rPr><w:t xml:space="preserve"> </w:t></w:r><w:r><w:rPr><w:rStyle w:val="KeywordTok" /></w:rPr><w:t xml:space="preserve">c</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">(</w:t></w:r><w:r><w:rPr><w:rStyle w:val="StringTok" /></w:rPr><w:t xml:space="preserve">&quot;pizza&quot;</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">, </w:t></w:r><w:r><w:rPr><w:rStyle w:val="StringTok" /></w:rPr><w:t xml:space="preserve">&quot;burgers&quot;</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">, </w:t></w:r><w:r><w:rPr><w:rStyle w:val="StringTok" /></w:rPr><w:t xml:space="preserve">&quot;salads&quot;</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">, </w:t></w:r><w:r><w:rPr><w:rStyle w:val="StringTok" /></w:rPr><w:t xml:space="preserve">&quot;cheese&quot;</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">, </w:t></w:r><w:r><w:rPr><w:rStyle w:val="StringTok" /></w:rPr><w:t xml:space="preserve">&quot;pasta&quot;</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">)</w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="KeywordTok" /></w:rPr><w:t xml:space="preserve">names</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">(cost) &lt;-</w:t></w:r><w:r><w:rPr><w:rStyle w:val="StringTok" /></w:rPr><w:t xml:space="preserve"> </w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">food</w:t></w:r><w:r><w:br /></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="CommentTok" /></w:rPr><w:t xml:space="preserve"># You already wrote this code</w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">temp &lt;-</w:t></w:r><w:r><w:rPr><w:rStyle w:val="StringTok" /></w:rPr><w:t xml:space="preserve"> </w:t></w:r><w:r><w:rPr><w:rStyle w:val="KeywordTok" /></w:rPr><w:t xml:space="preserve">c</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">(</w:t></w:r><w:r><w:rPr><w:rStyle w:val="DecValTok" /></w:rPr><w:t xml:space="preserve">35</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">, </w:t></w:r><w:r><w:rPr><w:rStyle w:val="DecValTok" /></w:rPr><w:t xml:space="preserve">88</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">, </w:t></w:r><w:r><w:rPr><w:rStyle w:val="DecValTok" /></w:rPr><w:t xml:space="preserve">42</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">, </w:t></w:r><w:r><w:rPr><w:rStyle w:val="DecValTok" /></w:rPr><w:t xml:space="preserve">84</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">, </w:t></w:r><w:r><w:rPr><w:rStyle w:val="DecValTok" /></w:rPr><w:t xml:space="preserve">81</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">, </w:t></w:r><w:r><w:rPr><w:rStyle w:val="DecValTok" /></w:rPr><w:t xml:space="preserve">30</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">)</w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">city &lt;-</w:t></w:r><w:r><w:rPr><w:rStyle w:val="StringTok" /></w:rPr><w:t xml:space="preserve"> </w:t></w:r><w:r><w:rPr><w:rStyle w:val="KeywordTok" /></w:rPr><w:t xml:space="preserve">c</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">(</w:t></w:r><w:r><w:rPr><w:rStyle w:val="StringTok" /></w:rPr><w:t xml:space="preserve">&quot;Beijing&quot;</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">, </w:t></w:r><w:r><w:rPr><w:rStyle w:val="StringTok" /></w:rPr><w:t xml:space="preserve">&quot;Lagos&quot;</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">, </w:t></w:r><w:r><w:rPr><w:rStyle w:val="StringTok" /></w:rPr><w:t xml:space="preserve">&quot;Paris&quot;</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">, </w:t></w:r><w:r><w:rPr><w:rStyle w:val="StringTok" /></w:rPr><w:t xml:space="preserve">&quot;Rio de Janeiro&quot;</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">, </w:t></w:r><w:r><w:rPr><w:rStyle w:val="StringTok" /></w:rPr><w:t xml:space="preserve">&quot;San Juan&quot;</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">, </w:t></w:r><w:r><w:rPr><w:rStyle w:val="StringTok" /></w:rPr><w:t xml:space="preserve">&quot;Toronto&quot;</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">)</w:t></w:r><w:r><w:br /></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="CommentTok" /></w:rPr><w:t xml:space="preserve"># Associate the temperature values with its corresponding city</w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="KeywordTok" /></w:rPr><w:t xml:space="preserve">names</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">(temp) &lt;-</w:t></w:r><w:r><w:rPr><w:rStyle w:val="StringTok" /></w:rPr><w:t xml:space="preserve"> </w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">city</w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">temp</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="SourceCode" /></w:pPr><w:r><w:rPr><w:rStyle w:val="VerbatimChar" /></w:rPr><w:t xml:space="preserve">##        Beijing          Lagos          Paris Rio de Janeiro       San Juan </w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="VerbatimChar" /></w:rPr><w:t xml:space="preserve">##             35             88             42             84             81 </w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="VerbatimChar" /></w:rPr><w:t xml:space="preserve">##        Toronto </w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="VerbatimChar" /></w:rPr><w:t xml:space="preserve">##             30</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="Compact" /><w:numPr><w:numId w:val="1036" /><w:ilvl w:val="0" /></w:numPr></w:pPr><w:r><w:t xml:space="preserve">If we want to display only selected values from the object, R can help us do that easily.</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="FirstParagraph" /></w:pPr><w:r><w:t xml:space="preserve">For example, if we want to see the cost of the last 3 items in our food list, we would type:</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="SourceCode" /></w:pPr><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">cost[</w:t></w:r><w:r><w:rPr><w:rStyle w:val="DecValTok" /></w:rPr><w:t xml:space="preserve">3</w:t></w:r><w:r><w:rPr><w:rStyle w:val="OperatorTok" /></w:rPr><w:t xml:space="preserve">:</w:t></w:r><w:r><w:rPr><w:rStyle w:val="DecValTok" /></w:rPr><w:t xml:space="preserve">5</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">]</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="FirstParagraph" /></w:pPr><w:r><w:t xml:space="preserve">Note here, that we could also type</w:t></w:r><w:r><w:t xml:space="preserve"> </w:t></w:r><w:r><w:rPr><w:rStyle w:val="VerbatimChar" /></w:rPr><w:t xml:space="preserve">cost[c(3,4,5)]</w:t></w:r><w:r><w:t xml:space="preserve"> </w:t></w:r><w:r><w:t xml:space="preserve">and get the same result. The</w:t></w:r><w:r><w:t xml:space="preserve"> </w:t></w:r><w:r><w:rPr><w:rStyle w:val="VerbatimChar" /></w:rPr><w:t xml:space="preserve">:</w:t></w:r><w:r><w:t xml:space="preserve"> </w:t></w:r><w:r><w:t xml:space="preserve">operator helps us condense the code and get consecutive values.</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="SourceCode" /></w:pPr><w:r><w:rPr><w:rStyle w:val="CommentTok" /></w:rPr><w:t xml:space="preserve"># cost of the last 3 items in our food list:</w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">cost[</w:t></w:r><w:r><w:rPr><w:rStyle w:val="DecValTok" /></w:rPr><w:t xml:space="preserve">3</w:t></w:r><w:r><w:rPr><w:rStyle w:val="OperatorTok" /></w:rPr><w:t xml:space="preserve">:</w:t></w:r><w:r><w:rPr><w:rStyle w:val="DecValTok" /></w:rPr><w:t xml:space="preserve">5</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">]</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="SourceCode" /></w:pPr><w:r><w:rPr><w:rStyle w:val="VerbatimChar" /></w:rPr><w:t xml:space="preserve">## salads cheese  pasta </w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="VerbatimChar" /></w:rPr><w:t xml:space="preserve">##     90    100    150</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="SourceCode" /></w:pPr><w:r><w:rPr><w:rStyle w:val="CommentTok" /></w:rPr><w:t xml:space="preserve"># temperatures of the first three cities in the list:</w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">temp[</w:t></w:r><w:r><w:rPr><w:rStyle w:val="DecValTok" /></w:rPr><w:t xml:space="preserve">1</w:t></w:r><w:r><w:rPr><w:rStyle w:val="OperatorTok" /></w:rPr><w:t xml:space="preserve">:</w:t></w:r><w:r><w:rPr><w:rStyle w:val="DecValTok" /></w:rPr><w:t xml:space="preserve">3</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">]</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="SourceCode" /></w:pPr><w:r><w:rPr><w:rStyle w:val="VerbatimChar" /></w:rPr><w:t xml:space="preserve">## Beijing   Lagos   Paris </w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="VerbatimChar" /></w:rPr><w:t xml:space="preserve">##      35      88      42</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="Compact" /><w:numPr><w:numId w:val="1037" /><w:ilvl w:val="0" /></w:numPr></w:pPr><w:r><w:t xml:space="preserve">In the previous question, we accessed the temperature for consecutive cities (1st three). But what if we want to access the temperatures for any 2 specific cities?</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="FirstParagraph" /></w:pPr><w:r><w:t xml:space="preserve">An example: To access the cost of</w:t></w:r><w:r><w:t xml:space="preserve"> </w:t></w:r><w:r><w:rPr><w:rStyle w:val="VerbatimChar" /></w:rPr><w:t xml:space="preserve">pizza</w:t></w:r><w:r><w:t xml:space="preserve"> </w:t></w:r><w:r><w:t xml:space="preserve">(1st) and</w:t></w:r><w:r><w:t xml:space="preserve"> </w:t></w:r><w:r><w:rPr><w:rStyle w:val="VerbatimChar" /></w:rPr><w:t xml:space="preserve">pasta</w:t></w:r><w:r><w:t xml:space="preserve"> </w:t></w:r><w:r><w:t xml:space="preserve">(5th food item) in our list, the code would be:</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="SourceCode" /></w:pPr><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">cost[</w:t></w:r><w:r><w:rPr><w:rStyle w:val="KeywordTok" /></w:rPr><w:t xml:space="preserve">c</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">(</w:t></w:r><w:r><w:rPr><w:rStyle w:val="DecValTok" /></w:rPr><w:t xml:space="preserve">1</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">,</w:t></w:r><w:r><w:rPr><w:rStyle w:val="DecValTok" /></w:rPr><w:t xml:space="preserve">5</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">)]</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="SourceCode" /></w:pPr><w:r><w:rPr><w:rStyle w:val="CommentTok" /></w:rPr><w:t xml:space="preserve"># Access the cost of pizza and pasta from our food list </w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">cost[</w:t></w:r><w:r><w:rPr><w:rStyle w:val="KeywordTok" /></w:rPr><w:t xml:space="preserve">c</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">(</w:t></w:r><w:r><w:rPr><w:rStyle w:val="DecValTok" /></w:rPr><w:t xml:space="preserve">1</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">,</w:t></w:r><w:r><w:rPr><w:rStyle w:val="DecValTok" /></w:rPr><w:t xml:space="preserve">5</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">)]</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="SourceCode" /></w:pPr><w:r><w:rPr><w:rStyle w:val="VerbatimChar" /></w:rPr><w:t xml:space="preserve">## pizza pasta </w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="VerbatimChar" /></w:rPr><w:t xml:space="preserve">##    50   150</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="SourceCode" /></w:pPr><w:r><w:rPr><w:rStyle w:val="CommentTok" /></w:rPr><w:t xml:space="preserve"># Define temp</w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">temp &lt;-</w:t></w:r><w:r><w:rPr><w:rStyle w:val="StringTok" /></w:rPr><w:t xml:space="preserve"> </w:t></w:r><w:r><w:rPr><w:rStyle w:val="KeywordTok" /></w:rPr><w:t xml:space="preserve">c</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">(</w:t></w:r><w:r><w:rPr><w:rStyle w:val="DecValTok" /></w:rPr><w:t xml:space="preserve">35</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">, </w:t></w:r><w:r><w:rPr><w:rStyle w:val="DecValTok" /></w:rPr><w:t xml:space="preserve">88</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">, </w:t></w:r><w:r><w:rPr><w:rStyle w:val="DecValTok" /></w:rPr><w:t xml:space="preserve">42</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">, </w:t></w:r><w:r><w:rPr><w:rStyle w:val="DecValTok" /></w:rPr><w:t xml:space="preserve">84</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">, </w:t></w:r><w:r><w:rPr><w:rStyle w:val="DecValTok" /></w:rPr><w:t xml:space="preserve">81</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">, </w:t></w:r><w:r><w:rPr><w:rStyle w:val="DecValTok" /></w:rPr><w:t xml:space="preserve">30</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">)</w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">city &lt;-</w:t></w:r><w:r><w:rPr><w:rStyle w:val="StringTok" /></w:rPr><w:t xml:space="preserve"> </w:t></w:r><w:r><w:rPr><w:rStyle w:val="KeywordTok" /></w:rPr><w:t xml:space="preserve">c</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">(</w:t></w:r><w:r><w:rPr><w:rStyle w:val="StringTok" /></w:rPr><w:t xml:space="preserve">&quot;Beijing&quot;</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">, </w:t></w:r><w:r><w:rPr><w:rStyle w:val="StringTok" /></w:rPr><w:t xml:space="preserve">&quot;Lagos&quot;</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">, </w:t></w:r><w:r><w:rPr><w:rStyle w:val="StringTok" /></w:rPr><w:t xml:space="preserve">&quot;Paris&quot;</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">, </w:t></w:r><w:r><w:rPr><w:rStyle w:val="StringTok" /></w:rPr><w:t xml:space="preserve">&quot;Rio de Janeiro&quot;</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">, </w:t></w:r><w:r><w:rPr><w:rStyle w:val="StringTok" /></w:rPr><w:t xml:space="preserve">&quot;San Juan&quot;</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">, </w:t></w:r><w:r><w:rPr><w:rStyle w:val="StringTok" /></w:rPr><w:t xml:space="preserve">&quot;Toronto&quot;</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">)</w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="KeywordTok" /></w:rPr><w:t xml:space="preserve">names</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">(temp) &lt;-</w:t></w:r><w:r><w:rPr><w:rStyle w:val="StringTok" /></w:rPr><w:t xml:space="preserve"> </w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">city</w:t></w:r><w:r><w:br /></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="CommentTok" /></w:rPr><w:t xml:space="preserve"># Access the temperatures of Paris and San Juan</w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">temp[</w:t></w:r><w:r><w:rPr><w:rStyle w:val="KeywordTok" /></w:rPr><w:t xml:space="preserve">c</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">(</w:t></w:r><w:r><w:rPr><w:rStyle w:val="DecValTok" /></w:rPr><w:t xml:space="preserve">3</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">,</w:t></w:r><w:r><w:rPr><w:rStyle w:val="DecValTok" /></w:rPr><w:t xml:space="preserve">5</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">)]</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="SourceCode" /></w:pPr><w:r><w:rPr><w:rStyle w:val="VerbatimChar" /></w:rPr><w:t xml:space="preserve">##    Paris San Juan </w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="VerbatimChar" /></w:rPr><w:t xml:space="preserve">##       42       81</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="Compact" /><w:numPr><w:numId w:val="1038" /><w:ilvl w:val="0" /></w:numPr></w:pPr><w:r><w:t xml:space="preserve">The</w:t></w:r><w:r><w:t xml:space="preserve"> </w:t></w:r><w:r><w:rPr><w:rStyle w:val="VerbatimChar" /></w:rPr><w:t xml:space="preserve">:</w:t></w:r><w:r><w:t xml:space="preserve"> </w:t></w:r><w:r><w:t xml:space="preserve">operator helps us create sequences of numbers. For example,</w:t></w:r><w:r><w:t xml:space="preserve"> </w:t></w:r><w:r><w:rPr><w:rStyle w:val="VerbatimChar" /></w:rPr><w:t xml:space="preserve">32:99</w:t></w:r><w:r><w:t xml:space="preserve"> </w:t></w:r><w:r><w:t xml:space="preserve">would create a list of numbers from 32 to 99.</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="FirstParagraph" /></w:pPr><w:r><w:t xml:space="preserve">Then, if we want to know the length of this sequence, all we need to do is use the</w:t></w:r><w:r><w:t xml:space="preserve"> </w:t></w:r><w:r><w:rPr><w:rStyle w:val="VerbatimChar" /></w:rPr><w:t xml:space="preserve">length</w:t></w:r><w:r><w:t xml:space="preserve"> </w:t></w:r><w:r><w:t xml:space="preserve">command.</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="SourceCode" /></w:pPr><w:r><w:rPr><w:rStyle w:val="CommentTok" /></w:rPr><w:t xml:space="preserve"># Create a vector m of integers that starts at 32 and ends at 99.</w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">m &lt;-</w:t></w:r><w:r><w:rPr><w:rStyle w:val="StringTok" /></w:rPr><w:t xml:space="preserve"> </w:t></w:r><w:r><w:rPr><w:rStyle w:val="DecValTok" /></w:rPr><w:t xml:space="preserve">32</w:t></w:r><w:r><w:rPr><w:rStyle w:val="OperatorTok" /></w:rPr><w:t xml:space="preserve">:</w:t></w:r><w:r><w:rPr><w:rStyle w:val="DecValTok" /></w:rPr><w:t xml:space="preserve">99</w:t></w:r><w:r><w:br /></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="CommentTok" /></w:rPr><w:t xml:space="preserve"># Determine the length of object m.</w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="KeywordTok" /></w:rPr><w:t xml:space="preserve">length</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">(m)</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="SourceCode" /></w:pPr><w:r><w:rPr><w:rStyle w:val="VerbatimChar" /></w:rPr><w:t xml:space="preserve">## [1] 68</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="SourceCode" /></w:pPr><w:r><w:rPr><w:rStyle w:val="CommentTok" /></w:rPr><w:t xml:space="preserve"># Create a vector x of integers that starts at 12 and ends at 73.</w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">x &lt;-</w:t></w:r><w:r><w:rPr><w:rStyle w:val="StringTok" /></w:rPr><w:t xml:space="preserve"> </w:t></w:r><w:r><w:rPr><w:rStyle w:val="DecValTok" /></w:rPr><w:t xml:space="preserve">12</w:t></w:r><w:r><w:rPr><w:rStyle w:val="OperatorTok" /></w:rPr><w:t xml:space="preserve">:</w:t></w:r><w:r><w:rPr><w:rStyle w:val="DecValTok" /></w:rPr><w:t xml:space="preserve">73</w:t></w:r><w:r><w:br /></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="CommentTok" /></w:rPr><w:t xml:space="preserve"># Determine the length of object x.</w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="KeywordTok" /></w:rPr><w:t xml:space="preserve">length</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">(x)</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="SourceCode" /></w:pPr><w:r><w:rPr><w:rStyle w:val="VerbatimChar" /></w:rPr><w:t xml:space="preserve">## [1] 62</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="Compact" /><w:numPr><w:numId w:val="1039" /><w:ilvl w:val="0" /></w:numPr></w:pPr><w:r><w:t xml:space="preserve">We can also create different types of sequences in R. For example, in</w:t></w:r><w:r><w:t xml:space="preserve"> </w:t></w:r><w:r><w:rPr><w:rStyle w:val="VerbatimChar" /></w:rPr><w:t xml:space="preserve">seq(7, 49, 7)</w:t></w:r><w:r><w:t xml:space="preserve">, the first argument defines the start, and the second the end. The default is to go up in increments of 1, but a third argument lets us tell it by what interval.</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="SourceCode" /></w:pPr><w:r><w:rPr><w:rStyle w:val="CommentTok" /></w:rPr><w:t xml:space="preserve"># Create a vector with the multiples of 7, smaller than 50.</w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="KeywordTok" /></w:rPr><w:t xml:space="preserve">seq</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">(</w:t></w:r><w:r><w:rPr><w:rStyle w:val="DecValTok" /></w:rPr><w:t xml:space="preserve">7</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">, </w:t></w:r><w:r><w:rPr><w:rStyle w:val="DecValTok" /></w:rPr><w:t xml:space="preserve">49</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">, </w:t></w:r><w:r><w:rPr><w:rStyle w:val="DecValTok" /></w:rPr><w:t xml:space="preserve">7</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">) </w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="SourceCode" /></w:pPr><w:r><w:rPr><w:rStyle w:val="VerbatimChar" /></w:rPr><w:t xml:space="preserve">## [1]  7 14 21 28 35 42 49</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="SourceCode" /></w:pPr><w:r><w:rPr><w:rStyle w:val="CommentTok" /></w:rPr><w:t xml:space="preserve"># Create a vector containing all the positive odd numbers smaller than 100.</w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="CommentTok" /></w:rPr><w:t xml:space="preserve"># The numbers should be in ascending order</w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="KeywordTok" /></w:rPr><w:t xml:space="preserve">seq</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">(</w:t></w:r><w:r><w:rPr><w:rStyle w:val="DecValTok" /></w:rPr><w:t xml:space="preserve">1</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">,</w:t></w:r><w:r><w:rPr><w:rStyle w:val="DecValTok" /></w:rPr><w:t xml:space="preserve">99</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">,</w:t></w:r><w:r><w:rPr><w:rStyle w:val="DecValTok" /></w:rPr><w:t xml:space="preserve">2</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">)</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="SourceCode" /></w:pPr><w:r><w:rPr><w:rStyle w:val="VerbatimChar" /></w:rPr><w:t xml:space="preserve">##  [1]  1  3  5  7  9 11 13 15 17 19 21 23 25 27 29 31 33 35 37 39 41 43 45 47 49</w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="VerbatimChar" /></w:rPr><w:t xml:space="preserve">## [26] 51 53 55 57 59 61 63 65 67 69 71 73 75 77 79 81 83 85 87 89 91 93 95 97 99</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="Compact" /><w:numPr><w:numId w:val="1040" /><w:ilvl w:val="0" /></w:numPr></w:pPr><w:r><w:t xml:space="preserve">The second argument of the function</w:t></w:r><w:r><w:t xml:space="preserve"> </w:t></w:r><w:r><w:rPr><w:rStyle w:val="VerbatimChar" /></w:rPr><w:t xml:space="preserve">seq</w:t></w:r><w:r><w:t xml:space="preserve"> </w:t></w:r><w:r><w:t xml:space="preserve">is actually a maximum, not necessarily the end.</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="FirstParagraph" /></w:pPr><w:r><w:t xml:space="preserve">So if we type</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="SourceCode" /></w:pPr><w:r><w:rPr><w:rStyle w:val="KeywordTok" /></w:rPr><w:t xml:space="preserve">seq</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">(</w:t></w:r><w:r><w:rPr><w:rStyle w:val="DecValTok" /></w:rPr><w:t xml:space="preserve">7</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">, </w:t></w:r><w:r><w:rPr><w:rStyle w:val="DecValTok" /></w:rPr><w:t xml:space="preserve">50</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">, </w:t></w:r><w:r><w:rPr><w:rStyle w:val="DecValTok" /></w:rPr><w:t xml:space="preserve">7</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">)</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="FirstParagraph" /></w:pPr><w:r><w:t xml:space="preserve">we actually get the same vector of integers as if we type</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="SourceCode" /></w:pPr><w:r><w:rPr><w:rStyle w:val="KeywordTok" /></w:rPr><w:t xml:space="preserve">seq</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">(</w:t></w:r><w:r><w:rPr><w:rStyle w:val="DecValTok" /></w:rPr><w:t xml:space="preserve">7</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">, </w:t></w:r><w:r><w:rPr><w:rStyle w:val="DecValTok" /></w:rPr><w:t xml:space="preserve">49</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">, </w:t></w:r><w:r><w:rPr><w:rStyle w:val="DecValTok" /></w:rPr><w:t xml:space="preserve">7</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">)</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="FirstParagraph" /></w:pPr><w:r><w:t xml:space="preserve">This can be useful because sometimes all we want are sequential numbers that are smaller than some value. Let’s look at an example.</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="SourceCode" /></w:pPr><w:r><w:rPr><w:rStyle w:val="CommentTok" /></w:rPr><w:t xml:space="preserve"># We can create a vector with the multiples of 7, smaller than 50 like this </w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="KeywordTok" /></w:rPr><w:t xml:space="preserve">seq</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">(</w:t></w:r><w:r><w:rPr><w:rStyle w:val="DecValTok" /></w:rPr><w:t xml:space="preserve">7</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">, </w:t></w:r><w:r><w:rPr><w:rStyle w:val="DecValTok" /></w:rPr><w:t xml:space="preserve">49</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">, </w:t></w:r><w:r><w:rPr><w:rStyle w:val="DecValTok" /></w:rPr><w:t xml:space="preserve">7</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">) </w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="SourceCode" /></w:pPr><w:r><w:rPr><w:rStyle w:val="VerbatimChar" /></w:rPr><w:t xml:space="preserve">## [1]  7 14 21 28 35 42 49</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="SourceCode" /></w:pPr><w:r><w:rPr><w:rStyle w:val="CommentTok" /></w:rPr><w:t xml:space="preserve"># But note that the second argument does not need to be the last number</w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="CommentTok" /></w:rPr><w:t xml:space="preserve"># It simply determines the maximum value permitted</w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="CommentTok" /></w:rPr><w:t xml:space="preserve"># so the following line of code produces the same vector as seq(7, 49, 7)</w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="KeywordTok" /></w:rPr><w:t xml:space="preserve">seq</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">(</w:t></w:r><w:r><w:rPr><w:rStyle w:val="DecValTok" /></w:rPr><w:t xml:space="preserve">7</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">, </w:t></w:r><w:r><w:rPr><w:rStyle w:val="DecValTok" /></w:rPr><w:t xml:space="preserve">50</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">, </w:t></w:r><w:r><w:rPr><w:rStyle w:val="DecValTok" /></w:rPr><w:t xml:space="preserve">7</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">)</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="SourceCode" /></w:pPr><w:r><w:rPr><w:rStyle w:val="VerbatimChar" /></w:rPr><w:t xml:space="preserve">## [1]  7 14 21 28 35 42 49</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="SourceCode" /></w:pPr><w:r><w:rPr><w:rStyle w:val="CommentTok" /></w:rPr><w:t xml:space="preserve"># Create a sequence of numbers from 6 to 55, with 4/7 increments and determine its length</w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="KeywordTok" /></w:rPr><w:t xml:space="preserve">length</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">(</w:t></w:r><w:r><w:rPr><w:rStyle w:val="KeywordTok" /></w:rPr><w:t xml:space="preserve">seq</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">(</w:t></w:r><w:r><w:rPr><w:rStyle w:val="DecValTok" /></w:rPr><w:t xml:space="preserve">6</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">,</w:t></w:r><w:r><w:rPr><w:rStyle w:val="DecValTok" /></w:rPr><w:t xml:space="preserve">55</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">,</w:t></w:r><w:r><w:rPr><w:rStyle w:val="DecValTok" /></w:rPr><w:t xml:space="preserve">4</w:t></w:r><w:r><w:rPr><w:rStyle w:val="OperatorTok" /></w:rPr><w:t xml:space="preserve">/</w:t></w:r><w:r><w:rPr><w:rStyle w:val="DecValTok" /></w:rPr><w:t xml:space="preserve">7</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">))</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="SourceCode" /></w:pPr><w:r><w:rPr><w:rStyle w:val="VerbatimChar" /></w:rPr><w:t xml:space="preserve">## [1] 86</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="Compact" /><w:numPr><w:numId w:val="1041" /><w:ilvl w:val="0" /></w:numPr></w:pPr><w:r><w:t xml:space="preserve">The</w:t></w:r><w:r><w:t xml:space="preserve"> </w:t></w:r><w:r><w:rPr><w:rStyle w:val="VerbatimChar" /></w:rPr><w:t xml:space="preserve">seq()</w:t></w:r><w:r><w:t xml:space="preserve"> </w:t></w:r><w:r><w:t xml:space="preserve">function has another useful argument. The argument</w:t></w:r><w:r><w:t xml:space="preserve"> </w:t></w:r><w:r><w:rPr><w:i /></w:rPr><w:t xml:space="preserve">length.out</w:t></w:r><w:r><w:t xml:space="preserve">. This argument lets us generate sequences that are increasing by the same amount but are of the prespecified length.</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="FirstParagraph" /></w:pPr><w:r><w:t xml:space="preserve">For example, this line of code</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="SourceCode" /></w:pPr><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">x &lt;-</w:t></w:r><w:r><w:rPr><w:rStyle w:val="StringTok" /></w:rPr><w:t xml:space="preserve"> </w:t></w:r><w:r><w:rPr><w:rStyle w:val="KeywordTok" /></w:rPr><w:t xml:space="preserve">seq</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">(</w:t></w:r><w:r><w:rPr><w:rStyle w:val="DecValTok" /></w:rPr><w:t xml:space="preserve">0</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">, </w:t></w:r><w:r><w:rPr><w:rStyle w:val="DecValTok" /></w:rPr><w:t xml:space="preserve">100</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">, </w:t></w:r><w:r><w:rPr><w:rStyle w:val="DataTypeTok" /></w:rPr><w:t xml:space="preserve">length.out =</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve"> </w:t></w:r><w:r><w:rPr><w:rStyle w:val="DecValTok" /></w:rPr><w:t xml:space="preserve">5</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">)</w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">produces the numbers </w:t></w:r><w:r><w:rPr><w:rStyle w:val="DecValTok" /></w:rPr><w:t xml:space="preserve">0</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">, </w:t></w:r><w:r><w:rPr><w:rStyle w:val="DecValTok" /></w:rPr><w:t xml:space="preserve">25</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">, </w:t></w:r><w:r><w:rPr><w:rStyle w:val="DecValTok" /></w:rPr><w:t xml:space="preserve">50</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">, </w:t></w:r><w:r><w:rPr><w:rStyle w:val="DecValTok" /></w:rPr><w:t xml:space="preserve">75</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">, </w:t></w:r><w:r><w:rPr><w:rStyle w:val="FloatTok" /></w:rPr><w:t xml:space="preserve">100.</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="FirstParagraph" /></w:pPr><w:r><w:t xml:space="preserve">Let’s create a vector and see what is the class of the object produced.</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="SourceCode" /></w:pPr><w:r><w:rPr><w:rStyle w:val="CommentTok" /></w:rPr><w:t xml:space="preserve"># Store the sequence in the object a</w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">a &lt;-</w:t></w:r><w:r><w:rPr><w:rStyle w:val="StringTok" /></w:rPr><w:t xml:space="preserve"> </w:t></w:r><w:r><w:rPr><w:rStyle w:val="KeywordTok" /></w:rPr><w:t xml:space="preserve">seq</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">(</w:t></w:r><w:r><w:rPr><w:rStyle w:val="DecValTok" /></w:rPr><w:t xml:space="preserve">1</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">, </w:t></w:r><w:r><w:rPr><w:rStyle w:val="DecValTok" /></w:rPr><w:t xml:space="preserve">10</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">, </w:t></w:r><w:r><w:rPr><w:rStyle w:val="DataTypeTok" /></w:rPr><w:t xml:space="preserve">length.out =</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve"> </w:t></w:r><w:r><w:rPr><w:rStyle w:val="DecValTok" /></w:rPr><w:t xml:space="preserve">100</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">)</w:t></w:r><w:r><w:br /></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="CommentTok" /></w:rPr><w:t xml:space="preserve"># Determine the class of a</w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="KeywordTok" /></w:rPr><w:t xml:space="preserve">class</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">(a)</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="SourceCode" /></w:pPr><w:r><w:rPr><w:rStyle w:val="VerbatimChar" /></w:rPr><w:t xml:space="preserve">## [1] &quot;numeric&quot;</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="Compact" /><w:numPr><w:numId w:val="1042" /><w:ilvl w:val="0" /></w:numPr></w:pPr><w:r><w:t xml:space="preserve">We have discussed the numeric class. We just saw that the</w:t></w:r><w:r><w:t xml:space="preserve"> </w:t></w:r><w:r><w:rPr><w:rStyle w:val="VerbatimChar" /></w:rPr><w:t xml:space="preserve">seq</w:t></w:r><w:r><w:t xml:space="preserve"> </w:t></w:r><w:r><w:t xml:space="preserve">function can generate objects of this class.</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="FirstParagraph" /></w:pPr><w:r><w:t xml:space="preserve">For another example, type</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="SourceCode" /></w:pPr><w:r><w:rPr><w:rStyle w:val="KeywordTok" /></w:rPr><w:t xml:space="preserve">class</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">(</w:t></w:r><w:r><w:rPr><w:rStyle w:val="KeywordTok" /></w:rPr><w:t xml:space="preserve">seq</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">(</w:t></w:r><w:r><w:rPr><w:rStyle w:val="DecValTok" /></w:rPr><w:t xml:space="preserve">1</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">, </w:t></w:r><w:r><w:rPr><w:rStyle w:val="DecValTok" /></w:rPr><w:t xml:space="preserve">10</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">, </w:t></w:r><w:r><w:rPr><w:rStyle w:val="FloatTok" /></w:rPr><w:t xml:space="preserve">0.5</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">))</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="FirstParagraph" /></w:pPr><w:r><w:t xml:space="preserve">into the console and note that the</w:t></w:r><w:r><w:t xml:space="preserve"> </w:t></w:r><w:r><w:rPr><w:rStyle w:val="VerbatimChar" /></w:rPr><w:t xml:space="preserve">class</w:t></w:r><w:r><w:t xml:space="preserve"> </w:t></w:r><w:r><w:t xml:space="preserve">is</w:t></w:r><w:r><w:t xml:space="preserve"> </w:t></w:r><w:r><w:rPr><w:i /></w:rPr><w:t xml:space="preserve">numeric</w:t></w:r><w:r><w:t xml:space="preserve">. R has another type of vector we have not described, the</w:t></w:r><w:r><w:t xml:space="preserve"> </w:t></w:r><w:r><w:rPr><w:i /></w:rPr><w:t xml:space="preserve">integer</w:t></w:r><w:r><w:t xml:space="preserve"> </w:t></w:r><w:r><w:t xml:space="preserve">class. You can create an</w:t></w:r><w:r><w:t xml:space="preserve"> </w:t></w:r><w:r><w:rPr><w:i /></w:rPr><w:t xml:space="preserve">integer</w:t></w:r><w:r><w:t xml:space="preserve"> </w:t></w:r><w:r><w:t xml:space="preserve">by adding the letter</w:t></w:r><w:r><w:t xml:space="preserve"> </w:t></w:r><w:r><w:rPr><w:rStyle w:val="VerbatimChar" /></w:rPr><w:t xml:space="preserve">L</w:t></w:r><w:r><w:t xml:space="preserve"> </w:t></w:r><w:r><w:t xml:space="preserve">after a whole number. If you type</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="SourceCode" /></w:pPr><w:r><w:rPr><w:rStyle w:val="KeywordTok" /></w:rPr><w:t xml:space="preserve">class</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">(3L)</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="FirstParagraph" /></w:pPr><w:r><w:t xml:space="preserve">in the console, you see this is an</w:t></w:r><w:r><w:t xml:space="preserve"> </w:t></w:r><w:r><w:rPr><w:i /></w:rPr><w:t xml:space="preserve">integer</w:t></w:r><w:r><w:t xml:space="preserve"> </w:t></w:r><w:r><w:t xml:space="preserve">and not a</w:t></w:r><w:r><w:t xml:space="preserve"> </w:t></w:r><w:r><w:rPr><w:i /></w:rPr><w:t xml:space="preserve">numeric</w:t></w:r><w:r><w:t xml:space="preserve">. For most practical purposes, integers and numerics are indistinguishable. For example 3, the integer, minus 3 the numeric is 0. To see this type this in the console</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="SourceCode" /></w:pPr><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">3L </w:t></w:r><w:r><w:rPr><w:rStyle w:val="OperatorTok" /></w:rPr><w:t xml:space="preserve">-</w:t></w:r><w:r><w:rPr><w:rStyle w:val="StringTok" /></w:rPr><w:t xml:space="preserve"> </w:t></w:r><w:r><w:rPr><w:rStyle w:val="DecValTok" /></w:rPr><w:t xml:space="preserve">3</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="FirstParagraph" /></w:pPr><w:r><w:t xml:space="preserve">The main difference is that integers occupy less space in the computer memory, so for big computations using integers can have a substantial impact.</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="SourceCode" /></w:pPr><w:r><w:rPr><w:rStyle w:val="CommentTok" /></w:rPr><w:t xml:space="preserve"># Store the sequence in the object a</w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">a &lt;-</w:t></w:r><w:r><w:rPr><w:rStyle w:val="StringTok" /></w:rPr><w:t xml:space="preserve"> </w:t></w:r><w:r><w:rPr><w:rStyle w:val="KeywordTok" /></w:rPr><w:t xml:space="preserve">seq</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">(</w:t></w:r><w:r><w:rPr><w:rStyle w:val="DecValTok" /></w:rPr><w:t xml:space="preserve">1</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">,</w:t></w:r><w:r><w:rPr><w:rStyle w:val="DecValTok" /></w:rPr><w:t xml:space="preserve">10</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">)</w:t></w:r><w:r><w:br /></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="CommentTok" /></w:rPr><w:t xml:space="preserve"># Determine the class of a</w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="KeywordTok" /></w:rPr><w:t xml:space="preserve">class</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">(a)</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="SourceCode" /></w:pPr><w:r><w:rPr><w:rStyle w:val="VerbatimChar" /></w:rPr><w:t xml:space="preserve">## [1] &quot;integer&quot;</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="Compact" /><w:numPr><w:numId w:val="1043" /><w:ilvl w:val="0" /></w:numPr></w:pPr><w:r><w:t xml:space="preserve">Let’s confirm that</w:t></w:r><w:r><w:t xml:space="preserve"> </w:t></w:r><w:r><w:rPr><w:rStyle w:val="VerbatimChar" /></w:rPr><w:t xml:space="preserve">1L</w:t></w:r><w:r><w:t xml:space="preserve"> </w:t></w:r><w:r><w:t xml:space="preserve">is an</w:t></w:r><w:r><w:t xml:space="preserve"> </w:t></w:r><w:r><w:rPr><w:i /></w:rPr><w:t xml:space="preserve">integer</w:t></w:r><w:r><w:t xml:space="preserve"> </w:t></w:r><w:r><w:t xml:space="preserve">not a</w:t></w:r><w:r><w:t xml:space="preserve"> </w:t></w:r><w:r><w:rPr><w:i /></w:rPr><w:t xml:space="preserve">numeric</w:t></w:r><w:r><w:t xml:space="preserve">.</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="SourceCode" /></w:pPr><w:r><w:rPr><w:rStyle w:val="CommentTok" /></w:rPr><w:t xml:space="preserve"># Check the class of 1, assigned to the object a</w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="KeywordTok" /></w:rPr><w:t xml:space="preserve">class</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">(</w:t></w:r><w:r><w:rPr><w:rStyle w:val="DecValTok" /></w:rPr><w:t xml:space="preserve">1</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">)</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="SourceCode" /></w:pPr><w:r><w:rPr><w:rStyle w:val="VerbatimChar" /></w:rPr><w:t xml:space="preserve">## [1] &quot;numeric&quot;</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="SourceCode" /></w:pPr><w:r><w:rPr><w:rStyle w:val="CommentTok" /></w:rPr><w:t xml:space="preserve"># Confirm the class of 1L is integer</w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="KeywordTok" /></w:rPr><w:t xml:space="preserve">class</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">(1L)</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="SourceCode" /></w:pPr><w:r><w:rPr><w:rStyle w:val="VerbatimChar" /></w:rPr><w:t xml:space="preserve">## [1] &quot;integer&quot;</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="Compact" /><w:numPr><w:numId w:val="1044" /><w:ilvl w:val="0" /></w:numPr></w:pPr><w:r><w:t xml:space="preserve">The concept of coercion is a very important one. Watching the video, we learned that when an entry does not match what an R function is expecting, R tries to guess what we meant before throwing an error. This might get confusing at times.</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="FirstParagraph" /></w:pPr><w:r><w:t xml:space="preserve">As we’ve discussed in earlier questions, there are numeric and character vectors. The character vectors are placed in quotes and the numerics are not.</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="BodyText" /></w:pPr><w:r><w:t xml:space="preserve">We can avoid issues with coercion in R by changing characters to numerics and vice-versa. This is known as typecasting. The code,</w:t></w:r><w:r><w:t xml:space="preserve"> </w:t></w:r><w:r><w:rPr><w:rStyle w:val="VerbatimChar" /></w:rPr><w:t xml:space="preserve">as.numeric(x)</w:t></w:r><w:r><w:t xml:space="preserve"> </w:t></w:r><w:r><w:t xml:space="preserve">helps us convert character strings to numbers. There is an equivalent function that converts its argument to a string,</w:t></w:r><w:r><w:t xml:space="preserve"> </w:t></w:r><w:r><w:rPr><w:rStyle w:val="VerbatimChar" /></w:rPr><w:t xml:space="preserve">as.character(x)</w:t></w:r><w:r><w:t xml:space="preserve">.</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="BodyText" /></w:pPr><w:r><w:t xml:space="preserve">Let’s practice doing this!</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="SourceCode" /></w:pPr><w:r><w:rPr><w:rStyle w:val="CommentTok" /></w:rPr><w:t xml:space="preserve"># Define the vector x</w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">x &lt;-</w:t></w:r><w:r><w:rPr><w:rStyle w:val="StringTok" /></w:rPr><w:t xml:space="preserve"> </w:t></w:r><w:r><w:rPr><w:rStyle w:val="KeywordTok" /></w:rPr><w:t xml:space="preserve">c</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">(</w:t></w:r><w:r><w:rPr><w:rStyle w:val="DecValTok" /></w:rPr><w:t xml:space="preserve">1</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">, </w:t></w:r><w:r><w:rPr><w:rStyle w:val="DecValTok" /></w:rPr><w:t xml:space="preserve">3</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">, </w:t></w:r><w:r><w:rPr><w:rStyle w:val="DecValTok" /></w:rPr><w:t xml:space="preserve">5</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">,</w:t></w:r><w:r><w:rPr><w:rStyle w:val="StringTok" /></w:rPr><w:t xml:space="preserve">&quot;a&quot;</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">)</w:t></w:r><w:r><w:br /></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="CommentTok" /></w:rPr><w:t xml:space="preserve"># Note that the x is character vector</w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">x</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="SourceCode" /></w:pPr><w:r><w:rPr><w:rStyle w:val="VerbatimChar" /></w:rPr><w:t xml:space="preserve">## [1] &quot;1&quot; &quot;3&quot; &quot;5&quot; &quot;a&quot;</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="SourceCode" /></w:pPr><w:r><w:rPr><w:rStyle w:val="CommentTok" /></w:rPr><w:t xml:space="preserve"># Typecast the vector to get an integer vector</w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="CommentTok" /></w:rPr><w:t xml:space="preserve"># You will get a warning but that is ok</w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">x &lt;-</w:t></w:r><w:r><w:rPr><w:rStyle w:val="StringTok" /></w:rPr><w:t xml:space="preserve"> </w:t></w:r><w:r><w:rPr><w:rStyle w:val="KeywordTok" /></w:rPr><w:t xml:space="preserve">as.numeric</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">(x)</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="SourceCode" /></w:pPr><w:r><w:rPr><w:rStyle w:val="VerbatimChar" /></w:rPr><w:t xml:space="preserve">## Warning: NAs introduced by coercion</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="SourceCode" /></w:pPr><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">x</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="SourceCode" /></w:pPr><w:r><w:rPr><w:rStyle w:val="VerbatimChar" /></w:rPr><w:t xml:space="preserve">## [1]  1  3  5 NA</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="Heading2" /></w:pPr><w:bookmarkStart w:id="57" w:name="sorting" /><w:r><w:t xml:space="preserve">Sorting</w:t></w:r><w:bookmarkEnd w:id="57" /></w:p><w:p><w:pPr><w:pStyle w:val="FirstParagraph" /></w:pPr><w:r><w:t xml:space="preserve">The textbook for this section is available</w:t></w:r><w:r><w:t xml:space="preserve"> </w:t></w:r><w:hyperlink r:id="rId58"><w:r><w:rPr><w:rStyle w:val="Hyperlink" /></w:rPr><w:t xml:space="preserve">here</w:t></w:r></w:hyperlink></w:p><w:p><w:pPr><w:pStyle w:val="BodyText" /></w:pPr><w:r><w:rPr><w:b /></w:rPr><w:t xml:space="preserve">Key Points</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="Compact" /><w:numPr><w:numId w:val="1045" /><w:ilvl w:val="0" /></w:numPr></w:pPr><w:r><w:t xml:space="preserve">The function</w:t></w:r><w:r><w:t xml:space="preserve"> </w:t></w:r><w:r><w:rPr><w:rStyle w:val="VerbatimChar" /></w:rPr><w:t xml:space="preserve">sort()</w:t></w:r><w:r><w:t xml:space="preserve"> </w:t></w:r><w:r><w:t xml:space="preserve">sorts a vector in increasing order.</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="Compact" /><w:numPr><w:numId w:val="1045" /><w:ilvl w:val="0" /></w:numPr></w:pPr><w:r><w:t xml:space="preserve">The function</w:t></w:r><w:r><w:t xml:space="preserve"> </w:t></w:r><w:r><w:rPr><w:rStyle w:val="VerbatimChar" /></w:rPr><w:t xml:space="preserve">order()</w:t></w:r><w:r><w:t xml:space="preserve"> </w:t></w:r><w:r><w:t xml:space="preserve">produces the indices needed to obtain the sorted vector, e.g. a result of 2 3 1 5 4 means the sorted vector will be produced by listing the 2nd, 3rd, 1st, 5th, and then 4th item of the original vector.</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="Compact" /><w:numPr><w:numId w:val="1045" /><w:ilvl w:val="0" /></w:numPr></w:pPr><w:r><w:t xml:space="preserve">The function</w:t></w:r><w:r><w:t xml:space="preserve"> </w:t></w:r><w:r><w:rPr><w:rStyle w:val="VerbatimChar" /></w:rPr><w:t xml:space="preserve">rank()</w:t></w:r><w:r><w:t xml:space="preserve"> </w:t></w:r><w:r><w:t xml:space="preserve">gives us the ranks of the items in the original vector.</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="Compact" /><w:numPr><w:numId w:val="1045" /><w:ilvl w:val="0" /></w:numPr></w:pPr><w:r><w:t xml:space="preserve">The function</w:t></w:r><w:r><w:t xml:space="preserve"> </w:t></w:r><w:r><w:rPr><w:rStyle w:val="VerbatimChar" /></w:rPr><w:t xml:space="preserve">max()</w:t></w:r><w:r><w:t xml:space="preserve"> </w:t></w:r><w:r><w:t xml:space="preserve">returns the largest value while</w:t></w:r><w:r><w:t xml:space="preserve"> </w:t></w:r><w:r><w:rPr><w:rStyle w:val="VerbatimChar" /></w:rPr><w:t xml:space="preserve">which.max()</w:t></w:r><w:r><w:t xml:space="preserve"> </w:t></w:r><w:r><w:t xml:space="preserve">returns the index of the largest value. The functions</w:t></w:r><w:r><w:t xml:space="preserve"> </w:t></w:r><w:r><w:rPr><w:rStyle w:val="VerbatimChar" /></w:rPr><w:t xml:space="preserve">min()</w:t></w:r><w:r><w:t xml:space="preserve"> </w:t></w:r><w:r><w:t xml:space="preserve">and</w:t></w:r><w:r><w:t xml:space="preserve"> </w:t></w:r><w:r><w:rPr><w:rStyle w:val="VerbatimChar" /></w:rPr><w:t xml:space="preserve">which.min()</w:t></w:r><w:r><w:t xml:space="preserve"> </w:t></w:r><w:r><w:t xml:space="preserve">work similarly for minimum values.</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="Heading2" /></w:pPr><w:bookmarkStart w:id="59" w:name="assessment---sorting" /><w:r><w:t xml:space="preserve">Assessment - Sorting</w:t></w:r><w:bookmarkEnd w:id="59" /></w:p><w:p><w:pPr><w:pStyle w:val="Compact" /><w:numPr><w:numId w:val="1046" /><w:ilvl w:val="0" /></w:numPr></w:pPr><w:r><w:t xml:space="preserve">When looking at a dataset, we may want to sort the data in an order that makes more sense for analysis. Let’s learn to do this using the</w:t></w:r><w:r><w:t xml:space="preserve"> </w:t></w:r><w:r><w:rPr><w:rStyle w:val="VerbatimChar" /></w:rPr><w:t xml:space="preserve">murders</w:t></w:r><w:r><w:t xml:space="preserve"> </w:t></w:r><w:r><w:t xml:space="preserve">dataset as an example</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="SourceCode" /></w:pPr><w:r><w:rPr><w:rStyle w:val="CommentTok" /></w:rPr><w:t xml:space="preserve"># Access the `state` variable and store it in an object </w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">states &lt;-</w:t></w:r><w:r><w:rPr><w:rStyle w:val="StringTok" /></w:rPr><w:t xml:space="preserve"> </w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">murders</w:t></w:r><w:r><w:rPr><w:rStyle w:val="OperatorTok" /></w:rPr><w:t xml:space="preserve">$</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">state </w:t></w:r><w:r><w:br /></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="CommentTok" /></w:rPr><w:t xml:space="preserve"># Sort the object alphabetically and redefine the object </w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">states &lt;-</w:t></w:r><w:r><w:rPr><w:rStyle w:val="StringTok" /></w:rPr><w:t xml:space="preserve"> </w:t></w:r><w:r><w:rPr><w:rStyle w:val="KeywordTok" /></w:rPr><w:t xml:space="preserve">sort</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">(states) </w:t></w:r><w:r><w:br /></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="CommentTok" /></w:rPr><w:t xml:space="preserve"># Report the first alphabetical value  </w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">states[</w:t></w:r><w:r><w:rPr><w:rStyle w:val="DecValTok" /></w:rPr><w:t xml:space="preserve">1</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">]</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="SourceCode" /></w:pPr><w:r><w:rPr><w:rStyle w:val="VerbatimChar" /></w:rPr><w:t xml:space="preserve">## [1] &quot;Alabama&quot;</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="SourceCode" /></w:pPr><w:r><w:rPr><w:rStyle w:val="CommentTok" /></w:rPr><w:t xml:space="preserve"># Access population values from the dataset and store it in pop</w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">pop &lt;-</w:t></w:r><w:r><w:rPr><w:rStyle w:val="StringTok" /></w:rPr><w:t xml:space="preserve"> </w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">murders</w:t></w:r><w:r><w:rPr><w:rStyle w:val="OperatorTok" /></w:rPr><w:t xml:space="preserve">$</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">population</w:t></w:r><w:r><w:br /></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="CommentTok" /></w:rPr><w:t xml:space="preserve"># Sort the object and save it in the same object</w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">pop &lt;-</w:t></w:r><w:r><w:rPr><w:rStyle w:val="StringTok" /></w:rPr><w:t xml:space="preserve"> </w:t></w:r><w:r><w:rPr><w:rStyle w:val="KeywordTok" /></w:rPr><w:t xml:space="preserve">sort</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">(pop)</w:t></w:r><w:r><w:br /></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="CommentTok" /></w:rPr><w:t xml:space="preserve"># Report the smallest population size </w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">pop[</w:t></w:r><w:r><w:rPr><w:rStyle w:val="DecValTok" /></w:rPr><w:t xml:space="preserve">1</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">]</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="SourceCode" /></w:pPr><w:r><w:rPr><w:rStyle w:val="VerbatimChar" /></w:rPr><w:t xml:space="preserve">## [1] 563626</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="Compact" /><w:numPr><w:numId w:val="1047" /><w:ilvl w:val="0" /></w:numPr></w:pPr><w:r><w:t xml:space="preserve">The function</w:t></w:r><w:r><w:t xml:space="preserve"> </w:t></w:r><w:r><w:rPr><w:rStyle w:val="VerbatimChar" /></w:rPr><w:t xml:space="preserve">order()</w:t></w:r><w:r><w:t xml:space="preserve"> </w:t></w:r><w:r><w:t xml:space="preserve">returns the index vector needed to sort the vector. This implies that</w:t></w:r><w:r><w:t xml:space="preserve"> </w:t></w:r><w:r><w:rPr><w:rStyle w:val="VerbatimChar" /></w:rPr><w:t xml:space="preserve">sort(x)</w:t></w:r><w:r><w:t xml:space="preserve"> </w:t></w:r><w:r><w:t xml:space="preserve">and</w:t></w:r><w:r><w:t xml:space="preserve"> </w:t></w:r><w:r><w:rPr><w:rStyle w:val="VerbatimChar" /></w:rPr><w:t xml:space="preserve">x[order(x)]</w:t></w:r><w:r><w:t xml:space="preserve"> </w:t></w:r><w:r><w:t xml:space="preserve">give the same result.</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="FirstParagraph" /></w:pPr><w:r><w:t xml:space="preserve">This can be useful for finding row numbers with certain properties such as</w:t></w:r><w:r><w:t xml:space="preserve"> </w:t></w:r><w:r><w:t xml:space="preserve">“</w:t></w:r><w:r><w:t xml:space="preserve">the row for the state with the smallest population</w:t></w:r><w:r><w:t xml:space="preserve">”</w:t></w:r><w:r><w:t xml:space="preserve">. Remember that when we extract a variable from a data frame the order of the resulting vector is the same as the order of the rows of the data frame. So for example, the entries of the vector</w:t></w:r><w:r><w:t xml:space="preserve"> </w:t></w:r><w:r><w:rPr><w:rStyle w:val="VerbatimChar" /></w:rPr><w:t xml:space="preserve">murders$state</w:t></w:r><w:r><w:t xml:space="preserve"> </w:t></w:r><w:r><w:t xml:space="preserve">are ordered in the same way as the states if you go down the rows of</w:t></w:r><w:r><w:t xml:space="preserve"> </w:t></w:r><w:r><w:rPr><w:rStyle w:val="VerbatimChar" /></w:rPr><w:t xml:space="preserve">murders</w:t></w:r><w:r><w:t xml:space="preserve">.</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="SourceCode" /></w:pPr><w:r><w:rPr><w:rStyle w:val="CommentTok" /></w:rPr><w:t xml:space="preserve"># Access population from the dataset and store it in pop</w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">pop &lt;-</w:t></w:r><w:r><w:rPr><w:rStyle w:val="StringTok" /></w:rPr><w:t xml:space="preserve"> </w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">murders</w:t></w:r><w:r><w:rPr><w:rStyle w:val="OperatorTok" /></w:rPr><w:t xml:space="preserve">$</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">population</w:t></w:r><w:r><w:br /></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="CommentTok" /></w:rPr><w:t xml:space="preserve"># Use the command order to find the vector of indexes that order pop and store in object ord</w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">ord &lt;-</w:t></w:r><w:r><w:rPr><w:rStyle w:val="StringTok" /></w:rPr><w:t xml:space="preserve"> </w:t></w:r><w:r><w:rPr><w:rStyle w:val="KeywordTok" /></w:rPr><w:t xml:space="preserve">order</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">(pop)</w:t></w:r><w:r><w:br /></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="CommentTok" /></w:rPr><w:t xml:space="preserve"># Find the index number of the entry with the smallest population size</w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">ord[</w:t></w:r><w:r><w:rPr><w:rStyle w:val="DecValTok" /></w:rPr><w:t xml:space="preserve">1</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">]</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="SourceCode" /></w:pPr><w:r><w:rPr><w:rStyle w:val="VerbatimChar" /></w:rPr><w:t xml:space="preserve">## [1] 51</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="Compact" /><w:numPr><w:numId w:val="1048" /><w:ilvl w:val="0" /></w:numPr></w:pPr><w:r><w:t xml:space="preserve">We can actually perform the same operation as in the previous exercise using the function</w:t></w:r><w:r><w:t xml:space="preserve"> </w:t></w:r><w:r><w:rPr><w:rStyle w:val="VerbatimChar" /></w:rPr><w:t xml:space="preserve">which.min</w:t></w:r><w:r><w:t xml:space="preserve">. It basically tells us which is the minimum value.</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="SourceCode" /></w:pPr><w:r><w:rPr><w:rStyle w:val="CommentTok" /></w:rPr><w:t xml:space="preserve"># Find the index of the smallest value for variable total </w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="KeywordTok" /></w:rPr><w:t xml:space="preserve">which.min</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">(murders</w:t></w:r><w:r><w:rPr><w:rStyle w:val="OperatorTok" /></w:rPr><w:t xml:space="preserve">$</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">total)</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="SourceCode" /></w:pPr><w:r><w:rPr><w:rStyle w:val="VerbatimChar" /></w:rPr><w:t xml:space="preserve">## [1] 46</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="SourceCode" /></w:pPr><w:r><w:rPr><w:rStyle w:val="CommentTok" /></w:rPr><w:t xml:space="preserve"># Find the index of the smallest value for population</w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="KeywordTok" /></w:rPr><w:t xml:space="preserve">which.min</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">(murders</w:t></w:r><w:r><w:rPr><w:rStyle w:val="OperatorTok" /></w:rPr><w:t xml:space="preserve">$</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">population)</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="SourceCode" /></w:pPr><w:r><w:rPr><w:rStyle w:val="VerbatimChar" /></w:rPr><w:t xml:space="preserve">## [1] 51</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="Compact" /><w:numPr><w:numId w:val="1049" /><w:ilvl w:val="0" /></w:numPr></w:pPr><w:r><w:t xml:space="preserve">Now we know how small the smallest state is and we know which row represents it. However, which state is it?</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="SourceCode" /></w:pPr><w:r><w:rPr><w:rStyle w:val="CommentTok" /></w:rPr><w:t xml:space="preserve"># Define the variable i to be the index of the smallest state</w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">i &lt;-</w:t></w:r><w:r><w:rPr><w:rStyle w:val="StringTok" /></w:rPr><w:t xml:space="preserve"> </w:t></w:r><w:r><w:rPr><w:rStyle w:val="KeywordTok" /></w:rPr><w:t xml:space="preserve">which.min</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">(murders</w:t></w:r><w:r><w:rPr><w:rStyle w:val="OperatorTok" /></w:rPr><w:t xml:space="preserve">$</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">population)</w:t></w:r><w:r><w:br /></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="CommentTok" /></w:rPr><w:t xml:space="preserve"># Define variable states to hold the states</w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">states &lt;-</w:t></w:r><w:r><w:rPr><w:rStyle w:val="StringTok" /></w:rPr><w:t xml:space="preserve"> </w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">murders</w:t></w:r><w:r><w:rPr><w:rStyle w:val="OperatorTok" /></w:rPr><w:t xml:space="preserve">$</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">state</w:t></w:r><w:r><w:br /></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="CommentTok" /></w:rPr><w:t xml:space="preserve"># Use the index you just defined to find the state with the smallest population</w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">states[i]</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="SourceCode" /></w:pPr><w:r><w:rPr><w:rStyle w:val="VerbatimChar" /></w:rPr><w:t xml:space="preserve">## [1] &quot;Wyoming&quot;</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="Compact" /><w:numPr><w:numId w:val="1050" /><w:ilvl w:val="0" /></w:numPr></w:pPr><w:r><w:t xml:space="preserve">You can create a data frame using the data.frame function.</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="FirstParagraph" /></w:pPr><w:r><w:t xml:space="preserve">Here is a quick example:</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="SourceCode" /></w:pPr><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">temp &lt;-</w:t></w:r><w:r><w:rPr><w:rStyle w:val="StringTok" /></w:rPr><w:t xml:space="preserve"> </w:t></w:r><w:r><w:rPr><w:rStyle w:val="KeywordTok" /></w:rPr><w:t xml:space="preserve">c</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">(</w:t></w:r><w:r><w:rPr><w:rStyle w:val="DecValTok" /></w:rPr><w:t xml:space="preserve">35</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">, </w:t></w:r><w:r><w:rPr><w:rStyle w:val="DecValTok" /></w:rPr><w:t xml:space="preserve">88</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">, </w:t></w:r><w:r><w:rPr><w:rStyle w:val="DecValTok" /></w:rPr><w:t xml:space="preserve">42</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">, </w:t></w:r><w:r><w:rPr><w:rStyle w:val="DecValTok" /></w:rPr><w:t xml:space="preserve">84</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">, </w:t></w:r><w:r><w:rPr><w:rStyle w:val="DecValTok" /></w:rPr><w:t xml:space="preserve">81</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">, </w:t></w:r><w:r><w:rPr><w:rStyle w:val="DecValTok" /></w:rPr><w:t xml:space="preserve">30</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">)</w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">city &lt;-</w:t></w:r><w:r><w:rPr><w:rStyle w:val="StringTok" /></w:rPr><w:t xml:space="preserve"> </w:t></w:r><w:r><w:rPr><w:rStyle w:val="KeywordTok" /></w:rPr><w:t xml:space="preserve">c</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">(</w:t></w:r><w:r><w:rPr><w:rStyle w:val="StringTok" /></w:rPr><w:t xml:space="preserve">&quot;Beijing&quot;</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">, </w:t></w:r><w:r><w:rPr><w:rStyle w:val="StringTok" /></w:rPr><w:t xml:space="preserve">&quot;Lagos&quot;</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">, </w:t></w:r><w:r><w:rPr><w:rStyle w:val="StringTok" /></w:rPr><w:t xml:space="preserve">&quot;Paris&quot;</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">, </w:t></w:r><w:r><w:rPr><w:rStyle w:val="StringTok" /></w:rPr><w:t xml:space="preserve">&quot;Rio de Janeiro&quot;</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">, </w:t></w:r><w:r><w:rPr><w:rStyle w:val="StringTok" /></w:rPr><w:t xml:space="preserve">&quot;San Juan&quot;</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">, </w:t></w:r><w:r><w:rPr><w:rStyle w:val="StringTok" /></w:rPr><w:t xml:space="preserve">&quot;Toronto&quot;</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">)</w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">city_temps &lt;-</w:t></w:r><w:r><w:rPr><w:rStyle w:val="StringTok" /></w:rPr><w:t xml:space="preserve"> </w:t></w:r><w:r><w:rPr><w:rStyle w:val="KeywordTok" /></w:rPr><w:t xml:space="preserve">data.frame</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">(</w:t></w:r><w:r><w:rPr><w:rStyle w:val="DataTypeTok" /></w:rPr><w:t xml:space="preserve">name =</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve"> city, </w:t></w:r><w:r><w:rPr><w:rStyle w:val="DataTypeTok" /></w:rPr><w:t xml:space="preserve">temperature =</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve"> temp)</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="SourceCode" /></w:pPr><w:r><w:rPr><w:rStyle w:val="CommentTok" /></w:rPr><w:t xml:space="preserve"># Store temperatures in an object </w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">temp &lt;-</w:t></w:r><w:r><w:rPr><w:rStyle w:val="StringTok" /></w:rPr><w:t xml:space="preserve"> </w:t></w:r><w:r><w:rPr><w:rStyle w:val="KeywordTok" /></w:rPr><w:t xml:space="preserve">c</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">(</w:t></w:r><w:r><w:rPr><w:rStyle w:val="DecValTok" /></w:rPr><w:t xml:space="preserve">35</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">, </w:t></w:r><w:r><w:rPr><w:rStyle w:val="DecValTok" /></w:rPr><w:t xml:space="preserve">88</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">, </w:t></w:r><w:r><w:rPr><w:rStyle w:val="DecValTok" /></w:rPr><w:t xml:space="preserve">42</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">, </w:t></w:r><w:r><w:rPr><w:rStyle w:val="DecValTok" /></w:rPr><w:t xml:space="preserve">84</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">, </w:t></w:r><w:r><w:rPr><w:rStyle w:val="DecValTok" /></w:rPr><w:t xml:space="preserve">81</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">, </w:t></w:r><w:r><w:rPr><w:rStyle w:val="DecValTok" /></w:rPr><w:t xml:space="preserve">30</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">)</w:t></w:r><w:r><w:br /></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="CommentTok" /></w:rPr><w:t xml:space="preserve"># Store city names in an object </w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">city &lt;-</w:t></w:r><w:r><w:rPr><w:rStyle w:val="StringTok" /></w:rPr><w:t xml:space="preserve"> </w:t></w:r><w:r><w:rPr><w:rStyle w:val="KeywordTok" /></w:rPr><w:t xml:space="preserve">c</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">(</w:t></w:r><w:r><w:rPr><w:rStyle w:val="StringTok" /></w:rPr><w:t xml:space="preserve">&quot;Beijing&quot;</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">, </w:t></w:r><w:r><w:rPr><w:rStyle w:val="StringTok" /></w:rPr><w:t xml:space="preserve">&quot;Lagos&quot;</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">, </w:t></w:r><w:r><w:rPr><w:rStyle w:val="StringTok" /></w:rPr><w:t xml:space="preserve">&quot;Paris&quot;</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">, </w:t></w:r><w:r><w:rPr><w:rStyle w:val="StringTok" /></w:rPr><w:t xml:space="preserve">&quot;Rio de Janeiro&quot;</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">, </w:t></w:r><w:r><w:rPr><w:rStyle w:val="StringTok" /></w:rPr><w:t xml:space="preserve">&quot;San Juan&quot;</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">, </w:t></w:r><w:r><w:rPr><w:rStyle w:val="StringTok" /></w:rPr><w:t xml:space="preserve">&quot;Toronto&quot;</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">)</w:t></w:r><w:r><w:br /></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="CommentTok" /></w:rPr><w:t xml:space="preserve"># Create data frame with city names and temperature </w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">city_temps &lt;-</w:t></w:r><w:r><w:rPr><w:rStyle w:val="StringTok" /></w:rPr><w:t xml:space="preserve"> </w:t></w:r><w:r><w:rPr><w:rStyle w:val="KeywordTok" /></w:rPr><w:t xml:space="preserve">data.frame</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">(</w:t></w:r><w:r><w:rPr><w:rStyle w:val="DataTypeTok" /></w:rPr><w:t xml:space="preserve">name =</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve"> city, </w:t></w:r><w:r><w:rPr><w:rStyle w:val="DataTypeTok" /></w:rPr><w:t xml:space="preserve">temperature =</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve"> temp)</w:t></w:r><w:r><w:br /></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="CommentTok" /></w:rPr><w:t xml:space="preserve"># Define a variable states to be the state names </w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">states &lt;-</w:t></w:r><w:r><w:rPr><w:rStyle w:val="StringTok" /></w:rPr><w:t xml:space="preserve"> </w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">murders</w:t></w:r><w:r><w:rPr><w:rStyle w:val="OperatorTok" /></w:rPr><w:t xml:space="preserve">$</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">state</w:t></w:r><w:r><w:br /></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="CommentTok" /></w:rPr><w:t xml:space="preserve"># Define a variable ranks to determine the population size ranks </w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">ranks &lt;-</w:t></w:r><w:r><w:rPr><w:rStyle w:val="StringTok" /></w:rPr><w:t xml:space="preserve"> </w:t></w:r><w:r><w:rPr><w:rStyle w:val="KeywordTok" /></w:rPr><w:t xml:space="preserve">rank</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">(murders</w:t></w:r><w:r><w:rPr><w:rStyle w:val="OperatorTok" /></w:rPr><w:t xml:space="preserve">$</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">population)</w:t></w:r><w:r><w:br /></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="CommentTok" /></w:rPr><w:t xml:space="preserve"># Create a data frame my_df with the state name and its rank</w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">my_df &lt;-</w:t></w:r><w:r><w:rPr><w:rStyle w:val="StringTok" /></w:rPr><w:t xml:space="preserve"> </w:t></w:r><w:r><w:rPr><w:rStyle w:val="KeywordTok" /></w:rPr><w:t xml:space="preserve">data.frame</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">(</w:t></w:r><w:r><w:rPr><w:rStyle w:val="DataTypeTok" /></w:rPr><w:t xml:space="preserve">name =</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve"> states, </w:t></w:r><w:r><w:rPr><w:rStyle w:val="DataTypeTok" /></w:rPr><w:t xml:space="preserve">rank =</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve"> ranks)</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="Compact" /><w:numPr><w:numId w:val="1051" /><w:ilvl w:val="0" /></w:numPr></w:pPr><w:r><w:t xml:space="preserve">This exercise is somewhat more challenging. We are going to repeat the previous exercise but this time order `</w:t></w:r><w:r><w:rPr><w:rStyle w:val="VerbatimChar" /></w:rPr><w:t xml:space="preserve">my_df</w:t></w:r><w:r><w:t xml:space="preserve"> </w:t></w:r><w:r><w:t xml:space="preserve">so that the states are ordered from least populous to most.</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="SourceCode" /></w:pPr><w:r><w:rPr><w:rStyle w:val="CommentTok" /></w:rPr><w:t xml:space="preserve"># Define a variable states to be the state names from the murders data frame</w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">states &lt;-</w:t></w:r><w:r><w:rPr><w:rStyle w:val="StringTok" /></w:rPr><w:t xml:space="preserve"> </w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">murders</w:t></w:r><w:r><w:rPr><w:rStyle w:val="OperatorTok" /></w:rPr><w:t xml:space="preserve">$</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">state</w:t></w:r><w:r><w:br /></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="CommentTok" /></w:rPr><w:t xml:space="preserve"># Define a variable ranks to determine the population size ranks </w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">ranks &lt;-</w:t></w:r><w:r><w:rPr><w:rStyle w:val="StringTok" /></w:rPr><w:t xml:space="preserve"> </w:t></w:r><w:r><w:rPr><w:rStyle w:val="KeywordTok" /></w:rPr><w:t xml:space="preserve">rank</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">(murders</w:t></w:r><w:r><w:rPr><w:rStyle w:val="OperatorTok" /></w:rPr><w:t xml:space="preserve">$</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">population)</w:t></w:r><w:r><w:br /></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="CommentTok" /></w:rPr><w:t xml:space="preserve"># Define a variable ind to store the indexes needed to order the population values</w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">ind &lt;-</w:t></w:r><w:r><w:rPr><w:rStyle w:val="StringTok" /></w:rPr><w:t xml:space="preserve"> </w:t></w:r><w:r><w:rPr><w:rStyle w:val="KeywordTok" /></w:rPr><w:t xml:space="preserve">order</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">(murders</w:t></w:r><w:r><w:rPr><w:rStyle w:val="OperatorTok" /></w:rPr><w:t xml:space="preserve">$</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">population)</w:t></w:r><w:r><w:br /></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="CommentTok" /></w:rPr><w:t xml:space="preserve"># Create a data frame my_df with the state name and its rank and ordered from least populous to most </w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">my_df &lt;-</w:t></w:r><w:r><w:rPr><w:rStyle w:val="StringTok" /></w:rPr><w:t xml:space="preserve"> </w:t></w:r><w:r><w:rPr><w:rStyle w:val="KeywordTok" /></w:rPr><w:t xml:space="preserve">data.frame</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">(</w:t></w:r><w:r><w:rPr><w:rStyle w:val="DataTypeTok" /></w:rPr><w:t xml:space="preserve">states =</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve"> states[ind], </w:t></w:r><w:r><w:rPr><w:rStyle w:val="DataTypeTok" /></w:rPr><w:t xml:space="preserve">ranks =</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve"> ranks[ind])</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="Compact" /><w:numPr><w:numId w:val="1052" /><w:ilvl w:val="0" /></w:numPr></w:pPr><w:r><w:t xml:space="preserve">The</w:t></w:r><w:r><w:t xml:space="preserve"> </w:t></w:r><w:r><w:rPr><w:rStyle w:val="VerbatimChar" /></w:rPr><w:t xml:space="preserve">na_example</w:t></w:r><w:r><w:t xml:space="preserve"> </w:t></w:r><w:r><w:t xml:space="preserve">dataset represents a series of counts. It is included in the</w:t></w:r><w:r><w:t xml:space="preserve"> </w:t></w:r><w:r><w:rPr><w:i /></w:rPr><w:t xml:space="preserve">dslabs</w:t></w:r><w:r><w:t xml:space="preserve"> </w:t></w:r><w:r><w:t xml:space="preserve">package.</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="FirstParagraph" /></w:pPr><w:r><w:t xml:space="preserve">You can quickly examine the object using</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="SourceCode" /></w:pPr><w:r><w:rPr><w:rStyle w:val="KeywordTok" /></w:rPr><w:t xml:space="preserve">library</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">(dslabs)</w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="KeywordTok" /></w:rPr><w:t xml:space="preserve">data</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">(na_example)</w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="KeywordTok" /></w:rPr><w:t xml:space="preserve">str</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">(na_example)</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="FirstParagraph" /></w:pPr><w:r><w:t xml:space="preserve">However, when we compute the average we obtain an</w:t></w:r><w:r><w:t xml:space="preserve"> </w:t></w:r><w:r><w:rPr><w:rStyle w:val="VerbatimChar" /></w:rPr><w:t xml:space="preserve">NA</w:t></w:r><w:r><w:t xml:space="preserve">. You can see this by typing</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="SourceCode" /></w:pPr><w:r><w:rPr><w:rStyle w:val="KeywordTok" /></w:rPr><w:t xml:space="preserve">mean</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">(na_example)</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="SourceCode" /></w:pPr><w:r><w:rPr><w:rStyle w:val="CommentTok" /></w:rPr><w:t xml:space="preserve"># Using new dataset </w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="KeywordTok" /></w:rPr><w:t xml:space="preserve">library</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">(dslabs)</w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="KeywordTok" /></w:rPr><w:t xml:space="preserve">data</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">(na_example)</w:t></w:r><w:r><w:br /></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="CommentTok" /></w:rPr><w:t xml:space="preserve"># Checking the structure </w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="KeywordTok" /></w:rPr><w:t xml:space="preserve">str</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">(na_example)</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="SourceCode" /></w:pPr><w:r><w:rPr><w:rStyle w:val="VerbatimChar" /></w:rPr><w:t xml:space="preserve">##  int [1:1000] 2 1 3 2 1 3 1 4 3 2 ...</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="SourceCode" /></w:pPr><w:r><w:rPr><w:rStyle w:val="CommentTok" /></w:rPr><w:t xml:space="preserve"># Find out the mean of the entire dataset </w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="KeywordTok" /></w:rPr><w:t xml:space="preserve">mean</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">(na_example)</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="SourceCode" /></w:pPr><w:r><w:rPr><w:rStyle w:val="VerbatimChar" /></w:rPr><w:t xml:space="preserve">## [1] NA</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="SourceCode" /></w:pPr><w:r><w:rPr><w:rStyle w:val="CommentTok" /></w:rPr><w:t xml:space="preserve"># Use is.na to create a logical index ind that tells which entries are NA</w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">ind &lt;-</w:t></w:r><w:r><w:rPr><w:rStyle w:val="StringTok" /></w:rPr><w:t xml:space="preserve"> </w:t></w:r><w:r><w:rPr><w:rStyle w:val="KeywordTok" /></w:rPr><w:t xml:space="preserve">is.na</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">(na_example)</w:t></w:r><w:r><w:br /></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="CommentTok" /></w:rPr><w:t xml:space="preserve"># Determine how many NA ind has using the sum function</w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="KeywordTok" /></w:rPr><w:t xml:space="preserve">sum</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">(ind)</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="SourceCode" /></w:pPr><w:r><w:rPr><w:rStyle w:val="VerbatimChar" /></w:rPr><w:t xml:space="preserve">## [1] 145</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="Compact" /><w:numPr><w:numId w:val="1053" /><w:ilvl w:val="0" /></w:numPr></w:pPr><w:r><w:t xml:space="preserve">We previously computed the average of</w:t></w:r><w:r><w:t xml:space="preserve"> </w:t></w:r><w:r><w:rPr><w:rStyle w:val="VerbatimChar" /></w:rPr><w:t xml:space="preserve">na_example</w:t></w:r><w:r><w:t xml:space="preserve"> </w:t></w:r><w:r><w:t xml:space="preserve">using</w:t></w:r><w:r><w:t xml:space="preserve"> </w:t></w:r><w:r><w:rPr><w:rStyle w:val="VerbatimChar" /></w:rPr><w:t xml:space="preserve">mean(na_example)</w:t></w:r><w:r><w:t xml:space="preserve"> </w:t></w:r><w:r><w:t xml:space="preserve">and obtain</w:t></w:r><w:r><w:t xml:space="preserve"> </w:t></w:r><w:r><w:rPr><w:rStyle w:val="VerbatimChar" /></w:rPr><w:t xml:space="preserve">NA</w:t></w:r><w:r><w:t xml:space="preserve">. This is because the function</w:t></w:r><w:r><w:t xml:space="preserve"> </w:t></w:r><w:r><w:rPr><w:rStyle w:val="VerbatimChar" /></w:rPr><w:t xml:space="preserve">mean</w:t></w:r><w:r><w:t xml:space="preserve"> </w:t></w:r><w:r><w:t xml:space="preserve">returns</w:t></w:r><w:r><w:t xml:space="preserve"> </w:t></w:r><w:r><w:rPr><w:rStyle w:val="VerbatimChar" /></w:rPr><w:t xml:space="preserve">NA</w:t></w:r><w:r><w:t xml:space="preserve"> </w:t></w:r><w:r><w:t xml:space="preserve">if it encounters at least one</w:t></w:r><w:r><w:t xml:space="preserve"> </w:t></w:r><w:r><w:rPr><w:rStyle w:val="VerbatimChar" /></w:rPr><w:t xml:space="preserve">NA</w:t></w:r><w:r><w:t xml:space="preserve">. A common operation is therefore removing the entries that are NA and after that perform operations on the rest.</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="SourceCode" /></w:pPr><w:r><w:rPr><w:rStyle w:val="CommentTok" /></w:rPr><w:t xml:space="preserve"># Note what we can do with the ! operator</w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">x &lt;-</w:t></w:r><w:r><w:rPr><w:rStyle w:val="StringTok" /></w:rPr><w:t xml:space="preserve"> </w:t></w:r><w:r><w:rPr><w:rStyle w:val="KeywordTok" /></w:rPr><w:t xml:space="preserve">c</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">(</w:t></w:r><w:r><w:rPr><w:rStyle w:val="DecValTok" /></w:rPr><w:t xml:space="preserve">1</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">, </w:t></w:r><w:r><w:rPr><w:rStyle w:val="DecValTok" /></w:rPr><w:t xml:space="preserve">2</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">, </w:t></w:r><w:r><w:rPr><w:rStyle w:val="DecValTok" /></w:rPr><w:t xml:space="preserve">3</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">)</w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">ind &lt;-</w:t></w:r><w:r><w:rPr><w:rStyle w:val="StringTok" /></w:rPr><w:t xml:space="preserve"> </w:t></w:r><w:r><w:rPr><w:rStyle w:val="KeywordTok" /></w:rPr><w:t xml:space="preserve">c</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">(</w:t></w:r><w:r><w:rPr><w:rStyle w:val="OtherTok" /></w:rPr><w:t xml:space="preserve">FALSE</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">, </w:t></w:r><w:r><w:rPr><w:rStyle w:val="OtherTok" /></w:rPr><w:t xml:space="preserve">TRUE</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">, </w:t></w:r><w:r><w:rPr><w:rStyle w:val="OtherTok" /></w:rPr><w:t xml:space="preserve">FALSE</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">)</w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">x[</w:t></w:r><w:r><w:rPr><w:rStyle w:val="OperatorTok" /></w:rPr><w:t xml:space="preserve">!</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">ind]</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="SourceCode" /></w:pPr><w:r><w:rPr><w:rStyle w:val="VerbatimChar" /></w:rPr><w:t xml:space="preserve">## [1] 1 3</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="SourceCode" /></w:pPr><w:r><w:rPr><w:rStyle w:val="CommentTok" /></w:rPr><w:t xml:space="preserve"># Create the ind vector</w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="KeywordTok" /></w:rPr><w:t xml:space="preserve">library</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">(dslabs)</w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="KeywordTok" /></w:rPr><w:t xml:space="preserve">data</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">(na_example)</w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">ind &lt;-</w:t></w:r><w:r><w:rPr><w:rStyle w:val="StringTok" /></w:rPr><w:t xml:space="preserve"> </w:t></w:r><w:r><w:rPr><w:rStyle w:val="KeywordTok" /></w:rPr><w:t xml:space="preserve">is.na</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">(na_example)</w:t></w:r><w:r><w:br /></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="CommentTok" /></w:rPr><w:t xml:space="preserve"># We saw that this gives an NA</w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="KeywordTok" /></w:rPr><w:t xml:space="preserve">mean</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">(na_example)</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="SourceCode" /></w:pPr><w:r><w:rPr><w:rStyle w:val="VerbatimChar" /></w:rPr><w:t xml:space="preserve">## [1] NA</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="SourceCode" /></w:pPr><w:r><w:rPr><w:rStyle w:val="CommentTok" /></w:rPr><w:t xml:space="preserve"># Compute the average, for entries of na_example that are not NA</w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="KeywordTok" /></w:rPr><w:t xml:space="preserve">mean</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">(na_example[</w:t></w:r><w:r><w:rPr><w:rStyle w:val="OperatorTok" /></w:rPr><w:t xml:space="preserve">!</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">ind])</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="SourceCode" /></w:pPr><w:r><w:rPr><w:rStyle w:val="VerbatimChar" /></w:rPr><w:t xml:space="preserve">## [1] 2.3</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="Heading2" /></w:pPr><w:bookmarkStart w:id="60" w:name="vector-arithmetic" /><w:r><w:t xml:space="preserve">Vector arithmetic</w:t></w:r><w:bookmarkEnd w:id="60" /></w:p><w:p><w:pPr><w:pStyle w:val="FirstParagraph" /></w:pPr><w:r><w:t xml:space="preserve">The textbook for this section is available</w:t></w:r><w:r><w:t xml:space="preserve"> </w:t></w:r><w:hyperlink r:id="rId61"><w:r><w:rPr><w:rStyle w:val="Hyperlink" /></w:rPr><w:t xml:space="preserve">here</w:t></w:r></w:hyperlink></w:p><w:p><w:pPr><w:pStyle w:val="BodyText" /></w:pPr><w:r><w:rPr><w:b /></w:rPr><w:t xml:space="preserve">Key Points</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="Compact" /><w:numPr><w:numId w:val="1054" /><w:ilvl w:val="0" /></w:numPr></w:pPr><w:r><w:t xml:space="preserve">In R, arithmetic operations on vectors occur element-wise.</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="FirstParagraph" /></w:pPr><w:r><w:rPr><w:i /></w:rPr><w:t xml:space="preserve">Code</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="SourceCode" /></w:pPr><w:r><w:rPr><w:rStyle w:val="CommentTok" /></w:rPr><w:t xml:space="preserve"># The name of the state with the maximum population is found by doing the following</w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">murders</w:t></w:r><w:r><w:rPr><w:rStyle w:val="OperatorTok" /></w:rPr><w:t xml:space="preserve">$</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">state[</w:t></w:r><w:r><w:rPr><w:rStyle w:val="KeywordTok" /></w:rPr><w:t xml:space="preserve">which.max</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">(murders</w:t></w:r><w:r><w:rPr><w:rStyle w:val="OperatorTok" /></w:rPr><w:t xml:space="preserve">$</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">population)]</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="SourceCode" /></w:pPr><w:r><w:rPr><w:rStyle w:val="VerbatimChar" /></w:rPr><w:t xml:space="preserve">## [1] &quot;California&quot;</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="SourceCode" /></w:pPr><w:r><w:rPr><w:rStyle w:val="CommentTok" /></w:rPr><w:t xml:space="preserve"># how to obtain the murder rate</w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">murder_rate &lt;-</w:t></w:r><w:r><w:rPr><w:rStyle w:val="StringTok" /></w:rPr><w:t xml:space="preserve"> </w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">murders</w:t></w:r><w:r><w:rPr><w:rStyle w:val="OperatorTok" /></w:rPr><w:t xml:space="preserve">$</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">total </w:t></w:r><w:r><w:rPr><w:rStyle w:val="OperatorTok" /></w:rPr><w:t xml:space="preserve">/</w:t></w:r><w:r><w:rPr><w:rStyle w:val="StringTok" /></w:rPr><w:t xml:space="preserve"> </w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">murders</w:t></w:r><w:r><w:rPr><w:rStyle w:val="OperatorTok" /></w:rPr><w:t xml:space="preserve">$</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">population </w:t></w:r><w:r><w:rPr><w:rStyle w:val="OperatorTok" /></w:rPr><w:t xml:space="preserve">*</w:t></w:r><w:r><w:rPr><w:rStyle w:val="StringTok" /></w:rPr><w:t xml:space="preserve"> </w:t></w:r><w:r><w:rPr><w:rStyle w:val="DecValTok" /></w:rPr><w:t xml:space="preserve">100000</w:t></w:r><w:r><w:br /></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="CommentTok" /></w:rPr><w:t xml:space="preserve"># ordering the states by murder rate, in decreasing order</w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">murders</w:t></w:r><w:r><w:rPr><w:rStyle w:val="OperatorTok" /></w:rPr><w:t xml:space="preserve">$</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">state[</w:t></w:r><w:r><w:rPr><w:rStyle w:val="KeywordTok" /></w:rPr><w:t xml:space="preserve">order</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">(murder_rate, </w:t></w:r><w:r><w:rPr><w:rStyle w:val="DataTypeTok" /></w:rPr><w:t xml:space="preserve">decreasing=</w:t></w:r><w:r><w:rPr><w:rStyle w:val="OtherTok" /></w:rPr><w:t xml:space="preserve">TRUE</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">)]</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="SourceCode" /></w:pPr><w:r><w:rPr><w:rStyle w:val="VerbatimChar" /></w:rPr><w:t xml:space="preserve">##  [1] &quot;District of Columbia&quot; &quot;Louisiana&quot;            &quot;Missouri&quot;            </w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="VerbatimChar" /></w:rPr><w:t xml:space="preserve">##  [4] &quot;Maryland&quot;             &quot;South Carolina&quot;       &quot;Delaware&quot;            </w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="VerbatimChar" /></w:rPr><w:t xml:space="preserve">##  [7] &quot;Michigan&quot;             &quot;Mississippi&quot;          &quot;Georgia&quot;             </w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="VerbatimChar" /></w:rPr><w:t xml:space="preserve">## [10] &quot;Arizona&quot;              &quot;Pennsylvania&quot;         &quot;Tennessee&quot;           </w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="VerbatimChar" /></w:rPr><w:t xml:space="preserve">## [13] &quot;Florida&quot;              &quot;California&quot;           &quot;New Mexico&quot;          </w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="VerbatimChar" /></w:rPr><w:t xml:space="preserve">## [16] &quot;Texas&quot;                &quot;Arkansas&quot;             &quot;Virginia&quot;            </w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="VerbatimChar" /></w:rPr><w:t xml:space="preserve">## [19] &quot;Nevada&quot;               &quot;North Carolina&quot;       &quot;Oklahoma&quot;            </w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="VerbatimChar" /></w:rPr><w:t xml:space="preserve">## [22] &quot;Illinois&quot;             &quot;Alabama&quot;              &quot;New Jersey&quot;          </w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="VerbatimChar" /></w:rPr><w:t xml:space="preserve">## [25] &quot;Connecticut&quot;          &quot;Ohio&quot;                 &quot;Alaska&quot;              </w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="VerbatimChar" /></w:rPr><w:t xml:space="preserve">## [28] &quot;Kentucky&quot;             &quot;New York&quot;             &quot;Kansas&quot;              </w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="VerbatimChar" /></w:rPr><w:t xml:space="preserve">## [31] &quot;Indiana&quot;              &quot;Massachusetts&quot;        &quot;Nebraska&quot;            </w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="VerbatimChar" /></w:rPr><w:t xml:space="preserve">## [34] &quot;Wisconsin&quot;            &quot;Rhode Island&quot;         &quot;West Virginia&quot;       </w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="VerbatimChar" /></w:rPr><w:t xml:space="preserve">## [37] &quot;Washington&quot;           &quot;Colorado&quot;             &quot;Montana&quot;             </w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="VerbatimChar" /></w:rPr><w:t xml:space="preserve">## [40] &quot;Minnesota&quot;            &quot;South Dakota&quot;         &quot;Oregon&quot;              </w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="VerbatimChar" /></w:rPr><w:t xml:space="preserve">## [43] &quot;Wyoming&quot;              &quot;Maine&quot;                &quot;Utah&quot;                </w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="VerbatimChar" /></w:rPr><w:t xml:space="preserve">## [46] &quot;Idaho&quot;                &quot;Iowa&quot;                 &quot;North Dakota&quot;        </w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="VerbatimChar" /></w:rPr><w:t xml:space="preserve">## [49] &quot;Hawaii&quot;               &quot;New Hampshire&quot;        &quot;Vermont&quot;</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="Heading2" /></w:pPr><w:bookmarkStart w:id="62" w:name="assessment---vector-arithmetic" /><w:r><w:t xml:space="preserve">Assessment - Vector Arithmetic</w:t></w:r><w:bookmarkEnd w:id="62" /></w:p><w:p><w:pPr><w:pStyle w:val="Compact" /><w:numPr><w:numId w:val="1055" /><w:ilvl w:val="0" /></w:numPr></w:pPr><w:r><w:t xml:space="preserve">Previously we created this data frame.</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="FirstParagraph" /></w:pPr><w:r><w:rPr><w:rStyle w:val="VerbatimChar" /></w:rPr><w:t xml:space="preserve">{r, eval=FALSE, echo=TRUE temp &lt;- c(35, 88, 42, 84, 81, 30) city &lt;- c(&quot;Beijing&quot;, &quot;Lagos&quot;, &quot;Paris&quot;, &quot;Rio de Janeiro&quot;, &quot;San Juan&quot;, &quot;Toronto&quot;) city_temps &lt;- data.frame(name = city, temperature = temp)</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="SourceCode" /></w:pPr><w:r><w:rPr><w:rStyle w:val="CommentTok" /></w:rPr><w:t xml:space="preserve"># Assign city names to `city` </w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">city &lt;-</w:t></w:r><w:r><w:rPr><w:rStyle w:val="StringTok" /></w:rPr><w:t xml:space="preserve"> </w:t></w:r><w:r><w:rPr><w:rStyle w:val="KeywordTok" /></w:rPr><w:t xml:space="preserve">c</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">(</w:t></w:r><w:r><w:rPr><w:rStyle w:val="StringTok" /></w:rPr><w:t xml:space="preserve">&quot;Beijing&quot;</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">, </w:t></w:r><w:r><w:rPr><w:rStyle w:val="StringTok" /></w:rPr><w:t xml:space="preserve">&quot;Lagos&quot;</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">, </w:t></w:r><w:r><w:rPr><w:rStyle w:val="StringTok" /></w:rPr><w:t xml:space="preserve">&quot;Paris&quot;</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">, </w:t></w:r><w:r><w:rPr><w:rStyle w:val="StringTok" /></w:rPr><w:t xml:space="preserve">&quot;Rio de Janeiro&quot;</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">, </w:t></w:r><w:r><w:rPr><w:rStyle w:val="StringTok" /></w:rPr><w:t xml:space="preserve">&quot;San Juan&quot;</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">, </w:t></w:r><w:r><w:rPr><w:rStyle w:val="StringTok" /></w:rPr><w:t xml:space="preserve">&quot;Toronto&quot;</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">)</w:t></w:r><w:r><w:br /></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="CommentTok" /></w:rPr><w:t xml:space="preserve"># Store temperature values in `temp`</w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">temp &lt;-</w:t></w:r><w:r><w:rPr><w:rStyle w:val="StringTok" /></w:rPr><w:t xml:space="preserve"> </w:t></w:r><w:r><w:rPr><w:rStyle w:val="KeywordTok" /></w:rPr><w:t xml:space="preserve">c</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">(</w:t></w:r><w:r><w:rPr><w:rStyle w:val="DecValTok" /></w:rPr><w:t xml:space="preserve">35</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">, </w:t></w:r><w:r><w:rPr><w:rStyle w:val="DecValTok" /></w:rPr><w:t xml:space="preserve">88</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">, </w:t></w:r><w:r><w:rPr><w:rStyle w:val="DecValTok" /></w:rPr><w:t xml:space="preserve">42</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">, </w:t></w:r><w:r><w:rPr><w:rStyle w:val="DecValTok" /></w:rPr><w:t xml:space="preserve">84</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">, </w:t></w:r><w:r><w:rPr><w:rStyle w:val="DecValTok" /></w:rPr><w:t xml:space="preserve">81</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">, </w:t></w:r><w:r><w:rPr><w:rStyle w:val="DecValTok" /></w:rPr><w:t xml:space="preserve">30</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">)</w:t></w:r><w:r><w:br /></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="CommentTok" /></w:rPr><w:t xml:space="preserve"># Convert temperature into Celsius and overwrite the original values of &#39;temp&#39; with these Celsius values</w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">temp &lt;-</w:t></w:r><w:r><w:rPr><w:rStyle w:val="StringTok" /></w:rPr><w:t xml:space="preserve"> </w:t></w:r><w:r><w:rPr><w:rStyle w:val="DecValTok" /></w:rPr><w:t xml:space="preserve">5</w:t></w:r><w:r><w:rPr><w:rStyle w:val="OperatorTok" /></w:rPr><w:t xml:space="preserve">/</w:t></w:r><w:r><w:rPr><w:rStyle w:val="DecValTok" /></w:rPr><w:t xml:space="preserve">9</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve"> </w:t></w:r><w:r><w:rPr><w:rStyle w:val="OperatorTok" /></w:rPr><w:t xml:space="preserve">*</w:t></w:r><w:r><w:rPr><w:rStyle w:val="StringTok" /></w:rPr><w:t xml:space="preserve"> </w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">(temp </w:t></w:r><w:r><w:rPr><w:rStyle w:val="DecValTok" /></w:rPr><w:t xml:space="preserve">-32</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">)</w:t></w:r><w:r><w:br /></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="CommentTok" /></w:rPr><w:t xml:space="preserve"># Create a data frame `city_temps` </w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">city_temps &lt;-</w:t></w:r><w:r><w:rPr><w:rStyle w:val="StringTok" /></w:rPr><w:t xml:space="preserve"> </w:t></w:r><w:r><w:rPr><w:rStyle w:val="KeywordTok" /></w:rPr><w:t xml:space="preserve">data.frame</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">(</w:t></w:r><w:r><w:rPr><w:rStyle w:val="DataTypeTok" /></w:rPr><w:t xml:space="preserve">name =</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve"> city, </w:t></w:r><w:r><w:rPr><w:rStyle w:val="DataTypeTok" /></w:rPr><w:t xml:space="preserve">temperature =</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve"> temp)</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="Compact" /><w:numPr><w:numId w:val="1056" /><w:ilvl w:val="0" /></w:numPr></w:pPr><w:r><w:t xml:space="preserve">We can use some of what we have learned to perform calculations that would otherwise be quite complicated. Let’s see an example.</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="SourceCode" /></w:pPr><w:r><w:rPr><w:rStyle w:val="CommentTok" /></w:rPr><w:t xml:space="preserve"># Define an object `x` with the numbers 1 through 100</w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">x &lt;-</w:t></w:r><w:r><w:rPr><w:rStyle w:val="StringTok" /></w:rPr><w:t xml:space="preserve"> </w:t></w:r><w:r><w:rPr><w:rStyle w:val="KeywordTok" /></w:rPr><w:t xml:space="preserve">seq</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">(</w:t></w:r><w:r><w:rPr><w:rStyle w:val="DecValTok" /></w:rPr><w:t xml:space="preserve">1</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">,</w:t></w:r><w:r><w:rPr><w:rStyle w:val="DecValTok" /></w:rPr><w:t xml:space="preserve">100</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">)</w:t></w:r><w:r><w:br /></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="CommentTok" /></w:rPr><w:t xml:space="preserve"># Compute the sum </w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="KeywordTok" /></w:rPr><w:t xml:space="preserve">sum</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">((</w:t></w:r><w:r><w:rPr><w:rStyle w:val="DecValTok" /></w:rPr><w:t xml:space="preserve">1</w:t></w:r><w:r><w:rPr><w:rStyle w:val="OperatorTok" /></w:rPr><w:t xml:space="preserve">/</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">x)</w:t></w:r><w:r><w:rPr><w:rStyle w:val="OperatorTok" /></w:rPr><w:t xml:space="preserve">^</w:t></w:r><w:r><w:rPr><w:rStyle w:val="DecValTok" /></w:rPr><w:t xml:space="preserve">2</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">)</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="SourceCode" /></w:pPr><w:r><w:rPr><w:rStyle w:val="VerbatimChar" /></w:rPr><w:t xml:space="preserve">## [1] 1.63</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="Compact" /><w:numPr><w:numId w:val="1057" /><w:ilvl w:val="0" /></w:numPr></w:pPr><w:r><w:t xml:space="preserve">Compute the per 100,000 murder rate for each state and store it in the object</w:t></w:r><w:r><w:t xml:space="preserve"> </w:t></w:r><w:r><w:rPr><w:rStyle w:val="VerbatimChar" /></w:rPr><w:t xml:space="preserve">murder_rate</w:t></w:r><w:r><w:t xml:space="preserve">. Then compute the average murder rate for the US using the function</w:t></w:r><w:r><w:t xml:space="preserve"> </w:t></w:r><w:r><w:rPr><w:rStyle w:val="VerbatimChar" /></w:rPr><w:t xml:space="preserve">mean</w:t></w:r><w:r><w:t xml:space="preserve">. What is the average?</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="SourceCode" /></w:pPr><w:r><w:rPr><w:rStyle w:val="CommentTok" /></w:rPr><w:t xml:space="preserve"># Store the per 100,000 murder rate for each state in murder_rate</w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">murder_rate &lt;-</w:t></w:r><w:r><w:rPr><w:rStyle w:val="StringTok" /></w:rPr><w:t xml:space="preserve"> </w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">murders</w:t></w:r><w:r><w:rPr><w:rStyle w:val="OperatorTok" /></w:rPr><w:t xml:space="preserve">$</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">total </w:t></w:r><w:r><w:rPr><w:rStyle w:val="OperatorTok" /></w:rPr><w:t xml:space="preserve">/</w:t></w:r><w:r><w:rPr><w:rStyle w:val="StringTok" /></w:rPr><w:t xml:space="preserve"> </w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">murders</w:t></w:r><w:r><w:rPr><w:rStyle w:val="OperatorTok" /></w:rPr><w:t xml:space="preserve">$</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">population </w:t></w:r><w:r><w:rPr><w:rStyle w:val="OperatorTok" /></w:rPr><w:t xml:space="preserve">*</w:t></w:r><w:r><w:rPr><w:rStyle w:val="StringTok" /></w:rPr><w:t xml:space="preserve"> </w:t></w:r><w:r><w:rPr><w:rStyle w:val="DecValTok" /></w:rPr><w:t xml:space="preserve">100000</w:t></w:r><w:r><w:br /></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="CommentTok" /></w:rPr><w:t xml:space="preserve"># Calculate the average murder rate in the US </w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="KeywordTok" /></w:rPr><w:t xml:space="preserve">mean</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">(murder_rate)</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="SourceCode" /></w:pPr><w:r><w:rPr><w:rStyle w:val="VerbatimChar" /></w:rPr><w:t xml:space="preserve">## [1] 2.78</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="Heading2" /></w:pPr><w:bookmarkStart w:id="63" w:name="section-2-assessment" /><w:r><w:t xml:space="preserve">Section 2 Assessment</w:t></w:r><w:bookmarkEnd w:id="63" /></w:p><w:p><w:pPr><w:pStyle w:val="Compact" /><w:numPr><w:numId w:val="1058" /><w:ilvl w:val="0" /></w:numPr></w:pPr><w:r><w:t xml:space="preserve">Consider the vector</w:t></w:r><w:r><w:t xml:space="preserve"> </w:t></w:r><w:r><w:rPr><w:rStyle w:val="VerbatimChar" /></w:rPr><w:t xml:space="preserve">x &lt;- c(2, 43, 27, 96, 18)</w:t></w:r><w:r><w:t xml:space="preserve">.</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="FirstParagraph" /></w:pPr><w:r><w:t xml:space="preserve">Match the following outputs to the function which produces that output. Options include</w:t></w:r><w:r><w:t xml:space="preserve"> </w:t></w:r><w:r><w:rPr><w:rStyle w:val="VerbatimChar" /></w:rPr><w:t xml:space="preserve">sort(x)</w:t></w:r><w:r><w:t xml:space="preserve">,</w:t></w:r><w:r><w:t xml:space="preserve"> </w:t></w:r><w:r><w:rPr><w:rStyle w:val="VerbatimChar" /></w:rPr><w:t xml:space="preserve">order(x)</w:t></w:r><w:r><w:t xml:space="preserve">,</w:t></w:r><w:r><w:t xml:space="preserve"> </w:t></w:r><w:r><w:rPr><w:rStyle w:val="VerbatimChar" /></w:rPr><w:t xml:space="preserve">rank(x)</w:t></w:r><w:r><w:t xml:space="preserve"> </w:t></w:r><w:r><w:t xml:space="preserve">and none of these.</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="SourceCode" /></w:pPr><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">x &lt;-</w:t></w:r><w:r><w:rPr><w:rStyle w:val="StringTok" /></w:rPr><w:t xml:space="preserve"> </w:t></w:r><w:r><w:rPr><w:rStyle w:val="KeywordTok" /></w:rPr><w:t xml:space="preserve">c</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">(</w:t></w:r><w:r><w:rPr><w:rStyle w:val="DecValTok" /></w:rPr><w:t xml:space="preserve">2</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">, </w:t></w:r><w:r><w:rPr><w:rStyle w:val="DecValTok" /></w:rPr><w:t xml:space="preserve">43</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">, </w:t></w:r><w:r><w:rPr><w:rStyle w:val="DecValTok" /></w:rPr><w:t xml:space="preserve">27</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">, </w:t></w:r><w:r><w:rPr><w:rStyle w:val="DecValTok" /></w:rPr><w:t xml:space="preserve">96</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">, </w:t></w:r><w:r><w:rPr><w:rStyle w:val="DecValTok" /></w:rPr><w:t xml:space="preserve">18</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">)</w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="KeywordTok" /></w:rPr><w:t xml:space="preserve">sort</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">(x)</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="SourceCode" /></w:pPr><w:r><w:rPr><w:rStyle w:val="VerbatimChar" /></w:rPr><w:t xml:space="preserve">## [1]  2 18 27 43 96</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="SourceCode" /></w:pPr><w:r><w:rPr><w:rStyle w:val="KeywordTok" /></w:rPr><w:t xml:space="preserve">order</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">(x)</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="SourceCode" /></w:pPr><w:r><w:rPr><w:rStyle w:val="VerbatimChar" /></w:rPr><w:t xml:space="preserve">## [1] 1 5 3 2 4</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="SourceCode" /></w:pPr><w:r><w:rPr><w:rStyle w:val="KeywordTok" /></w:rPr><w:t xml:space="preserve">rank</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">(x)</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="SourceCode" /></w:pPr><w:r><w:rPr><w:rStyle w:val="VerbatimChar" /></w:rPr><w:t xml:space="preserve">## [1] 1 4 3 5 2</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="FirstParagraph" /></w:pPr><w:r><w:rPr><w:rStyle w:val="VerbatimChar" /></w:rPr><w:t xml:space="preserve">1, 2, 3, 4, 5</w:t></w:r><w:r><w:t xml:space="preserve"> </w:t></w:r><w:r><w:t xml:space="preserve">none of these</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="BodyText" /></w:pPr><w:r><w:rPr><w:rStyle w:val="VerbatimChar" /></w:rPr><w:t xml:space="preserve">1, 5, 3, 2, 4</w:t></w:r><w:r><w:t xml:space="preserve"> </w:t></w:r><w:r><w:t xml:space="preserve">order(x)</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="BodyText" /></w:pPr><w:r><w:rPr><w:rStyle w:val="VerbatimChar" /></w:rPr><w:t xml:space="preserve">1, 4, 3, 5, 2</w:t></w:r><w:r><w:t xml:space="preserve"> </w:t></w:r><w:r><w:t xml:space="preserve">rank(x)</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="BodyText" /></w:pPr><w:r><w:rPr><w:rStyle w:val="VerbatimChar" /></w:rPr><w:t xml:space="preserve">2, 18, 27, 43, 96</w:t></w:r><w:r><w:t xml:space="preserve"> </w:t></w:r><w:r><w:t xml:space="preserve">sort(x)</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="Compact" /><w:numPr><w:numId w:val="1059" /><w:ilvl w:val="0" /></w:numPr></w:pPr><w:r><w:t xml:space="preserve">Continue working with the vector</w:t></w:r><w:r><w:t xml:space="preserve"> </w:t></w:r><w:r><w:rPr><w:rStyle w:val="VerbatimChar" /></w:rPr><w:t xml:space="preserve">x &lt;- c(2, 43, 27, 96, 18)</w:t></w:r><w:r><w:t xml:space="preserve">.</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="SourceCode" /></w:pPr><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">x &lt;-</w:t></w:r><w:r><w:rPr><w:rStyle w:val="StringTok" /></w:rPr><w:t xml:space="preserve"> </w:t></w:r><w:r><w:rPr><w:rStyle w:val="KeywordTok" /></w:rPr><w:t xml:space="preserve">c</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">(</w:t></w:r><w:r><w:rPr><w:rStyle w:val="DecValTok" /></w:rPr><w:t xml:space="preserve">2</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">, </w:t></w:r><w:r><w:rPr><w:rStyle w:val="DecValTok" /></w:rPr><w:t xml:space="preserve">43</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">, </w:t></w:r><w:r><w:rPr><w:rStyle w:val="DecValTok" /></w:rPr><w:t xml:space="preserve">27</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">, </w:t></w:r><w:r><w:rPr><w:rStyle w:val="DecValTok" /></w:rPr><w:t xml:space="preserve">96</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">, </w:t></w:r><w:r><w:rPr><w:rStyle w:val="DecValTok" /></w:rPr><w:t xml:space="preserve">18</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">)</w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="KeywordTok" /></w:rPr><w:t xml:space="preserve">min</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">(x)</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="SourceCode" /></w:pPr><w:r><w:rPr><w:rStyle w:val="VerbatimChar" /></w:rPr><w:t xml:space="preserve">## [1] 2</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="SourceCode" /></w:pPr><w:r><w:rPr><w:rStyle w:val="KeywordTok" /></w:rPr><w:t xml:space="preserve">which.min</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">(x)</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="SourceCode" /></w:pPr><w:r><w:rPr><w:rStyle w:val="VerbatimChar" /></w:rPr><w:t xml:space="preserve">## [1] 1</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="SourceCode" /></w:pPr><w:r><w:rPr><w:rStyle w:val="KeywordTok" /></w:rPr><w:t xml:space="preserve">max</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">(x)</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="SourceCode" /></w:pPr><w:r><w:rPr><w:rStyle w:val="VerbatimChar" /></w:rPr><w:t xml:space="preserve">## [1] 96</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="SourceCode" /></w:pPr><w:r><w:rPr><w:rStyle w:val="KeywordTok" /></w:rPr><w:t xml:space="preserve">which.max</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">(x)</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="SourceCode" /></w:pPr><w:r><w:rPr><w:rStyle w:val="VerbatimChar" /></w:rPr><w:t xml:space="preserve">## [1] 4</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="FirstParagraph" /></w:pPr><w:r><w:rPr><w:rStyle w:val="VerbatimChar" /></w:rPr><w:t xml:space="preserve">min(x)</w:t></w:r><w:r><w:t xml:space="preserve"> </w:t></w:r><w:r><w:t xml:space="preserve">2</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="BodyText" /></w:pPr><w:r><w:rPr><w:rStyle w:val="VerbatimChar" /></w:rPr><w:t xml:space="preserve">which.min(x)</w:t></w:r><w:r><w:t xml:space="preserve"> </w:t></w:r><w:r><w:t xml:space="preserve">1</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="BodyText" /></w:pPr><w:r><w:rPr><w:rStyle w:val="VerbatimChar" /></w:rPr><w:t xml:space="preserve">max(x)</w:t></w:r><w:r><w:t xml:space="preserve"> </w:t></w:r><w:r><w:t xml:space="preserve">none of these</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="BodyText" /></w:pPr><w:r><w:rPr><w:rStyle w:val="VerbatimChar" /></w:rPr><w:t xml:space="preserve">which.max(x)</w:t></w:r><w:r><w:t xml:space="preserve"> </w:t></w:r><w:r><w:t xml:space="preserve">4</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="Compact" /><w:numPr><w:numId w:val="1060" /><w:ilvl w:val="0" /></w:numPr></w:pPr><w:r><w:t xml:space="preserve">Mandi, Amy, Nicole, and Olivia all ran different distances in different time intervals. Their distances (in</w:t></w:r><w:r><w:t xml:space="preserve"> </w:t></w:r><w:r><w:t xml:space="preserve">miles) and times (in minutes) are as follows:</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="SourceCode" /></w:pPr><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">name &lt;-</w:t></w:r><w:r><w:rPr><w:rStyle w:val="StringTok" /></w:rPr><w:t xml:space="preserve"> </w:t></w:r><w:r><w:rPr><w:rStyle w:val="KeywordTok" /></w:rPr><w:t xml:space="preserve">c</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">(</w:t></w:r><w:r><w:rPr><w:rStyle w:val="StringTok" /></w:rPr><w:t xml:space="preserve">&quot;Mandi&quot;</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">, </w:t></w:r><w:r><w:rPr><w:rStyle w:val="StringTok" /></w:rPr><w:t xml:space="preserve">&quot;Amy&quot;</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">, </w:t></w:r><w:r><w:rPr><w:rStyle w:val="StringTok" /></w:rPr><w:t xml:space="preserve">&quot;Nicole&quot;</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">, </w:t></w:r><w:r><w:rPr><w:rStyle w:val="StringTok" /></w:rPr><w:t xml:space="preserve">&quot;Olivia&quot;</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">)</w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">distance &lt;-</w:t></w:r><w:r><w:rPr><w:rStyle w:val="StringTok" /></w:rPr><w:t xml:space="preserve"> </w:t></w:r><w:r><w:rPr><w:rStyle w:val="KeywordTok" /></w:rPr><w:t xml:space="preserve">c</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">(</w:t></w:r><w:r><w:rPr><w:rStyle w:val="FloatTok" /></w:rPr><w:t xml:space="preserve">0.8</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">, </w:t></w:r><w:r><w:rPr><w:rStyle w:val="FloatTok" /></w:rPr><w:t xml:space="preserve">3.1</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">, </w:t></w:r><w:r><w:rPr><w:rStyle w:val="FloatTok" /></w:rPr><w:t xml:space="preserve">2.8</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">, </w:t></w:r><w:r><w:rPr><w:rStyle w:val="FloatTok" /></w:rPr><w:t xml:space="preserve">4.0</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">)</w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">time &lt;-</w:t></w:r><w:r><w:rPr><w:rStyle w:val="StringTok" /></w:rPr><w:t xml:space="preserve"> </w:t></w:r><w:r><w:rPr><w:rStyle w:val="KeywordTok" /></w:rPr><w:t xml:space="preserve">c</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">(</w:t></w:r><w:r><w:rPr><w:rStyle w:val="DecValTok" /></w:rPr><w:t xml:space="preserve">10</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">, </w:t></w:r><w:r><w:rPr><w:rStyle w:val="DecValTok" /></w:rPr><w:t xml:space="preserve">30</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">, </w:t></w:r><w:r><w:rPr><w:rStyle w:val="DecValTok" /></w:rPr><w:t xml:space="preserve">40</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">, </w:t></w:r><w:r><w:rPr><w:rStyle w:val="DecValTok" /></w:rPr><w:t xml:space="preserve">50</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">)</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="FirstParagraph" /></w:pPr><w:r><w:t xml:space="preserve">Write a line of code to convert time to hours. Remember there are 60 minutes in an hour. Then write a line of code to calculate the speed of each runner in miles per hour. Speed is distance divided by time.</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="BodyText" /></w:pPr><w:r><w:t xml:space="preserve">How many hours did Olivia run?</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="SourceCode" /></w:pPr><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">hours &lt;-</w:t></w:r><w:r><w:rPr><w:rStyle w:val="StringTok" /></w:rPr><w:t xml:space="preserve"> </w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">time</w:t></w:r><w:r><w:rPr><w:rStyle w:val="OperatorTok" /></w:rPr><w:t xml:space="preserve">/</w:t></w:r><w:r><w:rPr><w:rStyle w:val="DecValTok" /></w:rPr><w:t xml:space="preserve">60</w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">hours[</w:t></w:r><w:r><w:rPr><w:rStyle w:val="DecValTok" /></w:rPr><w:t xml:space="preserve">4</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">]</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="SourceCode" /></w:pPr><w:r><w:rPr><w:rStyle w:val="VerbatimChar" /></w:rPr><w:t xml:space="preserve">## [1] 0.833</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="FirstParagraph" /></w:pPr><w:r><w:t xml:space="preserve">What was Mandi’s speed in miles per hour?</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="SourceCode" /></w:pPr><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">speed &lt;-</w:t></w:r><w:r><w:rPr><w:rStyle w:val="StringTok" /></w:rPr><w:t xml:space="preserve"> </w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">distance</w:t></w:r><w:r><w:rPr><w:rStyle w:val="OperatorTok" /></w:rPr><w:t xml:space="preserve">/</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">hours</w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">speed[</w:t></w:r><w:r><w:rPr><w:rStyle w:val="DecValTok" /></w:rPr><w:t xml:space="preserve">1</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">]</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="SourceCode" /></w:pPr><w:r><w:rPr><w:rStyle w:val="VerbatimChar" /></w:rPr><w:t xml:space="preserve">## [1] 4.8</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="FirstParagraph" /></w:pPr><w:r><w:t xml:space="preserve">Which runner had the fastest speed?</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="SourceCode" /></w:pPr><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">name[</w:t></w:r><w:r><w:rPr><w:rStyle w:val="KeywordTok" /></w:rPr><w:t xml:space="preserve">which.max</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">(speed)]</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="SourceCode" /></w:pPr><w:r><w:rPr><w:rStyle w:val="VerbatimChar" /></w:rPr><w:t xml:space="preserve">## [1] &quot;Amy&quot;</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="Heading2" /></w:pPr><w:bookmarkStart w:id="64" w:name="section-3-overview" /><w:r><w:t xml:space="preserve">Section 3 Overview</w:t></w:r><w:bookmarkEnd w:id="64" /></w:p><w:p><w:pPr><w:pStyle w:val="FirstParagraph" /></w:pPr><w:r><w:t xml:space="preserve">Section 3 introduces to the R commands and techniques that help you wrangle, analyze, and visualize data.</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="BodyText" /></w:pPr><w:r><w:t xml:space="preserve">In Section 3.1, you will:</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="Compact" /><w:numPr><w:numId w:val="1061" /><w:ilvl w:val="0" /></w:numPr></w:pPr><w:r><w:t xml:space="preserve">Subset a vector based on properties of another vector.</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="Compact" /><w:numPr><w:numId w:val="1061" /><w:ilvl w:val="0" /></w:numPr></w:pPr><w:r><w:t xml:space="preserve">Use multiple logical operators to index vectors.</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="Compact" /><w:numPr><w:numId w:val="1061" /><w:ilvl w:val="0" /></w:numPr></w:pPr><w:r><w:t xml:space="preserve">Extract the indices of vector elements satisfying one or more logical conditions.</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="Compact" /><w:numPr><w:numId w:val="1061" /><w:ilvl w:val="0" /></w:numPr></w:pPr><w:r><w:t xml:space="preserve">Extract the indices of vector elements matching with another vector.</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="Compact" /><w:numPr><w:numId w:val="1061" /><w:ilvl w:val="0" /></w:numPr></w:pPr><w:r><w:t xml:space="preserve">Determine which elements in one vector are present in another vector.</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="FirstParagraph" /></w:pPr><w:r><w:t xml:space="preserve">In Section 3.2, you will:</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="Compact" /><w:numPr><w:numId w:val="1062" /><w:ilvl w:val="0" /></w:numPr></w:pPr><w:r><w:t xml:space="preserve">Wrangle data tables using the functions in</w:t></w:r><w:r><w:t xml:space="preserve"> </w:t></w:r><w:r><w:t xml:space="preserve">‘</w:t></w:r><w:r><w:t xml:space="preserve">dplyr</w:t></w:r><w:r><w:t xml:space="preserve">’</w:t></w:r><w:r><w:t xml:space="preserve"> </w:t></w:r><w:r><w:t xml:space="preserve">package.</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="Compact" /><w:numPr><w:numId w:val="1062" /><w:ilvl w:val="0" /></w:numPr></w:pPr><w:r><w:t xml:space="preserve">Modify a data table by adding or changing columns.</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="Compact" /><w:numPr><w:numId w:val="1062" /><w:ilvl w:val="0" /></w:numPr></w:pPr><w:r><w:t xml:space="preserve">Subset rows in a data table.</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="Compact" /><w:numPr><w:numId w:val="1062" /><w:ilvl w:val="0" /></w:numPr></w:pPr><w:r><w:t xml:space="preserve">Subset columns in a data table.</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="Compact" /><w:numPr><w:numId w:val="1062" /><w:ilvl w:val="0" /></w:numPr></w:pPr><w:r><w:t xml:space="preserve">Perform a series of operations using the pipe operator.</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="Compact" /><w:numPr><w:numId w:val="1062" /><w:ilvl w:val="0" /></w:numPr></w:pPr><w:r><w:t xml:space="preserve">Create data frames.</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="FirstParagraph" /></w:pPr><w:r><w:t xml:space="preserve">In Section 3.3, you will:</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="Compact" /><w:numPr><w:numId w:val="1063" /><w:ilvl w:val="0" /></w:numPr></w:pPr><w:r><w:t xml:space="preserve">Plot data in scatter plots, box plots and histograms.</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="Heading2" /></w:pPr><w:bookmarkStart w:id="65" w:name="indexing" /><w:r><w:t xml:space="preserve">Indexing</w:t></w:r><w:bookmarkEnd w:id="65" /></w:p><w:p><w:pPr><w:pStyle w:val="FirstParagraph" /></w:pPr><w:r><w:t xml:space="preserve">The textbook for this section is available</w:t></w:r><w:r><w:t xml:space="preserve"> </w:t></w:r><w:hyperlink r:id="rId66"><w:r><w:rPr><w:rStyle w:val="Hyperlink" /></w:rPr><w:t xml:space="preserve">here</w:t></w:r></w:hyperlink></w:p><w:p><w:pPr><w:pStyle w:val="BodyText" /></w:pPr><w:r><w:rPr><w:b /></w:rPr><w:t xml:space="preserve">Key Points</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="Compact" /><w:numPr><w:numId w:val="1064" /><w:ilvl w:val="0" /></w:numPr></w:pPr><w:r><w:t xml:space="preserve">We can use logicals to index vectors.</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="Compact" /><w:numPr><w:numId w:val="1064" /><w:ilvl w:val="0" /></w:numPr></w:pPr><w:r><w:t xml:space="preserve">Using the function &gt;sum()on a logical vector returns the number of entries that are true.</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="Compact" /><w:numPr><w:numId w:val="1064" /><w:ilvl w:val="0" /></w:numPr></w:pPr><w:r><w:t xml:space="preserve">The logical operator</w:t></w:r><w:r><w:t xml:space="preserve"> </w:t></w:r><w:r><w:t xml:space="preserve">“</w:t></w:r><w:r><w:t xml:space="preserve">&amp;</w:t></w:r><w:r><w:t xml:space="preserve">”</w:t></w:r><w:r><w:t xml:space="preserve"> </w:t></w:r><w:r><w:t xml:space="preserve">makes two logicals true only when they are both true.</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="FirstParagraph" /></w:pPr><w:r><w:rPr><w:i /></w:rPr><w:t xml:space="preserve">Code</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="SourceCode" /></w:pPr><w:r><w:rPr><w:rStyle w:val="CommentTok" /></w:rPr><w:t xml:space="preserve"># defining murder rate as before</w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">murder_rate &lt;-</w:t></w:r><w:r><w:rPr><w:rStyle w:val="StringTok" /></w:rPr><w:t xml:space="preserve"> </w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">murders</w:t></w:r><w:r><w:rPr><w:rStyle w:val="OperatorTok" /></w:rPr><w:t xml:space="preserve">$</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">total </w:t></w:r><w:r><w:rPr><w:rStyle w:val="OperatorTok" /></w:rPr><w:t xml:space="preserve">/</w:t></w:r><w:r><w:rPr><w:rStyle w:val="StringTok" /></w:rPr><w:t xml:space="preserve"> </w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">murders</w:t></w:r><w:r><w:rPr><w:rStyle w:val="OperatorTok" /></w:rPr><w:t xml:space="preserve">$</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">population </w:t></w:r><w:r><w:rPr><w:rStyle w:val="OperatorTok" /></w:rPr><w:t xml:space="preserve">*</w:t></w:r><w:r><w:rPr><w:rStyle w:val="StringTok" /></w:rPr><w:t xml:space="preserve"> </w:t></w:r><w:r><w:rPr><w:rStyle w:val="DecValTok" /></w:rPr><w:t xml:space="preserve">100000</w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="CommentTok" /></w:rPr><w:t xml:space="preserve"># creating a logical vector that specifies if the murder rate in that state is less than or equal to 0.71</w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">index &lt;-</w:t></w:r><w:r><w:rPr><w:rStyle w:val="StringTok" /></w:rPr><w:t xml:space="preserve"> </w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">murder_rate </w:t></w:r><w:r><w:rPr><w:rStyle w:val="OperatorTok" /></w:rPr><w:t xml:space="preserve">&lt;=</w:t></w:r><w:r><w:rPr><w:rStyle w:val="StringTok" /></w:rPr><w:t xml:space="preserve"> </w:t></w:r><w:r><w:rPr><w:rStyle w:val="FloatTok" /></w:rPr><w:t xml:space="preserve">0.71</w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="CommentTok" /></w:rPr><w:t xml:space="preserve"># determining which states have murder rates less than or equal to 0.71</w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">murders</w:t></w:r><w:r><w:rPr><w:rStyle w:val="OperatorTok" /></w:rPr><w:t xml:space="preserve">$</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">state[index]</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="SourceCode" /></w:pPr><w:r><w:rPr><w:rStyle w:val="VerbatimChar" /></w:rPr><w:t xml:space="preserve">## [1] &quot;Hawaii&quot;        &quot;Iowa&quot;          &quot;New Hampshire&quot; &quot;North Dakota&quot; </w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="VerbatimChar" /></w:rPr><w:t xml:space="preserve">## [5] &quot;Vermont&quot;</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="SourceCode" /></w:pPr><w:r><w:rPr><w:rStyle w:val="CommentTok" /></w:rPr><w:t xml:space="preserve"># calculating how many states have a murder rate less than or equal to 0.71</w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="KeywordTok" /></w:rPr><w:t xml:space="preserve">sum</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">(index)</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="SourceCode" /></w:pPr><w:r><w:rPr><w:rStyle w:val="VerbatimChar" /></w:rPr><w:t xml:space="preserve">## [1] 5</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="SourceCode" /></w:pPr><w:r><w:rPr><w:rStyle w:val="CommentTok" /></w:rPr><w:t xml:space="preserve"># creating the two logical vectors representing our conditions</w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">west &lt;-</w:t></w:r><w:r><w:rPr><w:rStyle w:val="StringTok" /></w:rPr><w:t xml:space="preserve"> </w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">murders</w:t></w:r><w:r><w:rPr><w:rStyle w:val="OperatorTok" /></w:rPr><w:t xml:space="preserve">$</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">region </w:t></w:r><w:r><w:rPr><w:rStyle w:val="OperatorTok" /></w:rPr><w:t xml:space="preserve">==</w:t></w:r><w:r><w:rPr><w:rStyle w:val="StringTok" /></w:rPr><w:t xml:space="preserve"> &quot;West&quot;</w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">safe &lt;-</w:t></w:r><w:r><w:rPr><w:rStyle w:val="StringTok" /></w:rPr><w:t xml:space="preserve"> </w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">murder_rate </w:t></w:r><w:r><w:rPr><w:rStyle w:val="OperatorTok" /></w:rPr><w:t xml:space="preserve">&lt;=</w:t></w:r><w:r><w:rPr><w:rStyle w:val="StringTok" /></w:rPr><w:t xml:space="preserve"> </w:t></w:r><w:r><w:rPr><w:rStyle w:val="DecValTok" /></w:rPr><w:t xml:space="preserve">1</w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="CommentTok" /></w:rPr><w:t xml:space="preserve"># defining an index and identifying states with both conditions true</w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">index &lt;-</w:t></w:r><w:r><w:rPr><w:rStyle w:val="StringTok" /></w:rPr><w:t xml:space="preserve"> </w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">safe </w:t></w:r><w:r><w:rPr><w:rStyle w:val="OperatorTok" /></w:rPr><w:t xml:space="preserve">&amp;</w:t></w:r><w:r><w:rPr><w:rStyle w:val="StringTok" /></w:rPr><w:t xml:space="preserve"> </w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">west</w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">murders</w:t></w:r><w:r><w:rPr><w:rStyle w:val="OperatorTok" /></w:rPr><w:t xml:space="preserve">$</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">state[index]</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="SourceCode" /></w:pPr><w:r><w:rPr><w:rStyle w:val="VerbatimChar" /></w:rPr><w:t xml:space="preserve">## [1] &quot;Hawaii&quot;  &quot;Idaho&quot;   &quot;Oregon&quot;  &quot;Utah&quot;    &quot;Wyoming&quot;</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="Heading2" /></w:pPr><w:bookmarkStart w:id="67" w:name="indexing---indexing-functions" /><w:r><w:t xml:space="preserve">Indexing - Indexing Functions</w:t></w:r><w:bookmarkEnd w:id="67" /></w:p><w:p><w:pPr><w:pStyle w:val="FirstParagraph" /></w:pPr><w:r><w:t xml:space="preserve">The textbook for this section is available</w:t></w:r><w:r><w:t xml:space="preserve"> </w:t></w:r><w:hyperlink r:id="rId68"><w:r><w:rPr><w:rStyle w:val="Hyperlink" /></w:rPr><w:t xml:space="preserve">here</w:t></w:r></w:hyperlink></w:p><w:p><w:pPr><w:pStyle w:val="BodyText" /></w:pPr><w:r><w:rPr><w:b /></w:rPr><w:t xml:space="preserve">Key Points</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="Compact" /><w:numPr><w:numId w:val="1065" /><w:ilvl w:val="0" /></w:numPr></w:pPr><w:r><w:t xml:space="preserve">The function which() gives us the entries of a logical vector that are true.</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="Compact" /><w:numPr><w:numId w:val="1065" /><w:ilvl w:val="0" /></w:numPr></w:pPr><w:r><w:t xml:space="preserve">The function match() looks for entries in a vector and returns the index needed to access them.</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="Compact" /><w:numPr><w:numId w:val="1065" /><w:ilvl w:val="0" /></w:numPr></w:pPr><w:r><w:t xml:space="preserve">We use the function %in% if we want to know whether or not each element of a first vector is in a second vector.</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="FirstParagraph" /></w:pPr><w:r><w:rPr><w:i /></w:rPr><w:t xml:space="preserve">Code</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="SourceCode" /></w:pPr><w:r><w:rPr><w:rStyle w:val="CommentTok" /></w:rPr><w:t xml:space="preserve"># to determine the murder rate in Massachusetts we may do the following</w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">ind &lt;-</w:t></w:r><w:r><w:rPr><w:rStyle w:val="StringTok" /></w:rPr><w:t xml:space="preserve"> </w:t></w:r><w:r><w:rPr><w:rStyle w:val="KeywordTok" /></w:rPr><w:t xml:space="preserve">which</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">(murders</w:t></w:r><w:r><w:rPr><w:rStyle w:val="OperatorTok" /></w:rPr><w:t xml:space="preserve">$</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">state </w:t></w:r><w:r><w:rPr><w:rStyle w:val="OperatorTok" /></w:rPr><w:t xml:space="preserve">==</w:t></w:r><w:r><w:rPr><w:rStyle w:val="StringTok" /></w:rPr><w:t xml:space="preserve"> &quot;Massachusetts&quot;</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">)</w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">murder_rate[ind]</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="SourceCode" /></w:pPr><w:r><w:rPr><w:rStyle w:val="VerbatimChar" /></w:rPr><w:t xml:space="preserve">## [1] 1.8</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="SourceCode" /></w:pPr><w:r><w:rPr><w:rStyle w:val="CommentTok" /></w:rPr><w:t xml:space="preserve"># to obtain the indices and subsequent murder rates of New York, Florida, Texas, we do:</w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">ind &lt;-</w:t></w:r><w:r><w:rPr><w:rStyle w:val="StringTok" /></w:rPr><w:t xml:space="preserve"> </w:t></w:r><w:r><w:rPr><w:rStyle w:val="KeywordTok" /></w:rPr><w:t xml:space="preserve">match</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">(</w:t></w:r><w:r><w:rPr><w:rStyle w:val="KeywordTok" /></w:rPr><w:t xml:space="preserve">c</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">(</w:t></w:r><w:r><w:rPr><w:rStyle w:val="StringTok" /></w:rPr><w:t xml:space="preserve">&quot;New York&quot;</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">, </w:t></w:r><w:r><w:rPr><w:rStyle w:val="StringTok" /></w:rPr><w:t xml:space="preserve">&quot;Florida&quot;</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">, </w:t></w:r><w:r><w:rPr><w:rStyle w:val="StringTok" /></w:rPr><w:t xml:space="preserve">&quot;Texas&quot;</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">), murders</w:t></w:r><w:r><w:rPr><w:rStyle w:val="OperatorTok" /></w:rPr><w:t xml:space="preserve">$</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">state)</w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">ind</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="SourceCode" /></w:pPr><w:r><w:rPr><w:rStyle w:val="VerbatimChar" /></w:rPr><w:t xml:space="preserve">## [1] 33 10 44</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="SourceCode" /></w:pPr><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">murder_rate[ind]</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="SourceCode" /></w:pPr><w:r><w:rPr><w:rStyle w:val="VerbatimChar" /></w:rPr><w:t xml:space="preserve">## [1] 2.67 3.40 3.20</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="SourceCode" /></w:pPr><w:r><w:rPr><w:rStyle w:val="CommentTok" /></w:rPr><w:t xml:space="preserve"># to see if Boston, Dakota, and Washington are states</w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="KeywordTok" /></w:rPr><w:t xml:space="preserve">c</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">(</w:t></w:r><w:r><w:rPr><w:rStyle w:val="StringTok" /></w:rPr><w:t xml:space="preserve">&quot;Boston&quot;</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">, </w:t></w:r><w:r><w:rPr><w:rStyle w:val="StringTok" /></w:rPr><w:t xml:space="preserve">&quot;Dakota&quot;</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">, </w:t></w:r><w:r><w:rPr><w:rStyle w:val="StringTok" /></w:rPr><w:t xml:space="preserve">&quot;Washington&quot;</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">) </w:t></w:r><w:r><w:rPr><w:rStyle w:val="OperatorTok" /></w:rPr><w:t xml:space="preserve">%in%</w:t></w:r><w:r><w:rPr><w:rStyle w:val="StringTok" /></w:rPr><w:t xml:space="preserve"> </w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">murders</w:t></w:r><w:r><w:rPr><w:rStyle w:val="OperatorTok" /></w:rPr><w:t xml:space="preserve">$</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">state</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="SourceCode" /></w:pPr><w:r><w:rPr><w:rStyle w:val="VerbatimChar" /></w:rPr><w:t xml:space="preserve">## [1] FALSE FALSE  TRUE</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="Heading2" /></w:pPr><w:bookmarkStart w:id="69" w:name="assessment---indexing" /><w:r><w:t xml:space="preserve">Assessment - Indexing</w:t></w:r><w:bookmarkEnd w:id="69" /></w:p><w:p><w:pPr><w:pStyle w:val="Compact" /><w:numPr><w:numId w:val="1066" /><w:ilvl w:val="0" /></w:numPr></w:pPr><w:r><w:t xml:space="preserve">Here we will be using logical operators to create a logical vector. Compute the per 100,000 murder rate for each state and store it in an object called</w:t></w:r><w:r><w:t xml:space="preserve"> </w:t></w:r><w:r><w:rPr><w:rStyle w:val="VerbatimChar" /></w:rPr><w:t xml:space="preserve">murder_rate</w:t></w:r><w:r><w:t xml:space="preserve">. Then use logical operators to create a logical vector named</w:t></w:r><w:r><w:t xml:space="preserve"> </w:t></w:r><w:r><w:rPr><w:rStyle w:val="VerbatimChar" /></w:rPr><w:t xml:space="preserve">low</w:t></w:r><w:r><w:t xml:space="preserve"> </w:t></w:r><w:r><w:t xml:space="preserve">that tells us which entries of</w:t></w:r><w:r><w:t xml:space="preserve"> </w:t></w:r><w:r><w:rPr><w:rStyle w:val="VerbatimChar" /></w:rPr><w:t xml:space="preserve">murder_rate</w:t></w:r><w:r><w:t xml:space="preserve"> </w:t></w:r><w:r><w:t xml:space="preserve">are lower than 1.</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="SourceCode" /></w:pPr><w:r><w:rPr><w:rStyle w:val="CommentTok" /></w:rPr><w:t xml:space="preserve"># Store the murder rate per 100,000 for each state, in `murder_rate`</w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">murder_rate &lt;-</w:t></w:r><w:r><w:rPr><w:rStyle w:val="StringTok" /></w:rPr><w:t xml:space="preserve"> </w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">murders</w:t></w:r><w:r><w:rPr><w:rStyle w:val="OperatorTok" /></w:rPr><w:t xml:space="preserve">$</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">total </w:t></w:r><w:r><w:rPr><w:rStyle w:val="OperatorTok" /></w:rPr><w:t xml:space="preserve">/</w:t></w:r><w:r><w:rPr><w:rStyle w:val="StringTok" /></w:rPr><w:t xml:space="preserve"> </w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">murders</w:t></w:r><w:r><w:rPr><w:rStyle w:val="OperatorTok" /></w:rPr><w:t xml:space="preserve">$</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">population </w:t></w:r><w:r><w:rPr><w:rStyle w:val="OperatorTok" /></w:rPr><w:t xml:space="preserve">*</w:t></w:r><w:r><w:rPr><w:rStyle w:val="StringTok" /></w:rPr><w:t xml:space="preserve"> </w:t></w:r><w:r><w:rPr><w:rStyle w:val="DecValTok" /></w:rPr><w:t xml:space="preserve">100000</w:t></w:r><w:r><w:br /></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="CommentTok" /></w:rPr><w:t xml:space="preserve"># Store the `murder_rate &lt; 1` in `low` </w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">low &lt;-</w:t></w:r><w:r><w:rPr><w:rStyle w:val="StringTok" /></w:rPr><w:t xml:space="preserve"> </w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">murder_rate </w:t></w:r><w:r><w:rPr><w:rStyle w:val="OperatorTok" /></w:rPr><w:t xml:space="preserve">&lt;</w:t></w:r><w:r><w:rPr><w:rStyle w:val="StringTok" /></w:rPr><w:t xml:space="preserve"> </w:t></w:r><w:r><w:rPr><w:rStyle w:val="DecValTok" /></w:rPr><w:t xml:space="preserve">1</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="Compact" /><w:numPr><w:numId w:val="1067" /><w:ilvl w:val="0" /></w:numPr></w:pPr><w:r><w:t xml:space="preserve">The function `</w:t></w:r><w:r><w:rPr><w:rStyle w:val="VerbatimChar" /></w:rPr><w:t xml:space="preserve">which()</w:t></w:r><w:r><w:t xml:space="preserve"> </w:t></w:r><w:r><w:t xml:space="preserve">helps us know directly, which values are low or high, etc. Let’s use it in this question.</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="SourceCode" /></w:pPr><w:r><w:rPr><w:rStyle w:val="CommentTok" /></w:rPr><w:t xml:space="preserve"># Store the murder rate per 100,000 for each state, in murder_rate</w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">murder_rate &lt;-</w:t></w:r><w:r><w:rPr><w:rStyle w:val="StringTok" /></w:rPr><w:t xml:space="preserve"> </w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">murders</w:t></w:r><w:r><w:rPr><w:rStyle w:val="OperatorTok" /></w:rPr><w:t xml:space="preserve">$</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">total</w:t></w:r><w:r><w:rPr><w:rStyle w:val="OperatorTok" /></w:rPr><w:t xml:space="preserve">/</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">murders</w:t></w:r><w:r><w:rPr><w:rStyle w:val="OperatorTok" /></w:rPr><w:t xml:space="preserve">$</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">population</w:t></w:r><w:r><w:rPr><w:rStyle w:val="OperatorTok" /></w:rPr><w:t xml:space="preserve">*</w:t></w:r><w:r><w:rPr><w:rStyle w:val="DecValTok" /></w:rPr><w:t xml:space="preserve">100000</w:t></w:r><w:r><w:br /></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="CommentTok" /></w:rPr><w:t xml:space="preserve"># Store the murder_rate &lt; 1 in low </w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">low &lt;-</w:t></w:r><w:r><w:rPr><w:rStyle w:val="StringTok" /></w:rPr><w:t xml:space="preserve"> </w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">murder_rate </w:t></w:r><w:r><w:rPr><w:rStyle w:val="OperatorTok" /></w:rPr><w:t xml:space="preserve">&lt;</w:t></w:r><w:r><w:rPr><w:rStyle w:val="StringTok" /></w:rPr><w:t xml:space="preserve"> </w:t></w:r><w:r><w:rPr><w:rStyle w:val="DecValTok" /></w:rPr><w:t xml:space="preserve">1</w:t></w:r><w:r><w:br /></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="CommentTok" /></w:rPr><w:t xml:space="preserve"># Get the indices of entries that are below 1</w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">ind &lt;-</w:t></w:r><w:r><w:rPr><w:rStyle w:val="StringTok" /></w:rPr><w:t xml:space="preserve"> </w:t></w:r><w:r><w:rPr><w:rStyle w:val="KeywordTok" /></w:rPr><w:t xml:space="preserve">which</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">(low)</w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">ind</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="SourceCode" /></w:pPr><w:r><w:rPr><w:rStyle w:val="VerbatimChar" /></w:rPr><w:t xml:space="preserve">##  [1] 12 13 16 20 24 30 35 38 42 45 46 51</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="Compact" /><w:numPr><w:numId w:val="1068" /><w:ilvl w:val="0" /></w:numPr></w:pPr><w:r><w:t xml:space="preserve">Note that if we want to know which entries of a vector are lower than a particular value we can use code like this.</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="SourceCode" /></w:pPr><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">small &lt;-</w:t></w:r><w:r><w:rPr><w:rStyle w:val="StringTok" /></w:rPr><w:t xml:space="preserve"> </w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">murders</w:t></w:r><w:r><w:rPr><w:rStyle w:val="OperatorTok" /></w:rPr><w:t xml:space="preserve">$</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">population </w:t></w:r><w:r><w:rPr><w:rStyle w:val="OperatorTok" /></w:rPr><w:t xml:space="preserve">&lt;</w:t></w:r><w:r><w:rPr><w:rStyle w:val="StringTok" /></w:rPr><w:t xml:space="preserve"> </w:t></w:r><w:r><w:rPr><w:rStyle w:val="DecValTok" /></w:rPr><w:t xml:space="preserve">1000000</w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">murders</w:t></w:r><w:r><w:rPr><w:rStyle w:val="OperatorTok" /></w:rPr><w:t xml:space="preserve">$</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">state[small]</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="FirstParagraph" /></w:pPr><w:r><w:t xml:space="preserve">The code above shows us the states with populations smaller than one million.</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="SourceCode" /></w:pPr><w:r><w:rPr><w:rStyle w:val="CommentTok" /></w:rPr><w:t xml:space="preserve"># Store the murder rate per 100,000 for each state, in murder_rate</w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">murder_rate &lt;-</w:t></w:r><w:r><w:rPr><w:rStyle w:val="StringTok" /></w:rPr><w:t xml:space="preserve"> </w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">murders</w:t></w:r><w:r><w:rPr><w:rStyle w:val="OperatorTok" /></w:rPr><w:t xml:space="preserve">$</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">total</w:t></w:r><w:r><w:rPr><w:rStyle w:val="OperatorTok" /></w:rPr><w:t xml:space="preserve">/</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">murders</w:t></w:r><w:r><w:rPr><w:rStyle w:val="OperatorTok" /></w:rPr><w:t xml:space="preserve">$</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">population</w:t></w:r><w:r><w:rPr><w:rStyle w:val="OperatorTok" /></w:rPr><w:t xml:space="preserve">*</w:t></w:r><w:r><w:rPr><w:rStyle w:val="DecValTok" /></w:rPr><w:t xml:space="preserve">100000</w:t></w:r><w:r><w:br /></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="CommentTok" /></w:rPr><w:t xml:space="preserve"># Store the murder_rate &lt; 1 in low </w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">low &lt;-</w:t></w:r><w:r><w:rPr><w:rStyle w:val="StringTok" /></w:rPr><w:t xml:space="preserve"> </w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">murder_rate </w:t></w:r><w:r><w:rPr><w:rStyle w:val="OperatorTok" /></w:rPr><w:t xml:space="preserve">&lt;</w:t></w:r><w:r><w:rPr><w:rStyle w:val="StringTok" /></w:rPr><w:t xml:space="preserve"> </w:t></w:r><w:r><w:rPr><w:rStyle w:val="DecValTok" /></w:rPr><w:t xml:space="preserve">1</w:t></w:r><w:r><w:br /></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="CommentTok" /></w:rPr><w:t xml:space="preserve"># Names of states with murder rates lower than 1</w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">murders</w:t></w:r><w:r><w:rPr><w:rStyle w:val="OperatorTok" /></w:rPr><w:t xml:space="preserve">$</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">state[low]</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="SourceCode" /></w:pPr><w:r><w:rPr><w:rStyle w:val="VerbatimChar" /></w:rPr><w:t xml:space="preserve">##  [1] &quot;Hawaii&quot;        &quot;Idaho&quot;         &quot;Iowa&quot;          &quot;Maine&quot;        </w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="VerbatimChar" /></w:rPr><w:t xml:space="preserve">##  [5] &quot;Minnesota&quot;     &quot;New Hampshire&quot; &quot;North Dakota&quot;  &quot;Oregon&quot;       </w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="VerbatimChar" /></w:rPr><w:t xml:space="preserve">##  [9] &quot;South Dakota&quot;  &quot;Utah&quot;          &quot;Vermont&quot;       &quot;Wyoming&quot;</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="Compact" /><w:numPr><w:numId w:val="1069" /><w:ilvl w:val="0" /></w:numPr></w:pPr><w:r><w:t xml:space="preserve">Now we will extend the code from the previous exercises to report the states in the Northeast with a murder rate lower than 1.</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="SourceCode" /></w:pPr><w:r><w:rPr><w:rStyle w:val="CommentTok" /></w:rPr><w:t xml:space="preserve"># Store the murder rate per 100,000 for each state, in `murder_rate`</w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">murder_rate &lt;-</w:t></w:r><w:r><w:rPr><w:rStyle w:val="StringTok" /></w:rPr><w:t xml:space="preserve"> </w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">murders</w:t></w:r><w:r><w:rPr><w:rStyle w:val="OperatorTok" /></w:rPr><w:t xml:space="preserve">$</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">total</w:t></w:r><w:r><w:rPr><w:rStyle w:val="OperatorTok" /></w:rPr><w:t xml:space="preserve">/</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">murders</w:t></w:r><w:r><w:rPr><w:rStyle w:val="OperatorTok" /></w:rPr><w:t xml:space="preserve">$</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">population</w:t></w:r><w:r><w:rPr><w:rStyle w:val="OperatorTok" /></w:rPr><w:t xml:space="preserve">*</w:t></w:r><w:r><w:rPr><w:rStyle w:val="DecValTok" /></w:rPr><w:t xml:space="preserve">100000</w:t></w:r><w:r><w:br /></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="CommentTok" /></w:rPr><w:t xml:space="preserve"># Store the `murder_rate &lt; 1` in `low` </w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">low &lt;-</w:t></w:r><w:r><w:rPr><w:rStyle w:val="StringTok" /></w:rPr><w:t xml:space="preserve"> </w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">murder_rate </w:t></w:r><w:r><w:rPr><w:rStyle w:val="OperatorTok" /></w:rPr><w:t xml:space="preserve">&lt;</w:t></w:r><w:r><w:rPr><w:rStyle w:val="StringTok" /></w:rPr><w:t xml:space="preserve"> </w:t></w:r><w:r><w:rPr><w:rStyle w:val="DecValTok" /></w:rPr><w:t xml:space="preserve">1</w:t></w:r><w:r><w:br /></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="CommentTok" /></w:rPr><w:t xml:space="preserve"># Create a vector ind for states in the Northeast and with murder rates lower than 1. </w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">northeast &lt;-</w:t></w:r><w:r><w:rPr><w:rStyle w:val="StringTok" /></w:rPr><w:t xml:space="preserve"> </w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">murders</w:t></w:r><w:r><w:rPr><w:rStyle w:val="OperatorTok" /></w:rPr><w:t xml:space="preserve">$</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">region </w:t></w:r><w:r><w:rPr><w:rStyle w:val="OperatorTok" /></w:rPr><w:t xml:space="preserve">==</w:t></w:r><w:r><w:rPr><w:rStyle w:val="StringTok" /></w:rPr><w:t xml:space="preserve"> &quot;Northeast&quot;</w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">ind &lt;-</w:t></w:r><w:r><w:rPr><w:rStyle w:val="StringTok" /></w:rPr><w:t xml:space="preserve"> </w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">low </w:t></w:r><w:r><w:rPr><w:rStyle w:val="OperatorTok" /></w:rPr><w:t xml:space="preserve">&amp;</w:t></w:r><w:r><w:rPr><w:rStyle w:val="StringTok" /></w:rPr><w:t xml:space="preserve"> </w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">northeast</w:t></w:r><w:r><w:br /></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="CommentTok" /></w:rPr><w:t xml:space="preserve"># Names of states in `ind` </w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">murders</w:t></w:r><w:r><w:rPr><w:rStyle w:val="OperatorTok" /></w:rPr><w:t xml:space="preserve">$</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">state[ind]</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="SourceCode" /></w:pPr><w:r><w:rPr><w:rStyle w:val="VerbatimChar" /></w:rPr><w:t xml:space="preserve">## [1] &quot;Maine&quot;         &quot;New Hampshire&quot; &quot;Vermont&quot;</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="Compact" /><w:numPr><w:numId w:val="1070" /><w:ilvl w:val="0" /></w:numPr></w:pPr><w:r><w:t xml:space="preserve">In a previous exercise we computed the murder rate for each state and the average of these numbers. How many states are below the average?</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="SourceCode" /></w:pPr><w:r><w:rPr><w:rStyle w:val="CommentTok" /></w:rPr><w:t xml:space="preserve"># Store the murder rate per 100,000 for each state, in murder_rate</w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">murder_rate &lt;-</w:t></w:r><w:r><w:rPr><w:rStyle w:val="StringTok" /></w:rPr><w:t xml:space="preserve"> </w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">murders</w:t></w:r><w:r><w:rPr><w:rStyle w:val="OperatorTok" /></w:rPr><w:t xml:space="preserve">$</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">total</w:t></w:r><w:r><w:rPr><w:rStyle w:val="OperatorTok" /></w:rPr><w:t xml:space="preserve">/</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">murders</w:t></w:r><w:r><w:rPr><w:rStyle w:val="OperatorTok" /></w:rPr><w:t xml:space="preserve">$</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">population</w:t></w:r><w:r><w:rPr><w:rStyle w:val="OperatorTok" /></w:rPr><w:t xml:space="preserve">*</w:t></w:r><w:r><w:rPr><w:rStyle w:val="DecValTok" /></w:rPr><w:t xml:space="preserve">100000</w:t></w:r><w:r><w:br /></w:r><w:r><w:br /></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="CommentTok" /></w:rPr><w:t xml:space="preserve"># Compute the average murder rate using `mean` and store it in object named `avg`</w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">avg &lt;-</w:t></w:r><w:r><w:rPr><w:rStyle w:val="StringTok" /></w:rPr><w:t xml:space="preserve"> </w:t></w:r><w:r><w:rPr><w:rStyle w:val="KeywordTok" /></w:rPr><w:t xml:space="preserve">mean</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">(murder_rate)</w:t></w:r><w:r><w:br /></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="CommentTok" /></w:rPr><w:t xml:space="preserve"># How many states have murder rates below avg ? Check using sum </w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">ind &lt;-</w:t></w:r><w:r><w:rPr><w:rStyle w:val="StringTok" /></w:rPr><w:t xml:space="preserve"> </w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">murder_rate </w:t></w:r><w:r><w:rPr><w:rStyle w:val="OperatorTok" /></w:rPr><w:t xml:space="preserve">&lt;</w:t></w:r><w:r><w:rPr><w:rStyle w:val="StringTok" /></w:rPr><w:t xml:space="preserve"> </w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">avg</w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="KeywordTok" /></w:rPr><w:t xml:space="preserve">sum</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">(ind)</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="SourceCode" /></w:pPr><w:r><w:rPr><w:rStyle w:val="VerbatimChar" /></w:rPr><w:t xml:space="preserve">## [1] 27</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="Compact" /><w:numPr><w:numId w:val="1071" /><w:ilvl w:val="0" /></w:numPr></w:pPr><w:r><w:t xml:space="preserve">In this exercise we use the</w:t></w:r><w:r><w:t xml:space="preserve"> </w:t></w:r><w:r><w:rPr><w:rStyle w:val="VerbatimChar" /></w:rPr><w:t xml:space="preserve">match</w:t></w:r><w:r><w:t xml:space="preserve"> </w:t></w:r><w:r><w:t xml:space="preserve">function to identify the states with abbreviations AK, MI, and IA.</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="SourceCode" /></w:pPr><w:r><w:rPr><w:rStyle w:val="CommentTok" /></w:rPr><w:t xml:space="preserve"># Store the 3 abbreviations in a vector called `abbs` (remember that they are character vectors and need quotes)</w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">abbs &lt;-</w:t></w:r><w:r><w:rPr><w:rStyle w:val="StringTok" /></w:rPr><w:t xml:space="preserve"> </w:t></w:r><w:r><w:rPr><w:rStyle w:val="KeywordTok" /></w:rPr><w:t xml:space="preserve">c</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">(</w:t></w:r><w:r><w:rPr><w:rStyle w:val="StringTok" /></w:rPr><w:t xml:space="preserve">&quot;AK&quot;</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">, </w:t></w:r><w:r><w:rPr><w:rStyle w:val="StringTok" /></w:rPr><w:t xml:space="preserve">&quot;MI&quot;</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">, </w:t></w:r><w:r><w:rPr><w:rStyle w:val="StringTok" /></w:rPr><w:t xml:space="preserve">&quot;IA&quot;</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">)</w:t></w:r><w:r><w:br /></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="CommentTok" /></w:rPr><w:t xml:space="preserve"># Match the abbs to the murders$abb and store in ind</w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">ind &lt;-</w:t></w:r><w:r><w:rPr><w:rStyle w:val="StringTok" /></w:rPr><w:t xml:space="preserve"> </w:t></w:r><w:r><w:rPr><w:rStyle w:val="KeywordTok" /></w:rPr><w:t xml:space="preserve">match</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">(abbs, murders</w:t></w:r><w:r><w:rPr><w:rStyle w:val="OperatorTok" /></w:rPr><w:t xml:space="preserve">$</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">abb)</w:t></w:r><w:r><w:br /></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="CommentTok" /></w:rPr><w:t xml:space="preserve"># Print state names from ind</w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">murders</w:t></w:r><w:r><w:rPr><w:rStyle w:val="OperatorTok" /></w:rPr><w:t xml:space="preserve">$</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">state[ind]</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="SourceCode" /></w:pPr><w:r><w:rPr><w:rStyle w:val="VerbatimChar" /></w:rPr><w:t xml:space="preserve">## [1] &quot;Alaska&quot;   &quot;Michigan&quot; &quot;Iowa&quot;</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="Compact" /><w:numPr><w:numId w:val="1072" /><w:ilvl w:val="0" /></w:numPr></w:pPr><w:r><w:t xml:space="preserve">If rather than an index we want a logical that tells us whether or not each element of a first vector is in a second, we can use the function</w:t></w:r><w:r><w:t xml:space="preserve"> </w:t></w:r><w:r><w:rPr><w:rStyle w:val="VerbatimChar" /></w:rPr><w:t xml:space="preserve">%in%</w:t></w:r><w:r><w:t xml:space="preserve">.</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="FirstParagraph" /></w:pPr><w:r><w:t xml:space="preserve">For example:</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="SourceCode" /></w:pPr><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">x &lt;-</w:t></w:r><w:r><w:rPr><w:rStyle w:val="StringTok" /></w:rPr><w:t xml:space="preserve"> </w:t></w:r><w:r><w:rPr><w:rStyle w:val="KeywordTok" /></w:rPr><w:t xml:space="preserve">c</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">(</w:t></w:r><w:r><w:rPr><w:rStyle w:val="DecValTok" /></w:rPr><w:t xml:space="preserve">2</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">, </w:t></w:r><w:r><w:rPr><w:rStyle w:val="DecValTok" /></w:rPr><w:t xml:space="preserve">3</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">, </w:t></w:r><w:r><w:rPr><w:rStyle w:val="DecValTok" /></w:rPr><w:t xml:space="preserve">5</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">)</w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">y &lt;-</w:t></w:r><w:r><w:rPr><w:rStyle w:val="StringTok" /></w:rPr><w:t xml:space="preserve"> </w:t></w:r><w:r><w:rPr><w:rStyle w:val="KeywordTok" /></w:rPr><w:t xml:space="preserve">c</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">(</w:t></w:r><w:r><w:rPr><w:rStyle w:val="DecValTok" /></w:rPr><w:t xml:space="preserve">1</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">, </w:t></w:r><w:r><w:rPr><w:rStyle w:val="DecValTok" /></w:rPr><w:t xml:space="preserve">2</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">, </w:t></w:r><w:r><w:rPr><w:rStyle w:val="DecValTok" /></w:rPr><w:t xml:space="preserve">3</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">, </w:t></w:r><w:r><w:rPr><w:rStyle w:val="DecValTok" /></w:rPr><w:t xml:space="preserve">4</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">)</w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">x</w:t></w:r><w:r><w:rPr><w:rStyle w:val="OperatorTok" /></w:rPr><w:t xml:space="preserve">%in%</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">y</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="FirstParagraph" /></w:pPr><w:r><w:t xml:space="preserve">Gives us two</w:t></w:r><w:r><w:t xml:space="preserve"> </w:t></w:r><w:r><w:rPr><w:rStyle w:val="VerbatimChar" /></w:rPr><w:t xml:space="preserve">TRUE</w:t></w:r><w:r><w:t xml:space="preserve"> </w:t></w:r><w:r><w:t xml:space="preserve">followed by a</w:t></w:r><w:r><w:t xml:space="preserve"> </w:t></w:r><w:r><w:rPr><w:rStyle w:val="VerbatimChar" /></w:rPr><w:t xml:space="preserve">FALSE</w:t></w:r><w:r><w:t xml:space="preserve"> </w:t></w:r><w:r><w:t xml:space="preserve">because 2 and 3 are in</w:t></w:r><w:r><w:t xml:space="preserve"> </w:t></w:r><w:r><w:rPr><w:rStyle w:val="VerbatimChar" /></w:rPr><w:t xml:space="preserve">y</w:t></w:r><w:r><w:t xml:space="preserve"> </w:t></w:r><w:r><w:t xml:space="preserve">but 5 is not.</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="SourceCode" /></w:pPr><w:r><w:rPr><w:rStyle w:val="CommentTok" /></w:rPr><w:t xml:space="preserve"># Store the 5 abbreviations in `abbs`. (remember that they are character vectors)</w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">abbs &lt;-</w:t></w:r><w:r><w:rPr><w:rStyle w:val="StringTok" /></w:rPr><w:t xml:space="preserve"> </w:t></w:r><w:r><w:rPr><w:rStyle w:val="KeywordTok" /></w:rPr><w:t xml:space="preserve">c</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">(</w:t></w:r><w:r><w:rPr><w:rStyle w:val="StringTok" /></w:rPr><w:t xml:space="preserve">&quot;MA&quot;</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">, </w:t></w:r><w:r><w:rPr><w:rStyle w:val="StringTok" /></w:rPr><w:t xml:space="preserve">&quot;ME&quot;</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">, </w:t></w:r><w:r><w:rPr><w:rStyle w:val="StringTok" /></w:rPr><w:t xml:space="preserve">&quot;MI&quot;</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">, </w:t></w:r><w:r><w:rPr><w:rStyle w:val="StringTok" /></w:rPr><w:t xml:space="preserve">&quot;MO&quot;</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">, </w:t></w:r><w:r><w:rPr><w:rStyle w:val="StringTok" /></w:rPr><w:t xml:space="preserve">&quot;MU&quot;</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">)</w:t></w:r><w:r><w:br /></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="CommentTok" /></w:rPr><w:t xml:space="preserve"># Use the %in% command to check if the entries of abbs are abbreviations in the the murders data frame</w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">abbs</w:t></w:r><w:r><w:rPr><w:rStyle w:val="OperatorTok" /></w:rPr><w:t xml:space="preserve">%in%</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">murders</w:t></w:r><w:r><w:rPr><w:rStyle w:val="OperatorTok" /></w:rPr><w:t xml:space="preserve">$</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">abb</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="SourceCode" /></w:pPr><w:r><w:rPr><w:rStyle w:val="VerbatimChar" /></w:rPr><w:t xml:space="preserve">## [1]  TRUE  TRUE  TRUE  TRUE FALSE</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="Compact" /><w:numPr><w:numId w:val="1073" /><w:ilvl w:val="0" /></w:numPr></w:pPr><w:r><w:t xml:space="preserve">In a previous exercise we computed the index</w:t></w:r><w:r><w:t xml:space="preserve"> </w:t></w:r><w:r><w:rPr><w:rStyle w:val="VerbatimChar" /></w:rPr><w:t xml:space="preserve">abbs%in%murders$abb</w:t></w:r><w:r><w:t xml:space="preserve">. Based on that, and using the</w:t></w:r><w:r><w:t xml:space="preserve"> </w:t></w:r><w:r><w:rPr><w:rStyle w:val="VerbatimChar" /></w:rPr><w:t xml:space="preserve">which</w:t></w:r><w:r><w:t xml:space="preserve"> </w:t></w:r><w:r><w:t xml:space="preserve">function and the</w:t></w:r><w:r><w:t xml:space="preserve"> </w:t></w:r><w:r><w:rPr><w:rStyle w:val="VerbatimChar" /></w:rPr><w:t xml:space="preserve">!</w:t></w:r><w:r><w:t xml:space="preserve"> </w:t></w:r><w:r><w:t xml:space="preserve">operator, get the index of the entries of</w:t></w:r><w:r><w:t xml:space="preserve"> </w:t></w:r><w:r><w:rPr><w:rStyle w:val="VerbatimChar" /></w:rPr><w:t xml:space="preserve">abbs</w:t></w:r><w:r><w:t xml:space="preserve"> </w:t></w:r><w:r><w:t xml:space="preserve">that are</w:t></w:r><w:r><w:t xml:space="preserve"> </w:t></w:r><w:r><w:rPr><w:b /></w:rPr><w:t xml:space="preserve">not</w:t></w:r><w:r><w:t xml:space="preserve"> </w:t></w:r><w:r><w:t xml:space="preserve">abbreviations.</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="SourceCode" /></w:pPr><w:r><w:rPr><w:rStyle w:val="CommentTok" /></w:rPr><w:t xml:space="preserve"># Store the 5 abbreviations in abbs. (remember that they are character vectors)</w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">abbs &lt;-</w:t></w:r><w:r><w:rPr><w:rStyle w:val="StringTok" /></w:rPr><w:t xml:space="preserve"> </w:t></w:r><w:r><w:rPr><w:rStyle w:val="KeywordTok" /></w:rPr><w:t xml:space="preserve">c</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">(</w:t></w:r><w:r><w:rPr><w:rStyle w:val="StringTok" /></w:rPr><w:t xml:space="preserve">&quot;MA&quot;</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">, </w:t></w:r><w:r><w:rPr><w:rStyle w:val="StringTok" /></w:rPr><w:t xml:space="preserve">&quot;ME&quot;</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">, </w:t></w:r><w:r><w:rPr><w:rStyle w:val="StringTok" /></w:rPr><w:t xml:space="preserve">&quot;MI&quot;</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">, </w:t></w:r><w:r><w:rPr><w:rStyle w:val="StringTok" /></w:rPr><w:t xml:space="preserve">&quot;MO&quot;</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">, </w:t></w:r><w:r><w:rPr><w:rStyle w:val="StringTok" /></w:rPr><w:t xml:space="preserve">&quot;MU&quot;</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">) </w:t></w:r><w:r><w:br /></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="CommentTok" /></w:rPr><w:t xml:space="preserve"># Use the `which` command and `!` operator to find out which index abbreviations are not actually part of the dataset and store in `ind`</w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">ind &lt;-</w:t></w:r><w:r><w:rPr><w:rStyle w:val="StringTok" /></w:rPr><w:t xml:space="preserve"> </w:t></w:r><w:r><w:rPr><w:rStyle w:val="KeywordTok" /></w:rPr><w:t xml:space="preserve">which</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">(</w:t></w:r><w:r><w:rPr><w:rStyle w:val="OperatorTok" /></w:rPr><w:t xml:space="preserve">!</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">abbs</w:t></w:r><w:r><w:rPr><w:rStyle w:val="OperatorTok" /></w:rPr><w:t xml:space="preserve">%in%</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">murders</w:t></w:r><w:r><w:rPr><w:rStyle w:val="OperatorTok" /></w:rPr><w:t xml:space="preserve">$</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">abb)</w:t></w:r><w:r><w:br /></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="CommentTok" /></w:rPr><w:t xml:space="preserve"># Names of abbreviations in `ind`</w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">abbs[ind]</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="SourceCode" /></w:pPr><w:r><w:rPr><w:rStyle w:val="VerbatimChar" /></w:rPr><w:t xml:space="preserve">## [1] &quot;MU&quot;</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="Heading2" /></w:pPr><w:bookmarkStart w:id="70" w:name="basic-data-wrangling" /><w:r><w:t xml:space="preserve">Basic Data Wrangling</w:t></w:r><w:bookmarkEnd w:id="70" /></w:p><w:p><w:pPr><w:pStyle w:val="FirstParagraph" /></w:pPr><w:r><w:t xml:space="preserve">The textbook for this section is available</w:t></w:r><w:r><w:t xml:space="preserve"> </w:t></w:r><w:hyperlink r:id="rId71"><w:r><w:rPr><w:rStyle w:val="Hyperlink" /></w:rPr><w:t xml:space="preserve">here</w:t></w:r></w:hyperlink><w:r><w:t xml:space="preserve"> </w:t></w:r><w:r><w:t xml:space="preserve">and</w:t></w:r><w:r><w:t xml:space="preserve"> </w:t></w:r><w:hyperlink r:id="rId72"><w:r><w:rPr><w:rStyle w:val="Hyperlink" /></w:rPr><w:t xml:space="preserve">here</w:t></w:r></w:hyperlink></w:p><w:p><w:pPr><w:pStyle w:val="BodyText" /></w:pPr><w:r><w:t xml:space="preserve">In the textbook, the dplyr package is introduced in the context of the tidyverse, a collection of R packages</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="BodyText" /></w:pPr><w:r><w:rPr><w:b /></w:rPr><w:t xml:space="preserve">Key Points</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="Compact" /><w:numPr><w:numId w:val="1074" /><w:ilvl w:val="0" /></w:numPr></w:pPr><w:r><w:t xml:space="preserve">To change a data table by adding a new column, or changing an existing one, we use the</w:t></w:r><w:r><w:t xml:space="preserve"> </w:t></w:r><w:r><w:rPr><w:rStyle w:val="VerbatimChar" /></w:rPr><w:t xml:space="preserve">mutate</w:t></w:r><w:r><w:t xml:space="preserve"> </w:t></w:r><w:r><w:t xml:space="preserve">function.</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="Compact" /><w:numPr><w:numId w:val="1074" /><w:ilvl w:val="0" /></w:numPr></w:pPr><w:r><w:t xml:space="preserve">To filter the data by subsetting rows, we use the function</w:t></w:r><w:r><w:t xml:space="preserve"> </w:t></w:r><w:r><w:rPr><w:rStyle w:val="VerbatimChar" /></w:rPr><w:t xml:space="preserve">filter</w:t></w:r><w:r><w:t xml:space="preserve">.</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="Compact" /><w:numPr><w:numId w:val="1074" /><w:ilvl w:val="0" /></w:numPr></w:pPr><w:r><w:t xml:space="preserve">To subset the data by selecting specific columns, we use the</w:t></w:r><w:r><w:t xml:space="preserve"> </w:t></w:r><w:r><w:rPr><w:rStyle w:val="VerbatimChar" /></w:rPr><w:t xml:space="preserve">select</w:t></w:r><w:r><w:t xml:space="preserve"> </w:t></w:r><w:r><w:t xml:space="preserve">function.</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="Compact" /><w:numPr><w:numId w:val="1074" /><w:ilvl w:val="0" /></w:numPr></w:pPr><w:r><w:t xml:space="preserve">We can perform a series of operations by sending the results of one function to another function using what is called the pipe operator,</w:t></w:r><w:r><w:t xml:space="preserve"> </w:t></w:r><w:r><w:rPr><w:rStyle w:val="VerbatimChar" /></w:rPr><w:t xml:space="preserve">%&gt;%</w:t></w:r><w:r><w:t xml:space="preserve">.</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="FirstParagraph" /></w:pPr><w:r><w:rPr><w:i /></w:rPr><w:t xml:space="preserve">Code</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="SourceCode" /></w:pPr><w:r><w:rPr><w:rStyle w:val="CommentTok" /></w:rPr><w:t xml:space="preserve"># installing and loading the dplyr package</w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="ControlFlowTok" /></w:rPr><w:t xml:space="preserve">if</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">(</w:t></w:r><w:r><w:rPr><w:rStyle w:val="OperatorTok" /></w:rPr><w:t xml:space="preserve">!</w:t></w:r><w:r><w:rPr><w:rStyle w:val="KeywordTok" /></w:rPr><w:t xml:space="preserve">require</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">(dplyr)) </w:t></w:r><w:r><w:rPr><w:rStyle w:val="KeywordTok" /></w:rPr><w:t xml:space="preserve">install.packages</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">(</w:t></w:r><w:r><w:rPr><w:rStyle w:val="StringTok" /></w:rPr><w:t xml:space="preserve">&quot;dplyr&quot;</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">)</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="SourceCode" /></w:pPr><w:r><w:rPr><w:rStyle w:val="VerbatimChar" /></w:rPr><w:t xml:space="preserve">## Loading required package: dplyr</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="SourceCode" /></w:pPr><w:r><w:rPr><w:rStyle w:val="VerbatimChar" /></w:rPr><w:t xml:space="preserve">## </w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="VerbatimChar" /></w:rPr><w:t xml:space="preserve">## Attaching package: &#39;dplyr&#39;</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="SourceCode" /></w:pPr><w:r><w:rPr><w:rStyle w:val="VerbatimChar" /></w:rPr><w:t xml:space="preserve">## The following objects are masked from &#39;package:stats&#39;:</w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="VerbatimChar" /></w:rPr><w:t xml:space="preserve">## </w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="VerbatimChar" /></w:rPr><w:t xml:space="preserve">##     filter, lag</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="SourceCode" /></w:pPr><w:r><w:rPr><w:rStyle w:val="VerbatimChar" /></w:rPr><w:t xml:space="preserve">## The following objects are masked from &#39;package:base&#39;:</w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="VerbatimChar" /></w:rPr><w:t xml:space="preserve">## </w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="VerbatimChar" /></w:rPr><w:t xml:space="preserve">##     intersect, setdiff, setequal, union</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="SourceCode" /></w:pPr><w:r><w:rPr><w:rStyle w:val="KeywordTok" /></w:rPr><w:t xml:space="preserve">library</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">(dplyr)</w:t></w:r><w:r><w:br /></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="CommentTok" /></w:rPr><w:t xml:space="preserve"># adding a column with mutate</w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="KeywordTok" /></w:rPr><w:t xml:space="preserve">library</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">(dslabs)</w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="KeywordTok" /></w:rPr><w:t xml:space="preserve">data</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">(</w:t></w:r><w:r><w:rPr><w:rStyle w:val="StringTok" /></w:rPr><w:t xml:space="preserve">&quot;murders&quot;</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">)</w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">murders &lt;-</w:t></w:r><w:r><w:rPr><w:rStyle w:val="StringTok" /></w:rPr><w:t xml:space="preserve"> </w:t></w:r><w:r><w:rPr><w:rStyle w:val="KeywordTok" /></w:rPr><w:t xml:space="preserve">mutate</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">(murders, </w:t></w:r><w:r><w:rPr><w:rStyle w:val="DataTypeTok" /></w:rPr><w:t xml:space="preserve">rate =</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve"> total </w:t></w:r><w:r><w:rPr><w:rStyle w:val="OperatorTok" /></w:rPr><w:t xml:space="preserve">/</w:t></w:r><w:r><w:rPr><w:rStyle w:val="StringTok" /></w:rPr><w:t xml:space="preserve"> </w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">population </w:t></w:r><w:r><w:rPr><w:rStyle w:val="OperatorTok" /></w:rPr><w:t xml:space="preserve">*</w:t></w:r><w:r><w:rPr><w:rStyle w:val="StringTok" /></w:rPr><w:t xml:space="preserve"> </w:t></w:r><w:r><w:rPr><w:rStyle w:val="DecValTok" /></w:rPr><w:t xml:space="preserve">100000</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">)</w:t></w:r><w:r><w:br /></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="CommentTok" /></w:rPr><w:t xml:space="preserve"># subsetting with filter</w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="KeywordTok" /></w:rPr><w:t xml:space="preserve">filter</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">(murders, rate </w:t></w:r><w:r><w:rPr><w:rStyle w:val="OperatorTok" /></w:rPr><w:t xml:space="preserve">&lt;=</w:t></w:r><w:r><w:rPr><w:rStyle w:val="StringTok" /></w:rPr><w:t xml:space="preserve"> </w:t></w:r><w:r><w:rPr><w:rStyle w:val="FloatTok" /></w:rPr><w:t xml:space="preserve">0.71</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">)</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="SourceCode" /></w:pPr><w:r><w:rPr><w:rStyle w:val="VerbatimChar" /></w:rPr><w:t xml:space="preserve">##           state abb        region population total  rate</w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="VerbatimChar" /></w:rPr><w:t xml:space="preserve">## 1        Hawaii  HI          West    1360301     7 0.515</w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="VerbatimChar" /></w:rPr><w:t xml:space="preserve">## 2          Iowa  IA North Central    3046355    21 0.689</w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="VerbatimChar" /></w:rPr><w:t xml:space="preserve">## 3 New Hampshire  NH     Northeast    1316470     5 0.380</w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="VerbatimChar" /></w:rPr><w:t xml:space="preserve">## 4  North Dakota  ND North Central     672591     4 0.595</w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="VerbatimChar" /></w:rPr><w:t xml:space="preserve">## 5       Vermont  VT     Northeast     625741     2 0.320</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="SourceCode" /></w:pPr><w:r><w:rPr><w:rStyle w:val="CommentTok" /></w:rPr><w:t xml:space="preserve"># selecting columns with select</w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">new_table &lt;-</w:t></w:r><w:r><w:rPr><w:rStyle w:val="StringTok" /></w:rPr><w:t xml:space="preserve"> </w:t></w:r><w:r><w:rPr><w:rStyle w:val="KeywordTok" /></w:rPr><w:t xml:space="preserve">select</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">(murders, state, region, rate)</w:t></w:r><w:r><w:br /></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="CommentTok" /></w:rPr><w:t xml:space="preserve"># using the pipe</w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">murders </w:t></w:r><w:r><w:rPr><w:rStyle w:val="OperatorTok" /></w:rPr><w:t xml:space="preserve">%&gt;%</w:t></w:r><w:r><w:rPr><w:rStyle w:val="StringTok" /></w:rPr><w:t xml:space="preserve"> </w:t></w:r><w:r><w:rPr><w:rStyle w:val="KeywordTok" /></w:rPr><w:t xml:space="preserve">select</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">(state, region, rate) </w:t></w:r><w:r><w:rPr><w:rStyle w:val="OperatorTok" /></w:rPr><w:t xml:space="preserve">%&gt;%</w:t></w:r><w:r><w:rPr><w:rStyle w:val="StringTok" /></w:rPr><w:t xml:space="preserve"> </w:t></w:r><w:r><w:rPr><w:rStyle w:val="KeywordTok" /></w:rPr><w:t xml:space="preserve">filter</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">(rate </w:t></w:r><w:r><w:rPr><w:rStyle w:val="OperatorTok" /></w:rPr><w:t xml:space="preserve">&lt;=</w:t></w:r><w:r><w:rPr><w:rStyle w:val="StringTok" /></w:rPr><w:t xml:space="preserve"> </w:t></w:r><w:r><w:rPr><w:rStyle w:val="FloatTok" /></w:rPr><w:t xml:space="preserve">0.71</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">)</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="SourceCode" /></w:pPr><w:r><w:rPr><w:rStyle w:val="VerbatimChar" /></w:rPr><w:t xml:space="preserve">##           state        region  rate</w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="VerbatimChar" /></w:rPr><w:t xml:space="preserve">## 1        Hawaii          West 0.515</w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="VerbatimChar" /></w:rPr><w:t xml:space="preserve">## 2          Iowa North Central 0.689</w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="VerbatimChar" /></w:rPr><w:t xml:space="preserve">## 3 New Hampshire     Northeast 0.380</w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="VerbatimChar" /></w:rPr><w:t xml:space="preserve">## 4  North Dakota North Central 0.595</w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="VerbatimChar" /></w:rPr><w:t xml:space="preserve">## 5       Vermont     Northeast 0.320</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="Heading2" /></w:pPr><w:bookmarkStart w:id="73" w:name="X08b915ee7ab1c3eed033c0b6c57f81279efc0f1" /><w:r><w:t xml:space="preserve">Basic Data Wrangling - Creating Data Frames</w:t></w:r><w:bookmarkEnd w:id="73" /></w:p><w:p><w:pPr><w:pStyle w:val="FirstParagraph" /></w:pPr><w:r><w:rPr><w:b /></w:rPr><w:t xml:space="preserve">Key Points</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="Compact" /><w:numPr><w:numId w:val="1075" /><w:ilvl w:val="0" /></w:numPr></w:pPr><w:r><w:t xml:space="preserve">We can use the</w:t></w:r><w:r><w:t xml:space="preserve"> </w:t></w:r><w:r><w:rPr><w:rStyle w:val="VerbatimChar" /></w:rPr><w:t xml:space="preserve">data.frame()</w:t></w:r><w:r><w:t xml:space="preserve"> </w:t></w:r><w:r><w:t xml:space="preserve">function to create data frames.</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="Compact" /><w:numPr><w:numId w:val="1075" /><w:ilvl w:val="0" /></w:numPr></w:pPr><w:r><w:t xml:space="preserve">By default, the</w:t></w:r><w:r><w:t xml:space="preserve"> </w:t></w:r><w:r><w:rPr><w:rStyle w:val="VerbatimChar" /></w:rPr><w:t xml:space="preserve">data.frame()</w:t></w:r><w:r><w:t xml:space="preserve"> </w:t></w:r><w:r><w:t xml:space="preserve">function turns characters into factors. To avoid this, we utilize the</w:t></w:r><w:r><w:t xml:space="preserve"> </w:t></w:r><w:r><w:rPr><w:rStyle w:val="VerbatimChar" /></w:rPr><w:t xml:space="preserve">stringsAsFactors</w:t></w:r><w:r><w:t xml:space="preserve"> </w:t></w:r><w:r><w:t xml:space="preserve">argument and set it equal to false.</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="FirstParagraph" /></w:pPr><w:r><w:rPr><w:i /></w:rPr><w:t xml:space="preserve">Code</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="SourceCode" /></w:pPr><w:r><w:rPr><w:rStyle w:val="CommentTok" /></w:rPr><w:t xml:space="preserve"># creating a data frame with stringAsFactors = FALSE</w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">grades &lt;-</w:t></w:r><w:r><w:rPr><w:rStyle w:val="StringTok" /></w:rPr><w:t xml:space="preserve"> </w:t></w:r><w:r><w:rPr><w:rStyle w:val="KeywordTok" /></w:rPr><w:t xml:space="preserve">data.frame</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">(</w:t></w:r><w:r><w:rPr><w:rStyle w:val="DataTypeTok" /></w:rPr><w:t xml:space="preserve">names =</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve"> </w:t></w:r><w:r><w:rPr><w:rStyle w:val="KeywordTok" /></w:rPr><w:t xml:space="preserve">c</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">(</w:t></w:r><w:r><w:rPr><w:rStyle w:val="StringTok" /></w:rPr><w:t xml:space="preserve">&quot;John&quot;</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">, </w:t></w:r><w:r><w:rPr><w:rStyle w:val="StringTok" /></w:rPr><w:t xml:space="preserve">&quot;Juan&quot;</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">, </w:t></w:r><w:r><w:rPr><w:rStyle w:val="StringTok" /></w:rPr><w:t xml:space="preserve">&quot;Jean&quot;</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">, </w:t></w:r><w:r><w:rPr><w:rStyle w:val="StringTok" /></w:rPr><w:t xml:space="preserve">&quot;Yao&quot;</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">), </w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">                     </w:t></w:r><w:r><w:rPr><w:rStyle w:val="DataTypeTok" /></w:rPr><w:t xml:space="preserve">exam_1 =</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve"> </w:t></w:r><w:r><w:rPr><w:rStyle w:val="KeywordTok" /></w:rPr><w:t xml:space="preserve">c</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">(</w:t></w:r><w:r><w:rPr><w:rStyle w:val="DecValTok" /></w:rPr><w:t xml:space="preserve">95</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">, </w:t></w:r><w:r><w:rPr><w:rStyle w:val="DecValTok" /></w:rPr><w:t xml:space="preserve">80</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">, </w:t></w:r><w:r><w:rPr><w:rStyle w:val="DecValTok" /></w:rPr><w:t xml:space="preserve">90</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">, </w:t></w:r><w:r><w:rPr><w:rStyle w:val="DecValTok" /></w:rPr><w:t xml:space="preserve">85</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">), </w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">                     </w:t></w:r><w:r><w:rPr><w:rStyle w:val="DataTypeTok" /></w:rPr><w:t xml:space="preserve">exam_2 =</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve"> </w:t></w:r><w:r><w:rPr><w:rStyle w:val="KeywordTok" /></w:rPr><w:t xml:space="preserve">c</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">(</w:t></w:r><w:r><w:rPr><w:rStyle w:val="DecValTok" /></w:rPr><w:t xml:space="preserve">90</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">, </w:t></w:r><w:r><w:rPr><w:rStyle w:val="DecValTok" /></w:rPr><w:t xml:space="preserve">85</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">, </w:t></w:r><w:r><w:rPr><w:rStyle w:val="DecValTok" /></w:rPr><w:t xml:space="preserve">85</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">, </w:t></w:r><w:r><w:rPr><w:rStyle w:val="DecValTok" /></w:rPr><w:t xml:space="preserve">90</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">),</w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">                     </w:t></w:r><w:r><w:rPr><w:rStyle w:val="DataTypeTok" /></w:rPr><w:t xml:space="preserve">stringsAsFactors =</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve"> </w:t></w:r><w:r><w:rPr><w:rStyle w:val="OtherTok" /></w:rPr><w:t xml:space="preserve">FALSE</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">)</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="Heading2" /></w:pPr><w:bookmarkStart w:id="74" w:name="assessment---basic-data-wrangling" /><w:r><w:t xml:space="preserve">Assessment - Basic Data Wrangling</w:t></w:r><w:bookmarkEnd w:id="74" /></w:p><w:p><w:pPr><w:pStyle w:val="Compact" /><w:numPr><w:numId w:val="1076" /><w:ilvl w:val="0" /></w:numPr></w:pPr><w:r><w:t xml:space="preserve">You can add columns using the</w:t></w:r><w:r><w:t xml:space="preserve"> </w:t></w:r><w:r><w:rPr><w:rStyle w:val="VerbatimChar" /></w:rPr><w:t xml:space="preserve">dplyr</w:t></w:r><w:r><w:t xml:space="preserve"> </w:t></w:r><w:r><w:t xml:space="preserve">function</w:t></w:r><w:r><w:t xml:space="preserve"> </w:t></w:r><w:r><w:rPr><w:rStyle w:val="VerbatimChar" /></w:rPr><w:t xml:space="preserve">mutate</w:t></w:r><w:r><w:t xml:space="preserve">.</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="FirstParagraph" /></w:pPr><w:r><w:t xml:space="preserve">This function is aware of the column names and inside the function you can call them unquoted. Like this:</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="SourceCode" /></w:pPr><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">murders &lt;-</w:t></w:r><w:r><w:rPr><w:rStyle w:val="StringTok" /></w:rPr><w:t xml:space="preserve"> </w:t></w:r><w:r><w:rPr><w:rStyle w:val="KeywordTok" /></w:rPr><w:t xml:space="preserve">mutate</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">(murders, </w:t></w:r><w:r><w:rPr><w:rStyle w:val="DataTypeTok" /></w:rPr><w:t xml:space="preserve">population_in_millions =</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve"> population </w:t></w:r><w:r><w:rPr><w:rStyle w:val="OperatorTok" /></w:rPr><w:t xml:space="preserve">/</w:t></w:r><w:r><w:rPr><w:rStyle w:val="StringTok" /></w:rPr><w:t xml:space="preserve"> </w:t></w:r><w:r><w:rPr><w:rStyle w:val="DecValTok" /></w:rPr><w:t xml:space="preserve">10</w:t></w:r><w:r><w:rPr><w:rStyle w:val="OperatorTok" /></w:rPr><w:t xml:space="preserve">^</w:t></w:r><w:r><w:rPr><w:rStyle w:val="DecValTok" /></w:rPr><w:t xml:space="preserve">6</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">)</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="FirstParagraph" /></w:pPr><w:r><w:t xml:space="preserve">Note that we can write</w:t></w:r><w:r><w:t xml:space="preserve"> </w:t></w:r><w:r><w:rPr><w:rStyle w:val="VerbatimChar" /></w:rPr><w:t xml:space="preserve">population</w:t></w:r><w:r><w:t xml:space="preserve"> </w:t></w:r><w:r><w:t xml:space="preserve">rather than</w:t></w:r><w:r><w:t xml:space="preserve"> </w:t></w:r><w:r><w:rPr><w:rStyle w:val="VerbatimChar" /></w:rPr><w:t xml:space="preserve">murders$population</w:t></w:r><w:r><w:t xml:space="preserve">. The function</w:t></w:r><w:r><w:t xml:space="preserve"> </w:t></w:r><w:r><w:rPr><w:rStyle w:val="VerbatimChar" /></w:rPr><w:t xml:space="preserve">mutate</w:t></w:r><w:r><w:t xml:space="preserve"> </w:t></w:r><w:r><w:t xml:space="preserve">knows we are grabing columns from</w:t></w:r><w:r><w:t xml:space="preserve"> </w:t></w:r><w:r><w:rPr><w:rStyle w:val="VerbatimChar" /></w:rPr><w:t xml:space="preserve">murders</w:t></w:r><w:r><w:t xml:space="preserve">.</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="SourceCode" /></w:pPr><w:r><w:rPr><w:rStyle w:val="CommentTok" /></w:rPr><w:t xml:space="preserve"># Redefine murders so that it includes a column named rate with the per 100,000 murder rates</w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">murders &lt;-</w:t></w:r><w:r><w:rPr><w:rStyle w:val="StringTok" /></w:rPr><w:t xml:space="preserve"> </w:t></w:r><w:r><w:rPr><w:rStyle w:val="KeywordTok" /></w:rPr><w:t xml:space="preserve">mutate</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">(murders, </w:t></w:r><w:r><w:rPr><w:rStyle w:val="DataTypeTok" /></w:rPr><w:t xml:space="preserve">rate =</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve"> total </w:t></w:r><w:r><w:rPr><w:rStyle w:val="OperatorTok" /></w:rPr><w:t xml:space="preserve">/</w:t></w:r><w:r><w:rPr><w:rStyle w:val="StringTok" /></w:rPr><w:t xml:space="preserve"> </w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">population </w:t></w:r><w:r><w:rPr><w:rStyle w:val="OperatorTok" /></w:rPr><w:t xml:space="preserve">*</w:t></w:r><w:r><w:rPr><w:rStyle w:val="StringTok" /></w:rPr><w:t xml:space="preserve"> </w:t></w:r><w:r><w:rPr><w:rStyle w:val="DecValTok" /></w:rPr><w:t xml:space="preserve">100000</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">)</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="Compact" /><w:numPr><w:numId w:val="1077" /><w:ilvl w:val="0" /></w:numPr></w:pPr><w:r><w:t xml:space="preserve">Note that if</w:t></w:r><w:r><w:t xml:space="preserve"> </w:t></w:r><w:r><w:rPr><w:rStyle w:val="VerbatimChar" /></w:rPr><w:t xml:space="preserve">rank(x)</w:t></w:r><w:r><w:t xml:space="preserve"> </w:t></w:r><w:r><w:t xml:space="preserve">gives you the ranks of</w:t></w:r><w:r><w:t xml:space="preserve"> </w:t></w:r><w:r><w:rPr><w:rStyle w:val="VerbatimChar" /></w:rPr><w:t xml:space="preserve">x</w:t></w:r><w:r><w:t xml:space="preserve"> </w:t></w:r><w:r><w:t xml:space="preserve">from lowest to highest,</w:t></w:r><w:r><w:t xml:space="preserve"> </w:t></w:r><w:r><w:rPr><w:rStyle w:val="VerbatimChar" /></w:rPr><w:t xml:space="preserve">rank(-x)</w:t></w:r><w:r><w:t xml:space="preserve"> </w:t></w:r><w:r><w:t xml:space="preserve">gives you the ranks from highest to lowest.</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="SourceCode" /></w:pPr><w:r><w:rPr><w:rStyle w:val="CommentTok" /></w:rPr><w:t xml:space="preserve"># Note that if you want ranks from highest to lowest you can take the negative and then compute the ranks </w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">x &lt;-</w:t></w:r><w:r><w:rPr><w:rStyle w:val="StringTok" /></w:rPr><w:t xml:space="preserve"> </w:t></w:r><w:r><w:rPr><w:rStyle w:val="KeywordTok" /></w:rPr><w:t xml:space="preserve">c</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">(</w:t></w:r><w:r><w:rPr><w:rStyle w:val="DecValTok" /></w:rPr><w:t xml:space="preserve">88</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">, </w:t></w:r><w:r><w:rPr><w:rStyle w:val="DecValTok" /></w:rPr><w:t xml:space="preserve">100</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">, </w:t></w:r><w:r><w:rPr><w:rStyle w:val="DecValTok" /></w:rPr><w:t xml:space="preserve">83</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">, </w:t></w:r><w:r><w:rPr><w:rStyle w:val="DecValTok" /></w:rPr><w:t xml:space="preserve">92</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">, </w:t></w:r><w:r><w:rPr><w:rStyle w:val="DecValTok" /></w:rPr><w:t xml:space="preserve">94</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">)</w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="KeywordTok" /></w:rPr><w:t xml:space="preserve">rank</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">(</w:t></w:r><w:r><w:rPr><w:rStyle w:val="OperatorTok" /></w:rPr><w:t xml:space="preserve">-</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">x)</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="SourceCode" /></w:pPr><w:r><w:rPr><w:rStyle w:val="VerbatimChar" /></w:rPr><w:t xml:space="preserve">## [1] 4 1 5 3 2</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="SourceCode" /></w:pPr><w:r><w:rPr><w:rStyle w:val="CommentTok" /></w:rPr><w:t xml:space="preserve"># Defining rate</w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">rate &lt;-</w:t></w:r><w:r><w:rPr><w:rStyle w:val="StringTok" /></w:rPr><w:t xml:space="preserve">  </w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">murders</w:t></w:r><w:r><w:rPr><w:rStyle w:val="OperatorTok" /></w:rPr><w:t xml:space="preserve">$</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">total</w:t></w:r><w:r><w:rPr><w:rStyle w:val="OperatorTok" /></w:rPr><w:t xml:space="preserve">/</w:t></w:r><w:r><w:rPr><w:rStyle w:val="StringTok" /></w:rPr><w:t xml:space="preserve"> </w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">murders</w:t></w:r><w:r><w:rPr><w:rStyle w:val="OperatorTok" /></w:rPr><w:t xml:space="preserve">$</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">population </w:t></w:r><w:r><w:rPr><w:rStyle w:val="OperatorTok" /></w:rPr><w:t xml:space="preserve">*</w:t></w:r><w:r><w:rPr><w:rStyle w:val="StringTok" /></w:rPr><w:t xml:space="preserve"> </w:t></w:r><w:r><w:rPr><w:rStyle w:val="DecValTok" /></w:rPr><w:t xml:space="preserve">100000</w:t></w:r><w:r><w:br /></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="CommentTok" /></w:rPr><w:t xml:space="preserve"># Redefine murders to include a column named rank</w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="CommentTok" /></w:rPr><w:t xml:space="preserve"># with the ranks of rate from highest to lowest</w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">murders &lt;-</w:t></w:r><w:r><w:rPr><w:rStyle w:val="StringTok" /></w:rPr><w:t xml:space="preserve"> </w:t></w:r><w:r><w:rPr><w:rStyle w:val="KeywordTok" /></w:rPr><w:t xml:space="preserve">mutate</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">(murders, </w:t></w:r><w:r><w:rPr><w:rStyle w:val="DataTypeTok" /></w:rPr><w:t xml:space="preserve">rank =</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve"> </w:t></w:r><w:r><w:rPr><w:rStyle w:val="KeywordTok" /></w:rPr><w:t xml:space="preserve">rank</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">(</w:t></w:r><w:r><w:rPr><w:rStyle w:val="OperatorTok" /></w:rPr><w:t xml:space="preserve">-</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">rate))</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="Compact" /><w:numPr><w:numId w:val="1078" /><w:ilvl w:val="0" /></w:numPr></w:pPr><w:r><w:t xml:space="preserve">With</w:t></w:r><w:r><w:t xml:space="preserve"> </w:t></w:r><w:r><w:rPr><w:rStyle w:val="VerbatimChar" /></w:rPr><w:t xml:space="preserve">dplyr</w:t></w:r><w:r><w:t xml:space="preserve"> </w:t></w:r><w:r><w:t xml:space="preserve">we can use</w:t></w:r><w:r><w:t xml:space="preserve"> </w:t></w:r><w:r><w:rPr><w:rStyle w:val="VerbatimChar" /></w:rPr><w:t xml:space="preserve">select</w:t></w:r><w:r><w:t xml:space="preserve"> </w:t></w:r><w:r><w:t xml:space="preserve">to show only certain columns. For example with this code we would only show the states and population sizes:</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="SourceCode" /></w:pPr><w:r><w:rPr><w:rStyle w:val="KeywordTok" /></w:rPr><w:t xml:space="preserve">select</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">(murders, state, population)</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="SourceCode" /></w:pPr><w:r><w:rPr><w:rStyle w:val="CommentTok" /></w:rPr><w:t xml:space="preserve"># Use select to only show state names and abbreviations from murders</w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="KeywordTok" /></w:rPr><w:t xml:space="preserve">select</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">(murders, state, abb)</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="SourceCode" /></w:pPr><w:r><w:rPr><w:rStyle w:val="VerbatimChar" /></w:rPr><w:t xml:space="preserve">##                   state abb</w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="VerbatimChar" /></w:rPr><w:t xml:space="preserve">## 1               Alabama  AL</w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="VerbatimChar" /></w:rPr><w:t xml:space="preserve">## 2                Alaska  AK</w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="VerbatimChar" /></w:rPr><w:t xml:space="preserve">## 3               Arizona  AZ</w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="VerbatimChar" /></w:rPr><w:t xml:space="preserve">## 4              Arkansas  AR</w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="VerbatimChar" /></w:rPr><w:t xml:space="preserve">## 5            California  CA</w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="VerbatimChar" /></w:rPr><w:t xml:space="preserve">## 6              Colorado  CO</w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="VerbatimChar" /></w:rPr><w:t xml:space="preserve">## 7           Connecticut  CT</w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="VerbatimChar" /></w:rPr><w:t xml:space="preserve">## 8              Delaware  DE</w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="VerbatimChar" /></w:rPr><w:t xml:space="preserve">## 9  District of Columbia  DC</w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="VerbatimChar" /></w:rPr><w:t xml:space="preserve">## 10              Florida  FL</w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="VerbatimChar" /></w:rPr><w:t xml:space="preserve">## 11              Georgia  GA</w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="VerbatimChar" /></w:rPr><w:t xml:space="preserve">## 12               Hawaii  HI</w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="VerbatimChar" /></w:rPr><w:t xml:space="preserve">## 13                Idaho  ID</w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="VerbatimChar" /></w:rPr><w:t xml:space="preserve">## 14             Illinois  IL</w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="VerbatimChar" /></w:rPr><w:t xml:space="preserve">## 15              Indiana  IN</w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="VerbatimChar" /></w:rPr><w:t xml:space="preserve">## 16                 Iowa  IA</w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="VerbatimChar" /></w:rPr><w:t xml:space="preserve">## 17               Kansas  KS</w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="VerbatimChar" /></w:rPr><w:t xml:space="preserve">## 18             Kentucky  KY</w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="VerbatimChar" /></w:rPr><w:t xml:space="preserve">## 19            Louisiana  LA</w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="VerbatimChar" /></w:rPr><w:t xml:space="preserve">## 20                Maine  ME</w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="VerbatimChar" /></w:rPr><w:t xml:space="preserve">## 21             Maryland  MD</w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="VerbatimChar" /></w:rPr><w:t xml:space="preserve">## 22        Massachusetts  MA</w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="VerbatimChar" /></w:rPr><w:t xml:space="preserve">## 23             Michigan  MI</w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="VerbatimChar" /></w:rPr><w:t xml:space="preserve">## 24            Minnesota  MN</w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="VerbatimChar" /></w:rPr><w:t xml:space="preserve">## 25          Mississippi  MS</w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="VerbatimChar" /></w:rPr><w:t xml:space="preserve">## 26             Missouri  MO</w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="VerbatimChar" /></w:rPr><w:t xml:space="preserve">## 27              Montana  MT</w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="VerbatimChar" /></w:rPr><w:t xml:space="preserve">## 28             Nebraska  NE</w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="VerbatimChar" /></w:rPr><w:t xml:space="preserve">## 29               Nevada  NV</w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="VerbatimChar" /></w:rPr><w:t xml:space="preserve">## 30        New Hampshire  NH</w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="VerbatimChar" /></w:rPr><w:t xml:space="preserve">## 31           New Jersey  NJ</w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="VerbatimChar" /></w:rPr><w:t xml:space="preserve">## 32           New Mexico  NM</w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="VerbatimChar" /></w:rPr><w:t xml:space="preserve">## 33             New York  NY</w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="VerbatimChar" /></w:rPr><w:t xml:space="preserve">## 34       North Carolina  NC</w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="VerbatimChar" /></w:rPr><w:t xml:space="preserve">## 35         North Dakota  ND</w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="VerbatimChar" /></w:rPr><w:t xml:space="preserve">## 36                 Ohio  OH</w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="VerbatimChar" /></w:rPr><w:t xml:space="preserve">## 37             Oklahoma  OK</w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="VerbatimChar" /></w:rPr><w:t xml:space="preserve">## 38               Oregon  OR</w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="VerbatimChar" /></w:rPr><w:t xml:space="preserve">## 39         Pennsylvania  PA</w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="VerbatimChar" /></w:rPr><w:t xml:space="preserve">## 40         Rhode Island  RI</w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="VerbatimChar" /></w:rPr><w:t xml:space="preserve">## 41       South Carolina  SC</w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="VerbatimChar" /></w:rPr><w:t xml:space="preserve">## 42         South Dakota  SD</w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="VerbatimChar" /></w:rPr><w:t xml:space="preserve">## 43            Tennessee  TN</w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="VerbatimChar" /></w:rPr><w:t xml:space="preserve">## 44                Texas  TX</w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="VerbatimChar" /></w:rPr><w:t xml:space="preserve">## 45                 Utah  UT</w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="VerbatimChar" /></w:rPr><w:t xml:space="preserve">## 46              Vermont  VT</w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="VerbatimChar" /></w:rPr><w:t xml:space="preserve">## 47             Virginia  VA</w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="VerbatimChar" /></w:rPr><w:t xml:space="preserve">## 48           Washington  WA</w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="VerbatimChar" /></w:rPr><w:t xml:space="preserve">## 49        West Virginia  WV</w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="VerbatimChar" /></w:rPr><w:t xml:space="preserve">## 50            Wisconsin  WI</w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="VerbatimChar" /></w:rPr><w:t xml:space="preserve">## 51              Wyoming  WY</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="Compact" /><w:numPr><w:numId w:val="1079" /><w:ilvl w:val="0" /></w:numPr></w:pPr><w:r><w:t xml:space="preserve">The</w:t></w:r><w:r><w:t xml:space="preserve"> </w:t></w:r><w:r><w:rPr><w:rStyle w:val="VerbatimChar" /></w:rPr><w:t xml:space="preserve">dplyr</w:t></w:r><w:r><w:t xml:space="preserve"> </w:t></w:r><w:r><w:t xml:space="preserve">function</w:t></w:r><w:r><w:t xml:space="preserve"> </w:t></w:r><w:r><w:rPr><w:rStyle w:val="VerbatimChar" /></w:rPr><w:t xml:space="preserve">filter</w:t></w:r><w:r><w:t xml:space="preserve"> </w:t></w:r><w:r><w:t xml:space="preserve">is used to choose specific rows of the data frame to keep. Unlike</w:t></w:r><w:r><w:t xml:space="preserve"> </w:t></w:r><w:r><w:rPr><w:rStyle w:val="VerbatimChar" /></w:rPr><w:t xml:space="preserve">select</w:t></w:r><w:r><w:t xml:space="preserve"> </w:t></w:r><w:r><w:t xml:space="preserve">which is for columns,</w:t></w:r><w:r><w:t xml:space="preserve"> </w:t></w:r><w:r><w:rPr><w:rStyle w:val="VerbatimChar" /></w:rPr><w:t xml:space="preserve">filter</w:t></w:r><w:r><w:t xml:space="preserve"> </w:t></w:r><w:r><w:t xml:space="preserve">is for rows.</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="FirstParagraph" /></w:pPr><w:r><w:t xml:space="preserve">For example you can show just the New York row like this:</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="SourceCode" /></w:pPr><w:r><w:rPr><w:rStyle w:val="KeywordTok" /></w:rPr><w:t xml:space="preserve">filter</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">(murders, state </w:t></w:r><w:r><w:rPr><w:rStyle w:val="OperatorTok" /></w:rPr><w:t xml:space="preserve">==</w:t></w:r><w:r><w:rPr><w:rStyle w:val="StringTok" /></w:rPr><w:t xml:space="preserve"> &quot;New York&quot;</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">)</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="FirstParagraph" /></w:pPr><w:r><w:t xml:space="preserve">You can use other logical vectors to filter rows.</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="SourceCode" /></w:pPr><w:r><w:rPr><w:rStyle w:val="CommentTok" /></w:rPr><w:t xml:space="preserve"># Add the necessary columns</w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">murders &lt;-</w:t></w:r><w:r><w:rPr><w:rStyle w:val="StringTok" /></w:rPr><w:t xml:space="preserve"> </w:t></w:r><w:r><w:rPr><w:rStyle w:val="KeywordTok" /></w:rPr><w:t xml:space="preserve">mutate</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">(murders, </w:t></w:r><w:r><w:rPr><w:rStyle w:val="DataTypeTok" /></w:rPr><w:t xml:space="preserve">rate =</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve"> total</w:t></w:r><w:r><w:rPr><w:rStyle w:val="OperatorTok" /></w:rPr><w:t xml:space="preserve">/</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">population </w:t></w:r><w:r><w:rPr><w:rStyle w:val="OperatorTok" /></w:rPr><w:t xml:space="preserve">*</w:t></w:r><w:r><w:rPr><w:rStyle w:val="StringTok" /></w:rPr><w:t xml:space="preserve"> </w:t></w:r><w:r><w:rPr><w:rStyle w:val="DecValTok" /></w:rPr><w:t xml:space="preserve">100000</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">, </w:t></w:r><w:r><w:rPr><w:rStyle w:val="DataTypeTok" /></w:rPr><w:t xml:space="preserve">rank =</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve"> </w:t></w:r><w:r><w:rPr><w:rStyle w:val="KeywordTok" /></w:rPr><w:t xml:space="preserve">rank</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">(</w:t></w:r><w:r><w:rPr><w:rStyle w:val="OperatorTok" /></w:rPr><w:t xml:space="preserve">-</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">rate))</w:t></w:r><w:r><w:br /></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="CommentTok" /></w:rPr><w:t xml:space="preserve"># Filter to show the top 5 states with the highest murder rates</w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="KeywordTok" /></w:rPr><w:t xml:space="preserve">filter</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">(murders, rank </w:t></w:r><w:r><w:rPr><w:rStyle w:val="OperatorTok" /></w:rPr><w:t xml:space="preserve">&lt;=</w:t></w:r><w:r><w:rPr><w:rStyle w:val="StringTok" /></w:rPr><w:t xml:space="preserve"> </w:t></w:r><w:r><w:rPr><w:rStyle w:val="DecValTok" /></w:rPr><w:t xml:space="preserve">5</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">)</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="SourceCode" /></w:pPr><w:r><w:rPr><w:rStyle w:val="VerbatimChar" /></w:rPr><w:t xml:space="preserve">##                  state abb        region population total  rate rank</w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="VerbatimChar" /></w:rPr><w:t xml:space="preserve">## 1 District of Columbia  DC         South     601723    99 16.45    1</w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="VerbatimChar" /></w:rPr><w:t xml:space="preserve">## 2            Louisiana  LA         South    4533372   351  7.74    2</w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="VerbatimChar" /></w:rPr><w:t xml:space="preserve">## 3             Maryland  MD         South    5773552   293  5.07    4</w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="VerbatimChar" /></w:rPr><w:t xml:space="preserve">## 4             Missouri  MO North Central    5988927   321  5.36    3</w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="VerbatimChar" /></w:rPr><w:t xml:space="preserve">## 5       South Carolina  SC         South    4625364   207  4.48    5</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="Compact" /><w:numPr><w:numId w:val="1080" /><w:ilvl w:val="0" /></w:numPr></w:pPr><w:r><w:t xml:space="preserve">We can remove rows using the</w:t></w:r><w:r><w:t xml:space="preserve"> </w:t></w:r><w:r><w:rPr><w:rStyle w:val="VerbatimChar" /></w:rPr><w:t xml:space="preserve">!=</w:t></w:r><w:r><w:t xml:space="preserve"> </w:t></w:r><w:r><w:t xml:space="preserve">operator.</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="FirstParagraph" /></w:pPr><w:r><w:t xml:space="preserve">For example to remove Florida we would do this:</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="SourceCode" /></w:pPr><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">no_florida &lt;-</w:t></w:r><w:r><w:rPr><w:rStyle w:val="StringTok" /></w:rPr><w:t xml:space="preserve"> </w:t></w:r><w:r><w:rPr><w:rStyle w:val="KeywordTok" /></w:rPr><w:t xml:space="preserve">filter</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">(murders, state </w:t></w:r><w:r><w:rPr><w:rStyle w:val="OperatorTok" /></w:rPr><w:t xml:space="preserve">!=</w:t></w:r><w:r><w:rPr><w:rStyle w:val="StringTok" /></w:rPr><w:t xml:space="preserve"> </w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">“Florida”)</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="SourceCode" /></w:pPr><w:r><w:rPr><w:rStyle w:val="CommentTok" /></w:rPr><w:t xml:space="preserve"># Use filter to create a new data frame no_south</w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">no_south &lt;-</w:t></w:r><w:r><w:rPr><w:rStyle w:val="StringTok" /></w:rPr><w:t xml:space="preserve"> </w:t></w:r><w:r><w:rPr><w:rStyle w:val="KeywordTok" /></w:rPr><w:t xml:space="preserve">filter</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">(murders, region </w:t></w:r><w:r><w:rPr><w:rStyle w:val="OperatorTok" /></w:rPr><w:t xml:space="preserve">!=</w:t></w:r><w:r><w:rPr><w:rStyle w:val="StringTok" /></w:rPr><w:t xml:space="preserve"> &quot;South&quot;</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">)</w:t></w:r><w:r><w:br /></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="CommentTok" /></w:rPr><w:t xml:space="preserve"># Use nrow() to calculate the number of rows</w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="KeywordTok" /></w:rPr><w:t xml:space="preserve">nrow</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">(no_south)</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="SourceCode" /></w:pPr><w:r><w:rPr><w:rStyle w:val="VerbatimChar" /></w:rPr><w:t xml:space="preserve">## [1] 34</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="Compact" /><w:numPr><w:numId w:val="1081" /><w:ilvl w:val="0" /></w:numPr></w:pPr><w:r><w:t xml:space="preserve">We can also use the</w:t></w:r><w:r><w:t xml:space="preserve"> </w:t></w:r><w:r><w:rPr><w:rStyle w:val="VerbatimChar" /></w:rPr><w:t xml:space="preserve">%in%</w:t></w:r><w:r><w:t xml:space="preserve"> </w:t></w:r><w:r><w:t xml:space="preserve">to filter with</w:t></w:r><w:r><w:t xml:space="preserve"> </w:t></w:r><w:r><w:rPr><w:rStyle w:val="VerbatimChar" /></w:rPr><w:t xml:space="preserve">dplyr</w:t></w:r><w:r><w:t xml:space="preserve">.</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="FirstParagraph" /></w:pPr><w:r><w:t xml:space="preserve">For example you can see the data from New York and Texas like this:</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="SourceCode" /></w:pPr><w:r><w:rPr><w:rStyle w:val="KeywordTok" /></w:rPr><w:t xml:space="preserve">filter</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">(murders, state </w:t></w:r><w:r><w:rPr><w:rStyle w:val="OperatorTok" /></w:rPr><w:t xml:space="preserve">%in%</w:t></w:r><w:r><w:rPr><w:rStyle w:val="StringTok" /></w:rPr><w:t xml:space="preserve"> </w:t></w:r><w:r><w:rPr><w:rStyle w:val="KeywordTok" /></w:rPr><w:t xml:space="preserve">c</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">(“New York”, “Texas”))</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="SourceCode" /></w:pPr><w:r><w:rPr><w:rStyle w:val="CommentTok" /></w:rPr><w:t xml:space="preserve"># Create a new data frame called murders_nw with only the states from the northeast and the west</w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">murders_nw &lt;-</w:t></w:r><w:r><w:rPr><w:rStyle w:val="StringTok" /></w:rPr><w:t xml:space="preserve"> </w:t></w:r><w:r><w:rPr><w:rStyle w:val="KeywordTok" /></w:rPr><w:t xml:space="preserve">filter</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">(murders, region </w:t></w:r><w:r><w:rPr><w:rStyle w:val="OperatorTok" /></w:rPr><w:t xml:space="preserve">%in%</w:t></w:r><w:r><w:rPr><w:rStyle w:val="StringTok" /></w:rPr><w:t xml:space="preserve"> </w:t></w:r><w:r><w:rPr><w:rStyle w:val="KeywordTok" /></w:rPr><w:t xml:space="preserve">c</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">(</w:t></w:r><w:r><w:rPr><w:rStyle w:val="StringTok" /></w:rPr><w:t xml:space="preserve">&quot;Northeast&quot;</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">, </w:t></w:r><w:r><w:rPr><w:rStyle w:val="StringTok" /></w:rPr><w:t xml:space="preserve">&quot;West&quot;</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">))</w:t></w:r><w:r><w:br /></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="CommentTok" /></w:rPr><w:t xml:space="preserve"># Number of states (rows) in this category </w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="KeywordTok" /></w:rPr><w:t xml:space="preserve">nrow</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">(murders_nw)</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="SourceCode" /></w:pPr><w:r><w:rPr><w:rStyle w:val="VerbatimChar" /></w:rPr><w:t xml:space="preserve">## [1] 22</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="Compact" /><w:numPr><w:numId w:val="1082" /><w:ilvl w:val="0" /></w:numPr></w:pPr><w:r><w:t xml:space="preserve">Suppose you want to live in the Northeast or West</w:t></w:r><w:r><w:t xml:space="preserve"> </w:t></w:r><w:r><w:rPr><w:b /></w:rPr><w:t xml:space="preserve">and</w:t></w:r><w:r><w:t xml:space="preserve"> </w:t></w:r><w:r><w:t xml:space="preserve">want the murder rate to be less than 1.</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="FirstParagraph" /></w:pPr><w:r><w:t xml:space="preserve">We want to see the data for the states satisfying these options. Note that you can use logical operators with</w:t></w:r><w:r><w:t xml:space="preserve"> </w:t></w:r><w:r><w:rPr><w:rStyle w:val="VerbatimChar" /></w:rPr><w:t xml:space="preserve">filter</w:t></w:r><w:r><w:t xml:space="preserve">:</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="SourceCode" /></w:pPr><w:r><w:rPr><w:rStyle w:val="KeywordTok" /></w:rPr><w:t xml:space="preserve">filter</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">(murders, population </w:t></w:r><w:r><w:rPr><w:rStyle w:val="OperatorTok" /></w:rPr><w:t xml:space="preserve">&lt;</w:t></w:r><w:r><w:rPr><w:rStyle w:val="StringTok" /></w:rPr><w:t xml:space="preserve"> </w:t></w:r><w:r><w:rPr><w:rStyle w:val="DecValTok" /></w:rPr><w:t xml:space="preserve">5000000</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve"> </w:t></w:r><w:r><w:rPr><w:rStyle w:val="OperatorTok" /></w:rPr><w:t xml:space="preserve">&amp;</w:t></w:r><w:r><w:rPr><w:rStyle w:val="StringTok" /></w:rPr><w:t xml:space="preserve"> </w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">region </w:t></w:r><w:r><w:rPr><w:rStyle w:val="OperatorTok" /></w:rPr><w:t xml:space="preserve">==</w:t></w:r><w:r><w:rPr><w:rStyle w:val="StringTok" /></w:rPr><w:t xml:space="preserve"> </w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">“Northeast”)</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="SourceCode" /></w:pPr><w:r><w:rPr><w:rStyle w:val="CommentTok" /></w:rPr><w:t xml:space="preserve"># add the rate column</w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">murders &lt;-</w:t></w:r><w:r><w:rPr><w:rStyle w:val="StringTok" /></w:rPr><w:t xml:space="preserve"> </w:t></w:r><w:r><w:rPr><w:rStyle w:val="KeywordTok" /></w:rPr><w:t xml:space="preserve">mutate</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">(murders, </w:t></w:r><w:r><w:rPr><w:rStyle w:val="DataTypeTok" /></w:rPr><w:t xml:space="preserve">rate =</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">  total </w:t></w:r><w:r><w:rPr><w:rStyle w:val="OperatorTok" /></w:rPr><w:t xml:space="preserve">/</w:t></w:r><w:r><w:rPr><w:rStyle w:val="StringTok" /></w:rPr><w:t xml:space="preserve"> </w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">population </w:t></w:r><w:r><w:rPr><w:rStyle w:val="OperatorTok" /></w:rPr><w:t xml:space="preserve">*</w:t></w:r><w:r><w:rPr><w:rStyle w:val="StringTok" /></w:rPr><w:t xml:space="preserve"> </w:t></w:r><w:r><w:rPr><w:rStyle w:val="DecValTok" /></w:rPr><w:t xml:space="preserve">100000</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">, </w:t></w:r><w:r><w:rPr><w:rStyle w:val="DataTypeTok" /></w:rPr><w:t xml:space="preserve">rank =</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve"> </w:t></w:r><w:r><w:rPr><w:rStyle w:val="KeywordTok" /></w:rPr><w:t xml:space="preserve">rank</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">(</w:t></w:r><w:r><w:rPr><w:rStyle w:val="OperatorTok" /></w:rPr><w:t xml:space="preserve">-</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">rate))</w:t></w:r><w:r><w:br /></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="CommentTok" /></w:rPr><w:t xml:space="preserve"># Create a table, call it my_states, that satisfies both the conditions</w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">my_states &lt;-</w:t></w:r><w:r><w:rPr><w:rStyle w:val="StringTok" /></w:rPr><w:t xml:space="preserve"> </w:t></w:r><w:r><w:rPr><w:rStyle w:val="KeywordTok" /></w:rPr><w:t xml:space="preserve">filter</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">(murders, rate </w:t></w:r><w:r><w:rPr><w:rStyle w:val="OperatorTok" /></w:rPr><w:t xml:space="preserve">&lt;</w:t></w:r><w:r><w:rPr><w:rStyle w:val="StringTok" /></w:rPr><w:t xml:space="preserve"> </w:t></w:r><w:r><w:rPr><w:rStyle w:val="DecValTok" /></w:rPr><w:t xml:space="preserve">1</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve"> </w:t></w:r><w:r><w:rPr><w:rStyle w:val="OperatorTok" /></w:rPr><w:t xml:space="preserve">&amp;</w:t></w:r><w:r><w:rPr><w:rStyle w:val="StringTok" /></w:rPr><w:t xml:space="preserve"> </w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">region </w:t></w:r><w:r><w:rPr><w:rStyle w:val="OperatorTok" /></w:rPr><w:t xml:space="preserve">%in%</w:t></w:r><w:r><w:rPr><w:rStyle w:val="StringTok" /></w:rPr><w:t xml:space="preserve"> </w:t></w:r><w:r><w:rPr><w:rStyle w:val="KeywordTok" /></w:rPr><w:t xml:space="preserve">c</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">(</w:t></w:r><w:r><w:rPr><w:rStyle w:val="StringTok" /></w:rPr><w:t xml:space="preserve">&quot;Northeast&quot;</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">, </w:t></w:r><w:r><w:rPr><w:rStyle w:val="StringTok" /></w:rPr><w:t xml:space="preserve">&quot;West&quot;</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">))</w:t></w:r><w:r><w:br /></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="CommentTok" /></w:rPr><w:t xml:space="preserve"># Use select to show only the state name, the murder rate and the rank</w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="KeywordTok" /></w:rPr><w:t xml:space="preserve">select</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">(my_states, state, rate, rank)</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="SourceCode" /></w:pPr><w:r><w:rPr><w:rStyle w:val="VerbatimChar" /></w:rPr><w:t xml:space="preserve">##           state  rate rank</w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="VerbatimChar" /></w:rPr><w:t xml:space="preserve">## 1        Hawaii 0.515   49</w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="VerbatimChar" /></w:rPr><w:t xml:space="preserve">## 2         Idaho 0.766   46</w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="VerbatimChar" /></w:rPr><w:t xml:space="preserve">## 3         Maine 0.828   44</w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="VerbatimChar" /></w:rPr><w:t xml:space="preserve">## 4 New Hampshire 0.380   50</w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="VerbatimChar" /></w:rPr><w:t xml:space="preserve">## 5        Oregon 0.940   42</w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="VerbatimChar" /></w:rPr><w:t xml:space="preserve">## 6          Utah 0.796   45</w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="VerbatimChar" /></w:rPr><w:t xml:space="preserve">## 7       Vermont 0.320   51</w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="VerbatimChar" /></w:rPr><w:t xml:space="preserve">## 8       Wyoming 0.887   43</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="Compact" /><w:numPr><w:numId w:val="1083" /><w:ilvl w:val="0" /></w:numPr></w:pPr><w:r><w:t xml:space="preserve">The pipe</w:t></w:r><w:r><w:t xml:space="preserve"> </w:t></w:r><w:r><w:rPr><w:rStyle w:val="VerbatimChar" /></w:rPr><w:t xml:space="preserve">%&gt;%</w:t></w:r><w:r><w:t xml:space="preserve"> </w:t></w:r><w:r><w:t xml:space="preserve">can be used to perform operations sequentially without having to define intermediate objects.</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="FirstParagraph" /></w:pPr><w:r><w:t xml:space="preserve">After redefining murder to include rate and rank.</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="SourceCode" /></w:pPr><w:r><w:rPr><w:rStyle w:val="KeywordTok" /></w:rPr><w:t xml:space="preserve">library</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">(dplyr)</w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">murders &lt;-</w:t></w:r><w:r><w:rPr><w:rStyle w:val="StringTok" /></w:rPr><w:t xml:space="preserve"> </w:t></w:r><w:r><w:rPr><w:rStyle w:val="KeywordTok" /></w:rPr><w:t xml:space="preserve">mutate</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">(murders, </w:t></w:r><w:r><w:rPr><w:rStyle w:val="DataTypeTok" /></w:rPr><w:t xml:space="preserve">rate =</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve"> total </w:t></w:r><w:r><w:rPr><w:rStyle w:val="OperatorTok" /></w:rPr><w:t xml:space="preserve">/</w:t></w:r><w:r><w:rPr><w:rStyle w:val="StringTok" /></w:rPr><w:t xml:space="preserve"> </w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">population </w:t></w:r><w:r><w:rPr><w:rStyle w:val="OperatorTok" /></w:rPr><w:t xml:space="preserve">*</w:t></w:r><w:r><w:rPr><w:rStyle w:val="StringTok" /></w:rPr><w:t xml:space="preserve"> </w:t></w:r><w:r><w:rPr><w:rStyle w:val="DecValTok" /></w:rPr><w:t xml:space="preserve">100000</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">, </w:t></w:r><w:r><w:rPr><w:rStyle w:val="DataTypeTok" /></w:rPr><w:t xml:space="preserve">rank =</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve"> (</w:t></w:r><w:r><w:rPr><w:rStyle w:val="OperatorTok" /></w:rPr><w:t xml:space="preserve">-</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">rate))</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="FirstParagraph" /></w:pPr><w:r><w:t xml:space="preserve">in the solution to the previous exercise we did the following:</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="SourceCode" /></w:pPr><w:r><w:rPr><w:rStyle w:val="CommentTok" /></w:rPr><w:t xml:space="preserve"># Created a table</w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">my_states &lt;-</w:t></w:r><w:r><w:rPr><w:rStyle w:val="StringTok" /></w:rPr><w:t xml:space="preserve"> </w:t></w:r><w:r><w:rPr><w:rStyle w:val="KeywordTok" /></w:rPr><w:t xml:space="preserve">filter</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">(murders, region </w:t></w:r><w:r><w:rPr><w:rStyle w:val="OperatorTok" /></w:rPr><w:t xml:space="preserve">%in%</w:t></w:r><w:r><w:rPr><w:rStyle w:val="StringTok" /></w:rPr><w:t xml:space="preserve"> </w:t></w:r><w:r><w:rPr><w:rStyle w:val="KeywordTok" /></w:rPr><w:t xml:space="preserve">c</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">(“Northeast”, “West”) </w:t></w:r><w:r><w:rPr><w:rStyle w:val="OperatorTok" /></w:rPr><w:t xml:space="preserve">&amp;</w:t></w:r><w:r><w:rPr><w:rStyle w:val="StringTok" /></w:rPr><w:t xml:space="preserve"> </w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">rate </w:t></w:r><w:r><w:rPr><w:rStyle w:val="OperatorTok" /></w:rPr><w:t xml:space="preserve">&lt;</w:t></w:r><w:r><w:rPr><w:rStyle w:val="StringTok" /></w:rPr><w:t xml:space="preserve"> </w:t></w:r><w:r><w:rPr><w:rStyle w:val="DecValTok" /></w:rPr><w:t xml:space="preserve">1</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">)</w:t></w:r><w:r><w:br /></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="CommentTok" /></w:rPr><w:t xml:space="preserve"># Used select to show only the state name, the murder rate and the rank</w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="KeywordTok" /></w:rPr><w:t xml:space="preserve">select</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">(my_states, state, rate, rank)</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="FirstParagraph" /></w:pPr><w:r><w:t xml:space="preserve">The pipe</w:t></w:r><w:r><w:t xml:space="preserve"> </w:t></w:r><w:r><w:rPr><w:rStyle w:val="VerbatimChar" /></w:rPr><w:t xml:space="preserve">%&gt;%</w:t></w:r><w:r><w:t xml:space="preserve"> </w:t></w:r><w:r><w:t xml:space="preserve">permits us to perform both operation sequentially and without having to define an intermediate variable</w:t></w:r><w:r><w:t xml:space="preserve"> </w:t></w:r><w:r><w:rPr><w:rStyle w:val="VerbatimChar" /></w:rPr><w:t xml:space="preserve">my_states</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="BodyText" /></w:pPr><w:r><w:t xml:space="preserve">For example we could have mutated and selected in the same line like this:</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="SourceCode" /></w:pPr><w:r><w:rPr><w:rStyle w:val="KeywordTok" /></w:rPr><w:t xml:space="preserve">mutate</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">(murders, </w:t></w:r><w:r><w:rPr><w:rStyle w:val="DataTypeTok" /></w:rPr><w:t xml:space="preserve">rate =</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve"> total </w:t></w:r><w:r><w:rPr><w:rStyle w:val="OperatorTok" /></w:rPr><w:t xml:space="preserve">/</w:t></w:r><w:r><w:rPr><w:rStyle w:val="StringTok" /></w:rPr><w:t xml:space="preserve"> </w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">population </w:t></w:r><w:r><w:rPr><w:rStyle w:val="OperatorTok" /></w:rPr><w:t xml:space="preserve">*</w:t></w:r><w:r><w:rPr><w:rStyle w:val="StringTok" /></w:rPr><w:t xml:space="preserve"> </w:t></w:r><w:r><w:rPr><w:rStyle w:val="DecValTok" /></w:rPr><w:t xml:space="preserve">100000</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">, </w:t></w:r><w:r><w:rPr><w:rStyle w:val="DataTypeTok" /></w:rPr><w:t xml:space="preserve">rank =</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve"> (</w:t></w:r><w:r><w:rPr><w:rStyle w:val="OperatorTok" /></w:rPr><w:t xml:space="preserve">-</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">rate)) </w:t></w:r><w:r><w:rPr><w:rStyle w:val="OperatorTok" /></w:rPr><w:t xml:space="preserve">%&gt;%</w:t></w:r><w:r><w:rPr><w:rStyle w:val="StringTok" /></w:rPr><w:t xml:space="preserve"> </w:t></w:r><w:r><w:rPr><w:rStyle w:val="KeywordTok" /></w:rPr><w:t xml:space="preserve">select</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">(state, rate, rank)</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="FirstParagraph" /></w:pPr><w:r><w:t xml:space="preserve">Note that</w:t></w:r><w:r><w:t xml:space="preserve"> </w:t></w:r><w:r><w:rPr><w:rStyle w:val="VerbatimChar" /></w:rPr><w:t xml:space="preserve">select</w:t></w:r><w:r><w:t xml:space="preserve"> </w:t></w:r><w:r><w:t xml:space="preserve">no longer has a data frame as the first argument. The first argument is assumed to be the result of the operation conducted right before the</w:t></w:r><w:r><w:t xml:space="preserve"> </w:t></w:r><w:r><w:rPr><w:rStyle w:val="VerbatimChar" /></w:rPr><w:t xml:space="preserve">%&gt;%</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="SourceCode" /></w:pPr><w:r><w:rPr><w:rStyle w:val="CommentTok" /></w:rPr><w:t xml:space="preserve">## Define the rate column</w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">murders &lt;-</w:t></w:r><w:r><w:rPr><w:rStyle w:val="StringTok" /></w:rPr><w:t xml:space="preserve"> </w:t></w:r><w:r><w:rPr><w:rStyle w:val="KeywordTok" /></w:rPr><w:t xml:space="preserve">mutate</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">(murders, </w:t></w:r><w:r><w:rPr><w:rStyle w:val="DataTypeTok" /></w:rPr><w:t xml:space="preserve">rate =</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">  total </w:t></w:r><w:r><w:rPr><w:rStyle w:val="OperatorTok" /></w:rPr><w:t xml:space="preserve">/</w:t></w:r><w:r><w:rPr><w:rStyle w:val="StringTok" /></w:rPr><w:t xml:space="preserve"> </w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">population </w:t></w:r><w:r><w:rPr><w:rStyle w:val="OperatorTok" /></w:rPr><w:t xml:space="preserve">*</w:t></w:r><w:r><w:rPr><w:rStyle w:val="StringTok" /></w:rPr><w:t xml:space="preserve"> </w:t></w:r><w:r><w:rPr><w:rStyle w:val="DecValTok" /></w:rPr><w:t xml:space="preserve">100000</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">, </w:t></w:r><w:r><w:rPr><w:rStyle w:val="DataTypeTok" /></w:rPr><w:t xml:space="preserve">rank =</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve"> </w:t></w:r><w:r><w:rPr><w:rStyle w:val="KeywordTok" /></w:rPr><w:t xml:space="preserve">rank</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">(</w:t></w:r><w:r><w:rPr><w:rStyle w:val="OperatorTok" /></w:rPr><w:t xml:space="preserve">-</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">rate))</w:t></w:r><w:r><w:br /></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="CommentTok" /></w:rPr><w:t xml:space="preserve"># show the result and only include the state, rate, and rank columns, all in one line</w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="KeywordTok" /></w:rPr><w:t xml:space="preserve">filter</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">(murders, region </w:t></w:r><w:r><w:rPr><w:rStyle w:val="OperatorTok" /></w:rPr><w:t xml:space="preserve">%in%</w:t></w:r><w:r><w:rPr><w:rStyle w:val="StringTok" /></w:rPr><w:t xml:space="preserve"> </w:t></w:r><w:r><w:rPr><w:rStyle w:val="KeywordTok" /></w:rPr><w:t xml:space="preserve">c</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">(</w:t></w:r><w:r><w:rPr><w:rStyle w:val="StringTok" /></w:rPr><w:t xml:space="preserve">&quot;Northeast&quot;</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">, </w:t></w:r><w:r><w:rPr><w:rStyle w:val="StringTok" /></w:rPr><w:t xml:space="preserve">&quot;West&quot;</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">) </w:t></w:r><w:r><w:rPr><w:rStyle w:val="OperatorTok" /></w:rPr><w:t xml:space="preserve">&amp;</w:t></w:r><w:r><w:rPr><w:rStyle w:val="StringTok" /></w:rPr><w:t xml:space="preserve"> </w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">rate </w:t></w:r><w:r><w:rPr><w:rStyle w:val="OperatorTok" /></w:rPr><w:t xml:space="preserve">&lt;</w:t></w:r><w:r><w:rPr><w:rStyle w:val="StringTok" /></w:rPr><w:t xml:space="preserve"> </w:t></w:r><w:r><w:rPr><w:rStyle w:val="DecValTok" /></w:rPr><w:t xml:space="preserve">1</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">) </w:t></w:r><w:r><w:rPr><w:rStyle w:val="OperatorTok" /></w:rPr><w:t xml:space="preserve">%&gt;%</w:t></w:r><w:r><w:rPr><w:rStyle w:val="StringTok" /></w:rPr><w:t xml:space="preserve"> </w:t></w:r><w:r><w:rPr><w:rStyle w:val="KeywordTok" /></w:rPr><w:t xml:space="preserve">select</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">(state, rate, rank)</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="SourceCode" /></w:pPr><w:r><w:rPr><w:rStyle w:val="VerbatimChar" /></w:rPr><w:t xml:space="preserve">##           state  rate rank</w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="VerbatimChar" /></w:rPr><w:t xml:space="preserve">## 1        Hawaii 0.515   49</w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="VerbatimChar" /></w:rPr><w:t xml:space="preserve">## 2         Idaho 0.766   46</w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="VerbatimChar" /></w:rPr><w:t xml:space="preserve">## 3         Maine 0.828   44</w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="VerbatimChar" /></w:rPr><w:t xml:space="preserve">## 4 New Hampshire 0.380   50</w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="VerbatimChar" /></w:rPr><w:t xml:space="preserve">## 5        Oregon 0.940   42</w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="VerbatimChar" /></w:rPr><w:t xml:space="preserve">## 6          Utah 0.796   45</w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="VerbatimChar" /></w:rPr><w:t xml:space="preserve">## 7       Vermont 0.320   51</w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="VerbatimChar" /></w:rPr><w:t xml:space="preserve">## 8       Wyoming 0.887   43</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="Compact" /><w:numPr><w:numId w:val="1084" /><w:ilvl w:val="0" /></w:numPr></w:pPr><w:r><w:t xml:space="preserve">Now we will reset murders to the original table by using</w:t></w:r><w:r><w:t xml:space="preserve"> </w:t></w:r><w:r><w:rPr><w:rStyle w:val="VerbatimChar" /></w:rPr><w:t xml:space="preserve">data(murders)</w:t></w:r><w:r><w:t xml:space="preserve">.</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="SourceCode" /></w:pPr><w:r><w:rPr><w:rStyle w:val="CommentTok" /></w:rPr><w:t xml:space="preserve"># Loading the table</w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="KeywordTok" /></w:rPr><w:t xml:space="preserve">data</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">(murders)</w:t></w:r><w:r><w:br /></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="CommentTok" /></w:rPr><w:t xml:space="preserve"># Create new data frame called my_states (with specifications in the instructions)</w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">my_states &lt;-</w:t></w:r><w:r><w:rPr><w:rStyle w:val="StringTok" /></w:rPr><w:t xml:space="preserve"> </w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">murders </w:t></w:r><w:r><w:rPr><w:rStyle w:val="OperatorTok" /></w:rPr><w:t xml:space="preserve">%&gt;%</w:t></w:r><w:r><w:rPr><w:rStyle w:val="StringTok" /></w:rPr><w:t xml:space="preserve"> </w:t></w:r><w:r><w:rPr><w:rStyle w:val="KeywordTok" /></w:rPr><w:t xml:space="preserve">mutate</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">(</w:t></w:r><w:r><w:rPr><w:rStyle w:val="DataTypeTok" /></w:rPr><w:t xml:space="preserve">rate =</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">  total </w:t></w:r><w:r><w:rPr><w:rStyle w:val="OperatorTok" /></w:rPr><w:t xml:space="preserve">/</w:t></w:r><w:r><w:rPr><w:rStyle w:val="StringTok" /></w:rPr><w:t xml:space="preserve"> </w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">population </w:t></w:r><w:r><w:rPr><w:rStyle w:val="OperatorTok" /></w:rPr><w:t xml:space="preserve">*</w:t></w:r><w:r><w:rPr><w:rStyle w:val="StringTok" /></w:rPr><w:t xml:space="preserve"> </w:t></w:r><w:r><w:rPr><w:rStyle w:val="DecValTok" /></w:rPr><w:t xml:space="preserve">100000</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">, </w:t></w:r><w:r><w:rPr><w:rStyle w:val="DataTypeTok" /></w:rPr><w:t xml:space="preserve">rank =</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve"> </w:t></w:r><w:r><w:rPr><w:rStyle w:val="KeywordTok" /></w:rPr><w:t xml:space="preserve">rank</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">(</w:t></w:r><w:r><w:rPr><w:rStyle w:val="OperatorTok" /></w:rPr><w:t xml:space="preserve">-</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">rate)) </w:t></w:r><w:r><w:rPr><w:rStyle w:val="OperatorTok" /></w:rPr><w:t xml:space="preserve">%&gt;%</w:t></w:r><w:r><w:rPr><w:rStyle w:val="StringTok" /></w:rPr><w:t xml:space="preserve"> </w:t></w:r><w:r><w:rPr><w:rStyle w:val="KeywordTok" /></w:rPr><w:t xml:space="preserve">filter</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">(region </w:t></w:r><w:r><w:rPr><w:rStyle w:val="OperatorTok" /></w:rPr><w:t xml:space="preserve">%in%</w:t></w:r><w:r><w:rPr><w:rStyle w:val="StringTok" /></w:rPr><w:t xml:space="preserve"> </w:t></w:r><w:r><w:rPr><w:rStyle w:val="KeywordTok" /></w:rPr><w:t xml:space="preserve">c</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">(</w:t></w:r><w:r><w:rPr><w:rStyle w:val="StringTok" /></w:rPr><w:t xml:space="preserve">&quot;Northeast&quot;</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">, </w:t></w:r><w:r><w:rPr><w:rStyle w:val="StringTok" /></w:rPr><w:t xml:space="preserve">&quot;West&quot;</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">) </w:t></w:r><w:r><w:rPr><w:rStyle w:val="OperatorTok" /></w:rPr><w:t xml:space="preserve">&amp;</w:t></w:r><w:r><w:rPr><w:rStyle w:val="StringTok" /></w:rPr><w:t xml:space="preserve"> </w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">rate </w:t></w:r><w:r><w:rPr><w:rStyle w:val="OperatorTok" /></w:rPr><w:t xml:space="preserve">&lt;</w:t></w:r><w:r><w:rPr><w:rStyle w:val="StringTok" /></w:rPr><w:t xml:space="preserve"> </w:t></w:r><w:r><w:rPr><w:rStyle w:val="DecValTok" /></w:rPr><w:t xml:space="preserve">1</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">) </w:t></w:r><w:r><w:rPr><w:rStyle w:val="OperatorTok" /></w:rPr><w:t xml:space="preserve">%&gt;%</w:t></w:r><w:r><w:rPr><w:rStyle w:val="StringTok" /></w:rPr><w:t xml:space="preserve"> </w:t></w:r><w:r><w:rPr><w:rStyle w:val="KeywordTok" /></w:rPr><w:t xml:space="preserve">select</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">(state, rate, rank)</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="Heading2" /></w:pPr><w:bookmarkStart w:id="75" w:name="basic-plots" /><w:r><w:t xml:space="preserve">Basic Plots</w:t></w:r><w:bookmarkEnd w:id="75" /></w:p><w:p><w:pPr><w:pStyle w:val="FirstParagraph" /></w:pPr><w:r><w:t xml:space="preserve">Here is a link to the textbook section on</w:t></w:r><w:r><w:t xml:space="preserve"> </w:t></w:r><w:hyperlink r:id="rId76"><w:r><w:rPr><w:rStyle w:val="Hyperlink" /></w:rPr><w:t xml:space="preserve">basic plots</w:t></w:r></w:hyperlink></w:p><w:p><w:pPr><w:pStyle w:val="BodyText" /></w:pPr><w:r><w:rPr><w:b /></w:rPr><w:t xml:space="preserve">Key Points</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="Compact" /><w:numPr><w:numId w:val="1085" /><w:ilvl w:val="0" /></w:numPr></w:pPr><w:r><w:t xml:space="preserve">We can create a simple scatterplot using the function</w:t></w:r><w:r><w:t xml:space="preserve"> </w:t></w:r><w:r><w:rPr><w:rStyle w:val="VerbatimChar" /></w:rPr><w:t xml:space="preserve">plot()</w:t></w:r><w:r><w:t xml:space="preserve">.</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="Compact" /><w:numPr><w:numId w:val="1085" /><w:ilvl w:val="0" /></w:numPr></w:pPr><w:r><w:t xml:space="preserve">Histograms are graphical summaries that give you a general overview of the types of values you have. In R, they can be produced using the</w:t></w:r><w:r><w:t xml:space="preserve"> </w:t></w:r><w:r><w:rPr><w:rStyle w:val="VerbatimChar" /></w:rPr><w:t xml:space="preserve">hist()</w:t></w:r><w:r><w:t xml:space="preserve"> </w:t></w:r><w:r><w:t xml:space="preserve">function.</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="Compact" /><w:numPr><w:numId w:val="1085" /><w:ilvl w:val="0" /></w:numPr></w:pPr><w:r><w:t xml:space="preserve">Boxplots provide a more compact summary of a distribution than a histogram and are more useful for comparing distributions. They can be produced using the ```boxplot() function.</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="FirstParagraph" /></w:pPr><w:r><w:rPr><w:i /></w:rPr><w:t xml:space="preserve">Code</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="SourceCode" /></w:pPr><w:r><w:rPr><w:rStyle w:val="CommentTok" /></w:rPr><w:t xml:space="preserve"># a simple scatterplot of total murders versus population</w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">x &lt;-</w:t></w:r><w:r><w:rPr><w:rStyle w:val="StringTok" /></w:rPr><w:t xml:space="preserve"> </w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">murders</w:t></w:r><w:r><w:rPr><w:rStyle w:val="OperatorTok" /></w:rPr><w:t xml:space="preserve">$</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">population </w:t></w:r><w:r><w:rPr><w:rStyle w:val="OperatorTok" /></w:rPr><w:t xml:space="preserve">/</w:t></w:r><w:r><w:rPr><w:rStyle w:val="StringTok" /></w:rPr><w:t xml:space="preserve"> </w:t></w:r><w:r><w:rPr><w:rStyle w:val="DecValTok" /></w:rPr><w:t xml:space="preserve">10</w:t></w:r><w:r><w:rPr><w:rStyle w:val="OperatorTok" /></w:rPr><w:t xml:space="preserve">^</w:t></w:r><w:r><w:rPr><w:rStyle w:val="DecValTok" /></w:rPr><w:t xml:space="preserve">6</w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">y &lt;-</w:t></w:r><w:r><w:rPr><w:rStyle w:val="StringTok" /></w:rPr><w:t xml:space="preserve"> </w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">murders</w:t></w:r><w:r><w:rPr><w:rStyle w:val="OperatorTok" /></w:rPr><w:t xml:space="preserve">$</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">total</w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="KeywordTok" /></w:rPr><w:t xml:space="preserve">plot</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">(x, y)</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="FirstParagraph" /></w:pPr><w:r><w:drawing><wp:inline><wp:extent cx="5334000" cy="4267200" /><wp:effectExtent b="0" l="0" r="0" t="0" /><wp:docPr descr="" title="" id="1" name="Picture" /><a:graphic><a:graphicData uri="http://schemas.openxmlformats.org/drawingml/2006/picture"><pic:pic><pic:nvPicPr><pic:cNvPr descr="Data_Science_R_Basics_files/figure-docx/unnamed-chunk-98-1.png" id="0" name="Picture" /><pic:cNvPicPr><a:picLocks noChangeArrowheads="1" noChangeAspect="1" /></pic:cNvPicPr></pic:nvPicPr><pic:blipFill><a:blip r:embed="rId77" /><a:stretch><a:fillRect /></a:stretch></pic:blipFill><pic:spPr bwMode="auto"><a:xfrm><a:off x="0" y="0" /><a:ext cx="5334000" cy="4267200" /></a:xfrm><a:prstGeom prst="rect"><a:avLst /></a:prstGeom><a:noFill /><a:ln w="9525"><a:noFill /><a:headEnd /><a:tailEnd /></a:ln></pic:spPr></pic:pic></a:graphicData></a:graphic></wp:inline></w:drawing></w:r></w:p><w:p><w:pPr><w:pStyle w:val="SourceCode" /></w:pPr><w:r><w:rPr><w:rStyle w:val="CommentTok" /></w:rPr><w:t xml:space="preserve"># a histogram of murder rates</w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="KeywordTok" /></w:rPr><w:t xml:space="preserve">hist</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">(rate)</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="FirstParagraph" /></w:pPr><w:r><w:drawing><wp:inline><wp:extent cx="5334000" cy="4267200" /><wp:effectExtent b="0" l="0" r="0" t="0" /><wp:docPr descr="" title="" id="1" name="Picture" /><a:graphic><a:graphicData uri="http://schemas.openxmlformats.org/drawingml/2006/picture"><pic:pic><pic:nvPicPr><pic:cNvPr descr="Data_Science_R_Basics_files/figure-docx/unnamed-chunk-98-2.png" id="0" name="Picture" /><pic:cNvPicPr><a:picLocks noChangeArrowheads="1" noChangeAspect="1" /></pic:cNvPicPr></pic:nvPicPr><pic:blipFill><a:blip r:embed="rId78" /><a:stretch><a:fillRect /></a:stretch></pic:blipFill><pic:spPr bwMode="auto"><a:xfrm><a:off x="0" y="0" /><a:ext cx="5334000" cy="4267200" /></a:xfrm><a:prstGeom prst="rect"><a:avLst /></a:prstGeom><a:noFill /><a:ln w="9525"><a:noFill /><a:headEnd /><a:tailEnd /></a:ln></pic:spPr></pic:pic></a:graphicData></a:graphic></wp:inline></w:drawing></w:r></w:p><w:p><w:pPr><w:pStyle w:val="SourceCode" /></w:pPr><w:r><w:rPr><w:rStyle w:val="CommentTok" /></w:rPr><w:t xml:space="preserve"># boxplots of murder rates by region</w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="KeywordTok" /></w:rPr><w:t xml:space="preserve">boxplot</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">(rate</w:t></w:r><w:r><w:rPr><w:rStyle w:val="OperatorTok" /></w:rPr><w:t xml:space="preserve">~</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">region, </w:t></w:r><w:r><w:rPr><w:rStyle w:val="DataTypeTok" /></w:rPr><w:t xml:space="preserve">data =</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve"> murders)</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="FirstParagraph" /></w:pPr><w:r><w:drawing><wp:inline><wp:extent cx="5334000" cy="4267200" /><wp:effectExtent b="0" l="0" r="0" t="0" /><wp:docPr descr="" title="" id="1" name="Picture" /><a:graphic><a:graphicData uri="http://schemas.openxmlformats.org/drawingml/2006/picture"><pic:pic><pic:nvPicPr><pic:cNvPr descr="Data_Science_R_Basics_files/figure-docx/unnamed-chunk-98-3.png" id="0" name="Picture" /><pic:cNvPicPr><a:picLocks noChangeArrowheads="1" noChangeAspect="1" /></pic:cNvPicPr></pic:nvPicPr><pic:blipFill><a:blip r:embed="rId79" /><a:stretch><a:fillRect /></a:stretch></pic:blipFill><pic:spPr bwMode="auto"><a:xfrm><a:off x="0" y="0" /><a:ext cx="5334000" cy="4267200" /></a:xfrm><a:prstGeom prst="rect"><a:avLst /></a:prstGeom><a:noFill /><a:ln w="9525"><a:noFill /><a:headEnd /><a:tailEnd /></a:ln></pic:spPr></pic:pic></a:graphicData></a:graphic></wp:inline></w:drawing></w:r></w:p><w:p><w:pPr><w:pStyle w:val="Heading2" /></w:pPr><w:bookmarkStart w:id="80" w:name="assessment---basic-plots" /><w:r><w:t xml:space="preserve">Assessment - Basic Plots</w:t></w:r><w:bookmarkEnd w:id="80" /></w:p><w:p><w:pPr><w:pStyle w:val="Compact" /><w:numPr><w:numId w:val="1086" /><w:ilvl w:val="0" /></w:numPr></w:pPr><w:r><w:t xml:space="preserve">We made a plot of total murders versus population and noted a strong relationship: not surprisingly, states with larger populations had more murders.</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="FirstParagraph" /></w:pPr><w:r><w:t xml:space="preserve">You can run the code in the console to get the plot.</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="SourceCode" /></w:pPr><w:r><w:rPr><w:rStyle w:val="KeywordTok" /></w:rPr><w:t xml:space="preserve">library</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">(dslabs)</w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="KeywordTok" /></w:rPr><w:t xml:space="preserve">data</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">(murders)</w:t></w:r><w:r><w:br /></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">population_in_millions &lt;-</w:t></w:r><w:r><w:rPr><w:rStyle w:val="StringTok" /></w:rPr><w:t xml:space="preserve"> </w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">murders</w:t></w:r><w:r><w:rPr><w:rStyle w:val="OperatorTok" /></w:rPr><w:t xml:space="preserve">$</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">population</w:t></w:r><w:r><w:rPr><w:rStyle w:val="OperatorTok" /></w:rPr><w:t xml:space="preserve">/</w:t></w:r><w:r><w:rPr><w:rStyle w:val="DecValTok" /></w:rPr><w:t xml:space="preserve">10</w:t></w:r><w:r><w:rPr><w:rStyle w:val="OperatorTok" /></w:rPr><w:t xml:space="preserve">^</w:t></w:r><w:r><w:rPr><w:rStyle w:val="DecValTok" /></w:rPr><w:t xml:space="preserve">6</w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">total_gun_murders </w:t></w:r><w:r><w:rPr><w:rStyle w:val="OperatorTok" /></w:rPr><w:t xml:space="preserve">&lt;</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">− murders</w:t></w:r><w:r><w:rPr><w:rStyle w:val="OperatorTok" /></w:rPr><w:t xml:space="preserve">$</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">total</w:t></w:r><w:r><w:br /></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="KeywordTok" /></w:rPr><w:t xml:space="preserve">plot</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">(population_in_millions, total_gun_murders)</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="FirstParagraph" /></w:pPr><w:r><w:t xml:space="preserve">Note that many states have populations below 5 million and are bunched up in the plot. We may gain further insights from making this plot in the log scale.</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="SourceCode" /></w:pPr><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">population_in_millions &lt;-</w:t></w:r><w:r><w:rPr><w:rStyle w:val="StringTok" /></w:rPr><w:t xml:space="preserve"> </w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">murders</w:t></w:r><w:r><w:rPr><w:rStyle w:val="OperatorTok" /></w:rPr><w:t xml:space="preserve">$</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">population</w:t></w:r><w:r><w:rPr><w:rStyle w:val="OperatorTok" /></w:rPr><w:t xml:space="preserve">/</w:t></w:r><w:r><w:rPr><w:rStyle w:val="DecValTok" /></w:rPr><w:t xml:space="preserve">10</w:t></w:r><w:r><w:rPr><w:rStyle w:val="OperatorTok" /></w:rPr><w:t xml:space="preserve">^</w:t></w:r><w:r><w:rPr><w:rStyle w:val="DecValTok" /></w:rPr><w:t xml:space="preserve">6</w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">total_gun_murders &lt;-</w:t></w:r><w:r><w:rPr><w:rStyle w:val="StringTok" /></w:rPr><w:t xml:space="preserve"> </w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">murders</w:t></w:r><w:r><w:rPr><w:rStyle w:val="OperatorTok" /></w:rPr><w:t xml:space="preserve">$</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">total</w:t></w:r><w:r><w:br /></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="KeywordTok" /></w:rPr><w:t xml:space="preserve">plot</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">(population_in_millions, total_gun_murders)</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="FirstParagraph" /></w:pPr><w:r><w:drawing><wp:inline><wp:extent cx="5334000" cy="4267200" /><wp:effectExtent b="0" l="0" r="0" t="0" /><wp:docPr descr="" title="" id="1" name="Picture" /><a:graphic><a:graphicData uri="http://schemas.openxmlformats.org/drawingml/2006/picture"><pic:pic><pic:nvPicPr><pic:cNvPr descr="Data_Science_R_Basics_files/figure-docx/unnamed-chunk-100-1.png" id="0" name="Picture" /><pic:cNvPicPr><a:picLocks noChangeArrowheads="1" noChangeAspect="1" /></pic:cNvPicPr></pic:nvPicPr><pic:blipFill><a:blip r:embed="rId81" /><a:stretch><a:fillRect /></a:stretch></pic:blipFill><pic:spPr bwMode="auto"><a:xfrm><a:off x="0" y="0" /><a:ext cx="5334000" cy="4267200" /></a:xfrm><a:prstGeom prst="rect"><a:avLst /></a:prstGeom><a:noFill /><a:ln w="9525"><a:noFill /><a:headEnd /><a:tailEnd /></a:ln></pic:spPr></pic:pic></a:graphicData></a:graphic></wp:inline></w:drawing></w:r></w:p><w:p><w:pPr><w:pStyle w:val="SourceCode" /></w:pPr><w:r><w:rPr><w:rStyle w:val="CommentTok" /></w:rPr><w:t xml:space="preserve"># Transform population using the log10 transformation and save to object log10_population</w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">log10_population &lt;-</w:t></w:r><w:r><w:rPr><w:rStyle w:val="StringTok" /></w:rPr><w:t xml:space="preserve"> </w:t></w:r><w:r><w:rPr><w:rStyle w:val="KeywordTok" /></w:rPr><w:t xml:space="preserve">log10</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">(murders</w:t></w:r><w:r><w:rPr><w:rStyle w:val="OperatorTok" /></w:rPr><w:t xml:space="preserve">$</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">population)</w:t></w:r><w:r><w:br /></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="CommentTok" /></w:rPr><w:t xml:space="preserve"># Transform total gun murders using log10 transformation and save to object log10_total_gun_murders</w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">log10_total_gun_murders &lt;-</w:t></w:r><w:r><w:rPr><w:rStyle w:val="StringTok" /></w:rPr><w:t xml:space="preserve"> </w:t></w:r><w:r><w:rPr><w:rStyle w:val="KeywordTok" /></w:rPr><w:t xml:space="preserve">log10</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">(total_gun_murders)</w:t></w:r><w:r><w:br /></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="CommentTok" /></w:rPr><w:t xml:space="preserve"># Create a scatterplot with the log scale transformed population and murders </w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="KeywordTok" /></w:rPr><w:t xml:space="preserve">plot</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">(log10_population, log10_total_gun_murders)</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="FirstParagraph" /></w:pPr><w:r><w:drawing><wp:inline><wp:extent cx="5334000" cy="4267200" /><wp:effectExtent b="0" l="0" r="0" t="0" /><wp:docPr descr="" title="" id="1" name="Picture" /><a:graphic><a:graphicData uri="http://schemas.openxmlformats.org/drawingml/2006/picture"><pic:pic><pic:nvPicPr><pic:cNvPr descr="Data_Science_R_Basics_files/figure-docx/unnamed-chunk-100-2.png" id="0" name="Picture" /><pic:cNvPicPr><a:picLocks noChangeArrowheads="1" noChangeAspect="1" /></pic:cNvPicPr></pic:nvPicPr><pic:blipFill><a:blip r:embed="rId82" /><a:stretch><a:fillRect /></a:stretch></pic:blipFill><pic:spPr bwMode="auto"><a:xfrm><a:off x="0" y="0" /><a:ext cx="5334000" cy="4267200" /></a:xfrm><a:prstGeom prst="rect"><a:avLst /></a:prstGeom><a:noFill /><a:ln w="9525"><a:noFill /><a:headEnd /><a:tailEnd /></a:ln></pic:spPr></pic:pic></a:graphicData></a:graphic></wp:inline></w:drawing></w:r></w:p><w:p><w:pPr><w:pStyle w:val="Compact" /><w:numPr><w:numId w:val="1087" /><w:ilvl w:val="0" /></w:numPr></w:pPr><w:r><w:t xml:space="preserve">Now we are going to make a histogram.</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="SourceCode" /></w:pPr><w:r><w:rPr><w:rStyle w:val="CommentTok" /></w:rPr><w:t xml:space="preserve"># Store the population in millions and save to population_in_millions </w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">population_in_millions &lt;-</w:t></w:r><w:r><w:rPr><w:rStyle w:val="StringTok" /></w:rPr><w:t xml:space="preserve"> </w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">murders</w:t></w:r><w:r><w:rPr><w:rStyle w:val="OperatorTok" /></w:rPr><w:t xml:space="preserve">$</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">population</w:t></w:r><w:r><w:rPr><w:rStyle w:val="OperatorTok" /></w:rPr><w:t xml:space="preserve">/</w:t></w:r><w:r><w:rPr><w:rStyle w:val="DecValTok" /></w:rPr><w:t xml:space="preserve">10</w:t></w:r><w:r><w:rPr><w:rStyle w:val="OperatorTok" /></w:rPr><w:t xml:space="preserve">^</w:t></w:r><w:r><w:rPr><w:rStyle w:val="DecValTok" /></w:rPr><w:t xml:space="preserve">6</w:t></w:r><w:r><w:br /></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="CommentTok" /></w:rPr><w:t xml:space="preserve"># Create a histogram of this variable</w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="KeywordTok" /></w:rPr><w:t xml:space="preserve">hist</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">(population_in_millions)</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="FirstParagraph" /></w:pPr><w:r><w:drawing><wp:inline><wp:extent cx="5334000" cy="4267200" /><wp:effectExtent b="0" l="0" r="0" t="0" /><wp:docPr descr="" title="" id="1" name="Picture" /><a:graphic><a:graphicData uri="http://schemas.openxmlformats.org/drawingml/2006/picture"><pic:pic><pic:nvPicPr><pic:cNvPr descr="Data_Science_R_Basics_files/figure-docx/unnamed-chunk-101-1.png" id="0" name="Picture" /><pic:cNvPicPr><a:picLocks noChangeArrowheads="1" noChangeAspect="1" /></pic:cNvPicPr></pic:nvPicPr><pic:blipFill><a:blip r:embed="rId83" /><a:stretch><a:fillRect /></a:stretch></pic:blipFill><pic:spPr bwMode="auto"><a:xfrm><a:off x="0" y="0" /><a:ext cx="5334000" cy="4267200" /></a:xfrm><a:prstGeom prst="rect"><a:avLst /></a:prstGeom><a:noFill /><a:ln w="9525"><a:noFill /><a:headEnd /><a:tailEnd /></a:ln></pic:spPr></pic:pic></a:graphicData></a:graphic></wp:inline></w:drawing></w:r></w:p><w:p><w:pPr><w:pStyle w:val="Compact" /><w:numPr><w:numId w:val="1088" /><w:ilvl w:val="0" /></w:numPr></w:pPr><w:r><w:t xml:space="preserve">Now we are going to make boxplots. Boxplots are useful when we want a summary of several variables or several strata of the same variables. Making too many histograms can become too cumbersome.</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="SourceCode" /></w:pPr><w:r><w:rPr><w:rStyle w:val="CommentTok" /></w:rPr><w:t xml:space="preserve"># Create a boxplot of state populations by region for the murders dataset</w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="KeywordTok" /></w:rPr><w:t xml:space="preserve">boxplot</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">(population</w:t></w:r><w:r><w:rPr><w:rStyle w:val="OperatorTok" /></w:rPr><w:t xml:space="preserve">~</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">region, </w:t></w:r><w:r><w:rPr><w:rStyle w:val="DataTypeTok" /></w:rPr><w:t xml:space="preserve">data =</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve"> murders)</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="FirstParagraph" /></w:pPr><w:r><w:drawing><wp:inline><wp:extent cx="5334000" cy="4267200" /><wp:effectExtent b="0" l="0" r="0" t="0" /><wp:docPr descr="" title="" id="1" name="Picture" /><a:graphic><a:graphicData uri="http://schemas.openxmlformats.org/drawingml/2006/picture"><pic:pic><pic:nvPicPr><pic:cNvPr descr="Data_Science_R_Basics_files/figure-docx/unnamed-chunk-102-1.png" id="0" name="Picture" /><pic:cNvPicPr><a:picLocks noChangeArrowheads="1" noChangeAspect="1" /></pic:cNvPicPr></pic:nvPicPr><pic:blipFill><a:blip r:embed="rId84" /><a:stretch><a:fillRect /></a:stretch></pic:blipFill><pic:spPr bwMode="auto"><a:xfrm><a:off x="0" y="0" /><a:ext cx="5334000" cy="4267200" /></a:xfrm><a:prstGeom prst="rect"><a:avLst /></a:prstGeom><a:noFill /><a:ln w="9525"><a:noFill /><a:headEnd /><a:tailEnd /></a:ln></pic:spPr></pic:pic></a:graphicData></a:graphic></wp:inline></w:drawing></w:r></w:p><w:p><w:pPr><w:pStyle w:val="Heading2" /></w:pPr><w:bookmarkStart w:id="85" w:name="section-3-assessment" /><w:r><w:t xml:space="preserve">Section 3 Assessment</w:t></w:r><w:bookmarkEnd w:id="85" /></w:p><w:p><w:pPr><w:pStyle w:val="SourceCode" /></w:pPr><w:r><w:rPr><w:rStyle w:val="KeywordTok" /></w:rPr><w:t xml:space="preserve">data</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">(heights)</w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="KeywordTok" /></w:rPr><w:t xml:space="preserve">options</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">(</w:t></w:r><w:r><w:rPr><w:rStyle w:val="DataTypeTok" /></w:rPr><w:t xml:space="preserve">digits =</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve"> </w:t></w:r><w:r><w:rPr><w:rStyle w:val="DecValTok" /></w:rPr><w:t xml:space="preserve">3</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">)    </w:t></w:r><w:r><w:rPr><w:rStyle w:val="CommentTok" /></w:rPr><w:t xml:space="preserve"># report 3 significant digits for all answers</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="Compact" /><w:numPr><w:numId w:val="1089" /><w:ilvl w:val="0" /></w:numPr></w:pPr><w:r><w:t xml:space="preserve">First, determine the average height in this dataset. Then create a logical vector</w:t></w:r><w:r><w:t xml:space="preserve"> </w:t></w:r><w:r><w:rPr><w:rStyle w:val="VerbatimChar" /></w:rPr><w:t xml:space="preserve">ind</w:t></w:r><w:r><w:t xml:space="preserve"> </w:t></w:r><w:r><w:t xml:space="preserve">with the indices for those individuals who are above average height.</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="FirstParagraph" /></w:pPr><w:r><w:t xml:space="preserve">How many individuals in the dataset are above average height?</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="SourceCode" /></w:pPr><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">ind &lt;-</w:t></w:r><w:r><w:rPr><w:rStyle w:val="StringTok" /></w:rPr><w:t xml:space="preserve"> </w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">heights</w:t></w:r><w:r><w:rPr><w:rStyle w:val="OperatorTok" /></w:rPr><w:t xml:space="preserve">$</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">height </w:t></w:r><w:r><w:rPr><w:rStyle w:val="OperatorTok" /></w:rPr><w:t xml:space="preserve">&gt;</w:t></w:r><w:r><w:rPr><w:rStyle w:val="StringTok" /></w:rPr><w:t xml:space="preserve"> </w:t></w:r><w:r><w:rPr><w:rStyle w:val="KeywordTok" /></w:rPr><w:t xml:space="preserve">mean</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">(heights</w:t></w:r><w:r><w:rPr><w:rStyle w:val="OperatorTok" /></w:rPr><w:t xml:space="preserve">$</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">height)</w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="KeywordTok" /></w:rPr><w:t xml:space="preserve">sum</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">(ind)</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="SourceCode" /></w:pPr><w:r><w:rPr><w:rStyle w:val="VerbatimChar" /></w:rPr><w:t xml:space="preserve">## [1] 532</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="Compact" /><w:numPr><w:numId w:val="1090" /><w:ilvl w:val="0" /></w:numPr></w:pPr><w:r><w:t xml:space="preserve">How many individuals in the dataset are above average height and are female?</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="SourceCode" /></w:pPr><w:r><w:rPr><w:rStyle w:val="KeywordTok" /></w:rPr><w:t xml:space="preserve">sum</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">(ind </w:t></w:r><w:r><w:rPr><w:rStyle w:val="OperatorTok" /></w:rPr><w:t xml:space="preserve">&amp;</w:t></w:r><w:r><w:rPr><w:rStyle w:val="StringTok" /></w:rPr><w:t xml:space="preserve"> </w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">heights</w:t></w:r><w:r><w:rPr><w:rStyle w:val="OperatorTok" /></w:rPr><w:t xml:space="preserve">$</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">sex</w:t></w:r><w:r><w:rPr><w:rStyle w:val="OperatorTok" /></w:rPr><w:t xml:space="preserve">==</w:t></w:r><w:r><w:rPr><w:rStyle w:val="StringTok" /></w:rPr><w:t xml:space="preserve">&quot;Female&quot;</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">)</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="SourceCode" /></w:pPr><w:r><w:rPr><w:rStyle w:val="VerbatimChar" /></w:rPr><w:t xml:space="preserve">## [1] 31</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="Compact" /><w:numPr><w:numId w:val="1091" /><w:ilvl w:val="0" /></w:numPr></w:pPr><w:r><w:t xml:space="preserve">If you use</w:t></w:r><w:r><w:t xml:space="preserve"> </w:t></w:r><w:r><w:rPr><w:rStyle w:val="VerbatimChar" /></w:rPr><w:t xml:space="preserve">mean</w:t></w:r><w:r><w:t xml:space="preserve"> </w:t></w:r><w:r><w:t xml:space="preserve">on a logical (TRUE/FALSE) vector, it returns the proportion of observations that are TRUE.</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="FirstParagraph" /></w:pPr><w:r><w:t xml:space="preserve">What proportion of individuals in the dataset are female?</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="SourceCode" /></w:pPr><w:r><w:rPr><w:rStyle w:val="KeywordTok" /></w:rPr><w:t xml:space="preserve">mean</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">(heights</w:t></w:r><w:r><w:rPr><w:rStyle w:val="OperatorTok" /></w:rPr><w:t xml:space="preserve">$</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">sex </w:t></w:r><w:r><w:rPr><w:rStyle w:val="OperatorTok" /></w:rPr><w:t xml:space="preserve">==</w:t></w:r><w:r><w:rPr><w:rStyle w:val="StringTok" /></w:rPr><w:t xml:space="preserve"> &quot;Female&quot;</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">)</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="SourceCode" /></w:pPr><w:r><w:rPr><w:rStyle w:val="VerbatimChar" /></w:rPr><w:t xml:space="preserve">## [1] 0.227</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="Compact" /><w:numPr><w:numId w:val="1092" /><w:ilvl w:val="0" /></w:numPr></w:pPr><w:r><w:t xml:space="preserve">This question takes you through three steps to determine the sex of the individual with the minimum height.</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="FirstParagraph" /></w:pPr><w:r><w:t xml:space="preserve">Determine the minimum height in the</w:t></w:r><w:r><w:t xml:space="preserve"> </w:t></w:r><w:r><w:rPr><w:rStyle w:val="VerbatimChar" /></w:rPr><w:t xml:space="preserve">heights</w:t></w:r><w:r><w:t xml:space="preserve"> </w:t></w:r><w:r><w:t xml:space="preserve">dataset.</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="SourceCode" /></w:pPr><w:r><w:rPr><w:rStyle w:val="KeywordTok" /></w:rPr><w:t xml:space="preserve">min</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">(heights</w:t></w:r><w:r><w:rPr><w:rStyle w:val="OperatorTok" /></w:rPr><w:t xml:space="preserve">$</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">height)</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="SourceCode" /></w:pPr><w:r><w:rPr><w:rStyle w:val="VerbatimChar" /></w:rPr><w:t xml:space="preserve">## [1] 50</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="FirstParagraph" /></w:pPr><w:r><w:t xml:space="preserve">Use the</w:t></w:r><w:r><w:t xml:space="preserve"> </w:t></w:r><w:r><w:rPr><w:rStyle w:val="VerbatimChar" /></w:rPr><w:t xml:space="preserve">match()</w:t></w:r><w:r><w:t xml:space="preserve"> </w:t></w:r><w:r><w:t xml:space="preserve">function to determine the index of the individual with the minimum height.</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="SourceCode" /></w:pPr><w:r><w:rPr><w:rStyle w:val="KeywordTok" /></w:rPr><w:t xml:space="preserve">match</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">(</w:t></w:r><w:r><w:rPr><w:rStyle w:val="DecValTok" /></w:rPr><w:t xml:space="preserve">50</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">,heights</w:t></w:r><w:r><w:rPr><w:rStyle w:val="OperatorTok" /></w:rPr><w:t xml:space="preserve">$</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">height)</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="SourceCode" /></w:pPr><w:r><w:rPr><w:rStyle w:val="VerbatimChar" /></w:rPr><w:t xml:space="preserve">## [1] 1032</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="FirstParagraph" /></w:pPr><w:r><w:t xml:space="preserve">Subset the</w:t></w:r><w:r><w:t xml:space="preserve"> </w:t></w:r><w:r><w:rPr><w:rStyle w:val="VerbatimChar" /></w:rPr><w:t xml:space="preserve">sex</w:t></w:r><w:r><w:t xml:space="preserve"> </w:t></w:r><w:r><w:t xml:space="preserve">column of the dataset by the index above to determine the individual’s sex.</w:t></w:r><w:r><w:t xml:space="preserve"> </w:t></w:r><w:r><w:rPr><w:rStyle w:val="VerbatimChar" /></w:rPr><w:t xml:space="preserve">Male</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="SourceCode" /></w:pPr><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">heights</w:t></w:r><w:r><w:rPr><w:rStyle w:val="OperatorTok" /></w:rPr><w:t xml:space="preserve">$</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">sex[</w:t></w:r><w:r><w:rPr><w:rStyle w:val="DecValTok" /></w:rPr><w:t xml:space="preserve">1032</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">]</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="SourceCode" /></w:pPr><w:r><w:rPr><w:rStyle w:val="VerbatimChar" /></w:rPr><w:t xml:space="preserve">## [1] Male</w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="VerbatimChar" /></w:rPr><w:t xml:space="preserve">## Levels: Female Male</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="Compact" /><w:numPr><w:numId w:val="1093" /><w:ilvl w:val="0" /></w:numPr></w:pPr><w:r><w:t xml:space="preserve">This question takes you through three steps to determine how many of the integer height values between the minimum and maximum heights are not actual heights of individuals in the heights dataset.</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="FirstParagraph" /></w:pPr><w:r><w:t xml:space="preserve">Determine the maximum height.</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="SourceCode" /></w:pPr><w:r><w:rPr><w:rStyle w:val="KeywordTok" /></w:rPr><w:t xml:space="preserve">max</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">(heights</w:t></w:r><w:r><w:rPr><w:rStyle w:val="OperatorTok" /></w:rPr><w:t xml:space="preserve">$</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">height)</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="SourceCode" /></w:pPr><w:r><w:rPr><w:rStyle w:val="VerbatimChar" /></w:rPr><w:t xml:space="preserve">## [1] 82.7</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="FirstParagraph" /></w:pPr><w:r><w:t xml:space="preserve">Which integer values are between the maximum and minimum heights? For example, if the minimum height is 10.2 and the maximum height is 20.8, your answer should be</w:t></w:r><w:r><w:t xml:space="preserve"> </w:t></w:r><w:r><w:rPr><w:rStyle w:val="VerbatimChar" /></w:rPr><w:t xml:space="preserve">x &lt;- 11:20</w:t></w:r><w:r><w:t xml:space="preserve"> </w:t></w:r><w:r><w:t xml:space="preserve">to capture the integers in between those values. (If either the maximum or minimum height are integers, include those values too.)</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="BodyText" /></w:pPr><w:r><w:t xml:space="preserve">Write code to create a vector x that includes the</w:t></w:r><w:r><w:t xml:space="preserve"> </w:t></w:r><w:r><w:rPr><w:i /></w:rPr><w:t xml:space="preserve">integers</w:t></w:r><w:r><w:t xml:space="preserve"> </w:t></w:r><w:r><w:t xml:space="preserve">between the minimum and maximum heights.</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="SourceCode" /></w:pPr><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">x &lt;-</w:t></w:r><w:r><w:rPr><w:rStyle w:val="StringTok" /></w:rPr><w:t xml:space="preserve"> </w:t></w:r><w:r><w:rPr><w:rStyle w:val="DecValTok" /></w:rPr><w:t xml:space="preserve">50</w:t></w:r><w:r><w:rPr><w:rStyle w:val="OperatorTok" /></w:rPr><w:t xml:space="preserve">:</w:t></w:r><w:r><w:rPr><w:rStyle w:val="DecValTok" /></w:rPr><w:t xml:space="preserve">82</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="FirstParagraph" /></w:pPr><w:r><w:t xml:space="preserve">How many of the integers in x are NOT heights in the dataset?</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="SourceCode" /></w:pPr><w:r><w:rPr><w:rStyle w:val="KeywordTok" /></w:rPr><w:t xml:space="preserve">sum</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">(</w:t></w:r><w:r><w:rPr><w:rStyle w:val="OperatorTok" /></w:rPr><w:t xml:space="preserve">!</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">(x </w:t></w:r><w:r><w:rPr><w:rStyle w:val="OperatorTok" /></w:rPr><w:t xml:space="preserve">%in%</w:t></w:r><w:r><w:rPr><w:rStyle w:val="StringTok" /></w:rPr><w:t xml:space="preserve"> </w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">heights</w:t></w:r><w:r><w:rPr><w:rStyle w:val="OperatorTok" /></w:rPr><w:t xml:space="preserve">$</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">height))</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="SourceCode" /></w:pPr><w:r><w:rPr><w:rStyle w:val="VerbatimChar" /></w:rPr><w:t xml:space="preserve">## [1] 3</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="Compact" /><w:numPr><w:numId w:val="1094" /><w:ilvl w:val="0" /></w:numPr></w:pPr><w:r><w:t xml:space="preserve">Using the</w:t></w:r><w:r><w:t xml:space="preserve"> </w:t></w:r><w:r><w:rPr><w:rStyle w:val="VerbatimChar" /></w:rPr><w:t xml:space="preserve">heights</w:t></w:r><w:r><w:t xml:space="preserve"> </w:t></w:r><w:r><w:t xml:space="preserve">dataset, create a new column of heights in centimeters named</w:t></w:r><w:r><w:t xml:space="preserve"> </w:t></w:r><w:r><w:rPr><w:rStyle w:val="VerbatimChar" /></w:rPr><w:t xml:space="preserve">ht_cm</w:t></w:r><w:r><w:t xml:space="preserve">. Recall that 1 inch =</w:t></w:r><w:r><w:t xml:space="preserve"> </w:t></w:r><w:r><w:t xml:space="preserve">2.54 centimeters. Save the resulting dataset as</w:t></w:r><w:r><w:t xml:space="preserve"> </w:t></w:r><w:r><w:rPr><w:rStyle w:val="VerbatimChar" /></w:rPr><w:t xml:space="preserve">heights2</w:t></w:r><w:r><w:t xml:space="preserve">.</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="FirstParagraph" /></w:pPr><w:r><w:t xml:space="preserve">What is the height in centimeters of the 18th individual (index 18)?</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="SourceCode" /></w:pPr><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">heights2 &lt;-</w:t></w:r><w:r><w:rPr><w:rStyle w:val="StringTok" /></w:rPr><w:t xml:space="preserve"> </w:t></w:r><w:r><w:rPr><w:rStyle w:val="KeywordTok" /></w:rPr><w:t xml:space="preserve">mutate</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">(heights, </w:t></w:r><w:r><w:rPr><w:rStyle w:val="DataTypeTok" /></w:rPr><w:t xml:space="preserve">ht_cm =</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve"> height</w:t></w:r><w:r><w:rPr><w:rStyle w:val="OperatorTok" /></w:rPr><w:t xml:space="preserve">*</w:t></w:r><w:r><w:rPr><w:rStyle w:val="FloatTok" /></w:rPr><w:t xml:space="preserve">2.54</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">)</w:t></w:r><w:r><w:br /></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="CommentTok" /></w:rPr><w:t xml:space="preserve"># Then we subset the new heights2 dataset:</w:t></w:r><w:r><w:br /></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">heights2</w:t></w:r><w:r><w:rPr><w:rStyle w:val="OperatorTok" /></w:rPr><w:t xml:space="preserve">$</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">ht_cm[</w:t></w:r><w:r><w:rPr><w:rStyle w:val="DecValTok" /></w:rPr><w:t xml:space="preserve">18</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">]</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="SourceCode" /></w:pPr><w:r><w:rPr><w:rStyle w:val="VerbatimChar" /></w:rPr><w:t xml:space="preserve">## [1] 163</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="FirstParagraph" /></w:pPr><w:r><w:t xml:space="preserve">What is the mean height in centimeters?</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="SourceCode" /></w:pPr><w:r><w:rPr><w:rStyle w:val="KeywordTok" /></w:rPr><w:t xml:space="preserve">mean</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">(heights2</w:t></w:r><w:r><w:rPr><w:rStyle w:val="OperatorTok" /></w:rPr><w:t xml:space="preserve">$</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">ht_cm)</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="SourceCode" /></w:pPr><w:r><w:rPr><w:rStyle w:val="VerbatimChar" /></w:rPr><w:t xml:space="preserve">## [1] 174</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="FirstParagraph" /></w:pPr><w:r><w:t xml:space="preserve">Create a data frame</w:t></w:r><w:r><w:t xml:space="preserve"> </w:t></w:r><w:r><w:rPr><w:rStyle w:val="VerbatimChar" /></w:rPr><w:t xml:space="preserve">females</w:t></w:r><w:r><w:t xml:space="preserve"> </w:t></w:r><w:r><w:t xml:space="preserve">by filtering the</w:t></w:r><w:r><w:t xml:space="preserve"> </w:t></w:r><w:r><w:rPr><w:rStyle w:val="VerbatimChar" /></w:rPr><w:t xml:space="preserve">heights2</w:t></w:r><w:r><w:t xml:space="preserve"> </w:t></w:r><w:r><w:t xml:space="preserve">data to contain only female individuals.</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="BodyText" /></w:pPr><w:r><w:t xml:space="preserve">How many females are in the heights2 dataset?</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="SourceCode" /></w:pPr><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">females &lt;-</w:t></w:r><w:r><w:rPr><w:rStyle w:val="StringTok" /></w:rPr><w:t xml:space="preserve"> </w:t></w:r><w:r><w:rPr><w:rStyle w:val="KeywordTok" /></w:rPr><w:t xml:space="preserve">filter</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">(heights2, sex </w:t></w:r><w:r><w:rPr><w:rStyle w:val="OperatorTok" /></w:rPr><w:t xml:space="preserve">==</w:t></w:r><w:r><w:rPr><w:rStyle w:val="StringTok" /></w:rPr><w:t xml:space="preserve"> &quot;Female&quot;</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">)</w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="KeywordTok" /></w:rPr><w:t xml:space="preserve">nrow</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">(females)</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="SourceCode" /></w:pPr><w:r><w:rPr><w:rStyle w:val="VerbatimChar" /></w:rPr><w:t xml:space="preserve">## [1] 238</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="FirstParagraph" /></w:pPr><w:r><w:t xml:space="preserve">What is the mean height of the females in centimeters?</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="SourceCode" /></w:pPr><w:r><w:rPr><w:rStyle w:val="KeywordTok" /></w:rPr><w:t xml:space="preserve">mean</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">(females</w:t></w:r><w:r><w:rPr><w:rStyle w:val="OperatorTok" /></w:rPr><w:t xml:space="preserve">$</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">ht_cm)</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="SourceCode" /></w:pPr><w:r><w:rPr><w:rStyle w:val="VerbatimChar" /></w:rPr><w:t xml:space="preserve">## [1] 165</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="Compact" /><w:numPr><w:numId w:val="1095" /><w:ilvl w:val="0" /></w:numPr></w:pPr><w:r><w:t xml:space="preserve">The</w:t></w:r><w:r><w:t xml:space="preserve"> </w:t></w:r><w:r><w:rPr><w:rStyle w:val="VerbatimChar" /></w:rPr><w:t xml:space="preserve">olive</w:t></w:r><w:r><w:t xml:space="preserve"> </w:t></w:r><w:r><w:t xml:space="preserve">dataset in</w:t></w:r><w:r><w:t xml:space="preserve"> </w:t></w:r><w:r><w:rPr><w:b /></w:rPr><w:t xml:space="preserve">dslabs</w:t></w:r><w:r><w:t xml:space="preserve"> </w:t></w:r><w:r><w:t xml:space="preserve">contains composition in percentage of eight fatty acids found in the lipid fraction of 572 Italian olive oils:</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="SourceCode" /></w:pPr><w:r><w:rPr><w:rStyle w:val="KeywordTok" /></w:rPr><w:t xml:space="preserve">data</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">(olive)</w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="KeywordTok" /></w:rPr><w:t xml:space="preserve">head</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">(olive)</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="SourceCode" /></w:pPr><w:r><w:rPr><w:rStyle w:val="VerbatimChar" /></w:rPr><w:t xml:space="preserve">##           region         area palmitic palmitoleic stearic oleic linoleic</w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="VerbatimChar" /></w:rPr><w:t xml:space="preserve">## 1 Southern Italy North-Apulia    10.75        0.75    2.26  78.2     6.72</w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="VerbatimChar" /></w:rPr><w:t xml:space="preserve">## 2 Southern Italy North-Apulia    10.88        0.73    2.24  77.1     7.81</w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="VerbatimChar" /></w:rPr><w:t xml:space="preserve">## 3 Southern Italy North-Apulia     9.11        0.54    2.46  81.1     5.49</w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="VerbatimChar" /></w:rPr><w:t xml:space="preserve">## 4 Southern Italy North-Apulia     9.66        0.57    2.40  79.5     6.19</w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="VerbatimChar" /></w:rPr><w:t xml:space="preserve">## 5 Southern Italy North-Apulia    10.51        0.67    2.59  77.7     6.72</w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="VerbatimChar" /></w:rPr><w:t xml:space="preserve">## 6 Southern Italy North-Apulia     9.11        0.49    2.68  79.2     6.78</w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="VerbatimChar" /></w:rPr><w:t xml:space="preserve">##   linolenic arachidic eicosenoic</w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="VerbatimChar" /></w:rPr><w:t xml:space="preserve">## 1      0.36      0.60       0.29</w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="VerbatimChar" /></w:rPr><w:t xml:space="preserve">## 2      0.31      0.61       0.29</w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="VerbatimChar" /></w:rPr><w:t xml:space="preserve">## 3      0.31      0.63       0.29</w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="VerbatimChar" /></w:rPr><w:t xml:space="preserve">## 4      0.50      0.78       0.35</w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="VerbatimChar" /></w:rPr><w:t xml:space="preserve">## 5      0.50      0.80       0.46</w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="VerbatimChar" /></w:rPr><w:t xml:space="preserve">## 6      0.51      0.70       0.44</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="FirstParagraph" /></w:pPr><w:r><w:t xml:space="preserve">Plot the percent palmitic acid versus palmitoleic acid in a scatterplot. What relationship do you see?</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="SourceCode" /></w:pPr><w:r><w:rPr><w:rStyle w:val="KeywordTok" /></w:rPr><w:t xml:space="preserve">plot</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">(olive</w:t></w:r><w:r><w:rPr><w:rStyle w:val="OperatorTok" /></w:rPr><w:t xml:space="preserve">$</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">palmitic, olive</w:t></w:r><w:r><w:rPr><w:rStyle w:val="OperatorTok" /></w:rPr><w:t xml:space="preserve">$</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">palmitoleic)</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="FirstParagraph" /></w:pPr><w:r><w:drawing><wp:inline><wp:extent cx="5334000" cy="4267200" /><wp:effectExtent b="0" l="0" r="0" t="0" /><wp:docPr descr="" title="" id="1" name="Picture" /><a:graphic><a:graphicData uri="http://schemas.openxmlformats.org/drawingml/2006/picture"><pic:pic><pic:nvPicPr><pic:cNvPr descr="Data_Science_R_Basics_files/figure-docx/unnamed-chunk-118-1.png" id="0" name="Picture" /><pic:cNvPicPr><a:picLocks noChangeArrowheads="1" noChangeAspect="1" /></pic:cNvPicPr></pic:nvPicPr><pic:blipFill><a:blip r:embed="rId86" /><a:stretch><a:fillRect /></a:stretch></pic:blipFill><pic:spPr bwMode="auto"><a:xfrm><a:off x="0" y="0" /><a:ext cx="5334000" cy="4267200" /></a:xfrm><a:prstGeom prst="rect"><a:avLst /></a:prstGeom><a:noFill /><a:ln w="9525"><a:noFill /><a:headEnd /><a:tailEnd /></a:ln></pic:spPr></pic:pic></a:graphicData></a:graphic></wp:inline></w:drawing></w:r></w:p><w:p><w:pPr><w:pStyle w:val="Compact" /><w:numPr><w:numId w:val="1096" /><w:ilvl w:val="0" /></w:numPr></w:pPr><w:r><w:t xml:space="preserve">☐ A. There is no relationship between palmitic and palmitoleic.</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="Compact" /><w:numPr><w:numId w:val="1096" /><w:ilvl w:val="0" /></w:numPr></w:pPr><w:r><w:t xml:space="preserve">☒ B. There is a positive linear relationship between palmitic and palmitoleic.</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="Compact" /><w:numPr><w:numId w:val="1096" /><w:ilvl w:val="0" /></w:numPr></w:pPr><w:r><w:t xml:space="preserve">☐ C. There is a negative linear relationship between palmitic and palmitoleic.</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="Compact" /><w:numPr><w:numId w:val="1096" /><w:ilvl w:val="0" /></w:numPr></w:pPr><w:r><w:t xml:space="preserve">☐ D. There is a positive exponential relationship between palmitic and palmitoleic.</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="Compact" /><w:numPr><w:numId w:val="1096" /><w:ilvl w:val="0" /></w:numPr></w:pPr><w:r><w:t xml:space="preserve">☐ E. There is a negative exponential relationship between palmitic and palmitoleic.</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="Compact" /><w:numPr><w:numId w:val="1097" /><w:ilvl w:val="0" /></w:numPr></w:pPr><w:r><w:t xml:space="preserve">Create a histogram of the percentage of eicosenoic acid in</w:t></w:r><w:r><w:t xml:space="preserve"> </w:t></w:r><w:r><w:rPr><w:rStyle w:val="VerbatimChar" /></w:rPr><w:t xml:space="preserve">olive</w:t></w:r><w:r><w:t xml:space="preserve">. Which of the following is true?</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="SourceCode" /></w:pPr><w:r><w:rPr><w:rStyle w:val="KeywordTok" /></w:rPr><w:t xml:space="preserve">hist</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">(olive</w:t></w:r><w:r><w:rPr><w:rStyle w:val="OperatorTok" /></w:rPr><w:t xml:space="preserve">$</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">eicosenoic)</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="FirstParagraph" /></w:pPr><w:r><w:drawing><wp:inline><wp:extent cx="5334000" cy="4267200" /><wp:effectExtent b="0" l="0" r="0" t="0" /><wp:docPr descr="" title="" id="1" name="Picture" /><a:graphic><a:graphicData uri="http://schemas.openxmlformats.org/drawingml/2006/picture"><pic:pic><pic:nvPicPr><pic:cNvPr descr="Data_Science_R_Basics_files/figure-docx/unnamed-chunk-119-1.png" id="0" name="Picture" /><pic:cNvPicPr><a:picLocks noChangeArrowheads="1" noChangeAspect="1" /></pic:cNvPicPr></pic:nvPicPr><pic:blipFill><a:blip r:embed="rId87" /><a:stretch><a:fillRect /></a:stretch></pic:blipFill><pic:spPr bwMode="auto"><a:xfrm><a:off x="0" y="0" /><a:ext cx="5334000" cy="4267200" /></a:xfrm><a:prstGeom prst="rect"><a:avLst /></a:prstGeom><a:noFill /><a:ln w="9525"><a:noFill /><a:headEnd /><a:tailEnd /></a:ln></pic:spPr></pic:pic></a:graphicData></a:graphic></wp:inline></w:drawing></w:r></w:p><w:p><w:pPr><w:pStyle w:val="Compact" /><w:numPr><w:numId w:val="1098" /><w:ilvl w:val="0" /></w:numPr></w:pPr><w:r><w:t xml:space="preserve">☒ A. The most common value of eicosenoic acid is below 0.05%.</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="Compact" /><w:numPr><w:numId w:val="1098" /><w:ilvl w:val="0" /></w:numPr></w:pPr><w:r><w:t xml:space="preserve">☐ B. The most common value of eicosenoic acid is greater than 0.5%.</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="Compact" /><w:numPr><w:numId w:val="1098" /><w:ilvl w:val="0" /></w:numPr></w:pPr><w:r><w:t xml:space="preserve">☐ C. The most common value of eicosenoic acid is around 0.3%.</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="Compact" /><w:numPr><w:numId w:val="1098" /><w:ilvl w:val="0" /></w:numPr></w:pPr><w:r><w:t xml:space="preserve">☐ D. There are equal numbers of olive oils with eicosenoic acid below 0.05% and greater than 0.5%.</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="Compact" /><w:numPr><w:numId w:val="1099" /><w:ilvl w:val="0" /></w:numPr></w:pPr><w:r><w:t xml:space="preserve">Make a boxplot of palmitic acid percentage in</w:t></w:r><w:r><w:t xml:space="preserve"> </w:t></w:r><w:r><w:rPr><w:rStyle w:val="VerbatimChar" /></w:rPr><w:t xml:space="preserve">olive</w:t></w:r><w:r><w:t xml:space="preserve"> </w:t></w:r><w:r><w:t xml:space="preserve">with separate distributions for each region.</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="SourceCode" /></w:pPr><w:r><w:rPr><w:rStyle w:val="KeywordTok" /></w:rPr><w:t xml:space="preserve">boxplot</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">(palmitic </w:t></w:r><w:r><w:rPr><w:rStyle w:val="OperatorTok" /></w:rPr><w:t xml:space="preserve">~</w:t></w:r><w:r><w:rPr><w:rStyle w:val="StringTok" /></w:rPr><w:t xml:space="preserve"> </w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">region, </w:t></w:r><w:r><w:rPr><w:rStyle w:val="DataTypeTok" /></w:rPr><w:t xml:space="preserve">data =</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve"> olive)</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="FirstParagraph" /></w:pPr><w:r><w:drawing><wp:inline><wp:extent cx="5334000" cy="4267200" /><wp:effectExtent b="0" l="0" r="0" t="0" /><wp:docPr descr="" title="" id="1" name="Picture" /><a:graphic><a:graphicData uri="http://schemas.openxmlformats.org/drawingml/2006/picture"><pic:pic><pic:nvPicPr><pic:cNvPr descr="Data_Science_R_Basics_files/figure-docx/unnamed-chunk-120-1.png" id="0" name="Picture" /><pic:cNvPicPr><a:picLocks noChangeArrowheads="1" noChangeAspect="1" /></pic:cNvPicPr></pic:nvPicPr><pic:blipFill><a:blip r:embed="rId88" /><a:stretch><a:fillRect /></a:stretch></pic:blipFill><pic:spPr bwMode="auto"><a:xfrm><a:off x="0" y="0" /><a:ext cx="5334000" cy="4267200" /></a:xfrm><a:prstGeom prst="rect"><a:avLst /></a:prstGeom><a:noFill /><a:ln w="9525"><a:noFill /><a:headEnd /><a:tailEnd /></a:ln></pic:spPr></pic:pic></a:graphicData></a:graphic></wp:inline></w:drawing></w:r></w:p><w:p><w:pPr><w:pStyle w:val="BodyText" /></w:pPr><w:r><w:t xml:space="preserve">Which region has the highest median palmitic acid percentage?</w:t></w:r><w:r><w:t xml:space="preserve"> </w:t></w:r><w:r><w:rPr><w:rStyle w:val="VerbatimChar" /></w:rPr><w:t xml:space="preserve">Southern Italy</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="BodyText" /></w:pPr><w:r><w:t xml:space="preserve">Which region has the most variable palmitic acid percentage?</w:t></w:r><w:r><w:t xml:space="preserve"> </w:t></w:r><w:r><w:rPr><w:rStyle w:val="VerbatimChar" /></w:rPr><w:t xml:space="preserve">Southern Italy</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="Heading2" /></w:pPr><w:bookmarkStart w:id="89" w:name="section-4-overview" /><w:r><w:t xml:space="preserve">Section 4 Overview</w:t></w:r><w:bookmarkEnd w:id="89" /></w:p><w:p><w:pPr><w:pStyle w:val="FirstParagraph" /></w:pPr><w:r><w:t xml:space="preserve">Section 4 introduces you to general programming features like</w:t></w:r><w:r><w:t xml:space="preserve"> </w:t></w:r><w:r><w:t xml:space="preserve">‘</w:t></w:r><w:r><w:t xml:space="preserve">if-else</w:t></w:r><w:r><w:t xml:space="preserve">’</w:t></w:r><w:r><w:t xml:space="preserve">, and</w:t></w:r><w:r><w:t xml:space="preserve"> </w:t></w:r><w:r><w:t xml:space="preserve">‘</w:t></w:r><w:r><w:t xml:space="preserve">for loop</w:t></w:r><w:r><w:t xml:space="preserve">’</w:t></w:r><w:r><w:t xml:space="preserve"> </w:t></w:r><w:r><w:t xml:space="preserve">commands so that you can write your own functions to perform various operations on datasets.</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="BodyText" /></w:pPr><w:r><w:t xml:space="preserve">In Section 4.1, you will:</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="Compact" /><w:numPr><w:numId w:val="1100" /><w:ilvl w:val="0" /></w:numPr></w:pPr><w:r><w:t xml:space="preserve">Understand some of the programming capabilities of R.</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="FirstParagraph" /></w:pPr><w:r><w:t xml:space="preserve">In Section 4.2, you will:</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="Compact" /><w:numPr><w:numId w:val="1101" /><w:ilvl w:val="0" /></w:numPr></w:pPr><w:r><w:t xml:space="preserve">Use basic conditional expressions to perform different operations.</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="Compact" /><w:numPr><w:numId w:val="1101" /><w:ilvl w:val="0" /></w:numPr></w:pPr><w:r><w:t xml:space="preserve">Check if any or all elements of a logical vector are TRUE.</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="FirstParagraph" /></w:pPr><w:r><w:t xml:space="preserve">In Section 4.3, you will:</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="Compact" /><w:numPr><w:numId w:val="1102" /><w:ilvl w:val="0" /></w:numPr></w:pPr><w:r><w:t xml:space="preserve">Define and call functions to perform various operations.</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="Compact" /><w:numPr><w:numId w:val="1102" /><w:ilvl w:val="0" /></w:numPr></w:pPr><w:r><w:t xml:space="preserve">Pass arguments to functions, and return variables/objects from functions.</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="FirstParagraph" /></w:pPr><w:r><w:t xml:space="preserve">In Section 4.4, you will:</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="Compact" /><w:numPr><w:numId w:val="1103" /><w:ilvl w:val="0" /></w:numPr></w:pPr><w:r><w:t xml:space="preserve">Use</w:t></w:r><w:r><w:t xml:space="preserve"> </w:t></w:r><w:r><w:t xml:space="preserve">‘</w:t></w:r><w:r><w:t xml:space="preserve">for</w:t></w:r><w:r><w:t xml:space="preserve">’</w:t></w:r><w:r><w:t xml:space="preserve"> </w:t></w:r><w:r><w:t xml:space="preserve">loop to perform repeated operations.</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="Compact" /><w:numPr><w:numId w:val="1103" /><w:ilvl w:val="0" /></w:numPr></w:pPr><w:r><w:t xml:space="preserve">Articulate in-built functions of R that you could try for yourself.</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="Heading2" /></w:pPr><w:bookmarkStart w:id="90" w:name="Xb771356d72000dc7feb8e643abfda87146e9ea2" /><w:r><w:t xml:space="preserve">Programming Basics - Introduction to Programming in R</w:t></w:r><w:bookmarkEnd w:id="90" /></w:p><w:p><w:pPr><w:pStyle w:val="FirstParagraph" /></w:pPr><w:r><w:t xml:space="preserve">The textbook for this section is available</w:t></w:r><w:r><w:t xml:space="preserve"> </w:t></w:r><w:hyperlink r:id="rId91"><w:r><w:rPr><w:rStyle w:val="Hyperlink" /></w:rPr><w:t xml:space="preserve">here</w:t></w:r></w:hyperlink></w:p><w:p><w:pPr><w:pStyle w:val="Heading2" /></w:pPr><w:bookmarkStart w:id="92" w:name="basic-conditionals" /><w:r><w:t xml:space="preserve">Basic Conditionals</w:t></w:r><w:bookmarkEnd w:id="92" /></w:p><w:p><w:pPr><w:pStyle w:val="FirstParagraph" /></w:pPr><w:r><w:t xml:space="preserve">The textbook for this section is available</w:t></w:r><w:r><w:t xml:space="preserve"> </w:t></w:r><w:hyperlink r:id="rId93"><w:r><w:rPr><w:rStyle w:val="Hyperlink" /></w:rPr><w:t xml:space="preserve">here</w:t></w:r></w:hyperlink></w:p><w:p><w:pPr><w:pStyle w:val="BodyText" /></w:pPr><w:r><w:rPr><w:b /></w:rPr><w:t xml:space="preserve">Key Points</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="Compact" /><w:numPr><w:numId w:val="1104" /><w:ilvl w:val="0" /></w:numPr></w:pPr><w:r><w:t xml:space="preserve">The most common conditional expression in programming is an if-else statement, which has the form</w:t></w:r><w:r><w:t xml:space="preserve"> </w:t></w:r><w:r><w:t xml:space="preserve">“</w:t></w:r><w:r><w:t xml:space="preserve">if [condition], perform [expression], else perform [alternative expression]</w:t></w:r><w:r><w:t xml:space="preserve">”</w:t></w:r><w:r><w:t xml:space="preserve">.</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="Compact" /><w:numPr><w:numId w:val="1104" /><w:ilvl w:val="0" /></w:numPr></w:pPr><w:r><w:t xml:space="preserve">The</w:t></w:r><w:r><w:t xml:space="preserve"> </w:t></w:r><w:r><w:rPr><w:rStyle w:val="VerbatimChar" /></w:rPr><w:t xml:space="preserve">ifelse()</w:t></w:r><w:r><w:t xml:space="preserve"> </w:t></w:r><w:r><w:t xml:space="preserve">function works similarly to an if-else statement, but it is particularly useful since it works on vectors by examining each element of the vector and returning a corresponding answer accordingly.</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="Compact" /><w:numPr><w:numId w:val="1104" /><w:ilvl w:val="0" /></w:numPr></w:pPr><w:r><w:t xml:space="preserve">The</w:t></w:r><w:r><w:t xml:space="preserve"> </w:t></w:r><w:r><w:rPr><w:rStyle w:val="VerbatimChar" /></w:rPr><w:t xml:space="preserve">any()</w:t></w:r><w:r><w:t xml:space="preserve"> </w:t></w:r><w:r><w:t xml:space="preserve">function takes a vector of logicals and returns true if any of the entries are true.</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="Compact" /><w:numPr><w:numId w:val="1104" /><w:ilvl w:val="0" /></w:numPr></w:pPr><w:r><w:t xml:space="preserve">The</w:t></w:r><w:r><w:t xml:space="preserve"> </w:t></w:r><w:r><w:rPr><w:rStyle w:val="VerbatimChar" /></w:rPr><w:t xml:space="preserve">all()</w:t></w:r><w:r><w:t xml:space="preserve"> </w:t></w:r><w:r><w:t xml:space="preserve">function takes a vector of logicals and returns true if all of the entries are true.</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="FirstParagraph" /></w:pPr><w:r><w:rPr><w:i /></w:rPr><w:t xml:space="preserve">Code</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="SourceCode" /></w:pPr><w:r><w:rPr><w:rStyle w:val="CommentTok" /></w:rPr><w:t xml:space="preserve"># an example showing the general structure of an if-else statement</w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">a &lt;-</w:t></w:r><w:r><w:rPr><w:rStyle w:val="StringTok" /></w:rPr><w:t xml:space="preserve"> </w:t></w:r><w:r><w:rPr><w:rStyle w:val="DecValTok" /></w:rPr><w:t xml:space="preserve">0</w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="ControlFlowTok" /></w:rPr><w:t xml:space="preserve">if</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">(a</w:t></w:r><w:r><w:rPr><w:rStyle w:val="OperatorTok" /></w:rPr><w:t xml:space="preserve">!=</w:t></w:r><w:r><w:rPr><w:rStyle w:val="DecValTok" /></w:rPr><w:t xml:space="preserve">0</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">){</w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">  </w:t></w:r><w:r><w:rPr><w:rStyle w:val="KeywordTok" /></w:rPr><w:t xml:space="preserve">print</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">(</w:t></w:r><w:r><w:rPr><w:rStyle w:val="DecValTok" /></w:rPr><w:t xml:space="preserve">1</w:t></w:r><w:r><w:rPr><w:rStyle w:val="OperatorTok" /></w:rPr><w:t xml:space="preserve">/</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">a)</w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">} </w:t></w:r><w:r><w:rPr><w:rStyle w:val="ControlFlowTok" /></w:rPr><w:t xml:space="preserve">else</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">{</w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">  </w:t></w:r><w:r><w:rPr><w:rStyle w:val="KeywordTok" /></w:rPr><w:t xml:space="preserve">print</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">(</w:t></w:r><w:r><w:rPr><w:rStyle w:val="StringTok" /></w:rPr><w:t xml:space="preserve">&quot;No reciprocal for 0.&quot;</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">)</w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">}</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="SourceCode" /></w:pPr><w:r><w:rPr><w:rStyle w:val="VerbatimChar" /></w:rPr><w:t xml:space="preserve">## [1] &quot;No reciprocal for 0.&quot;</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="SourceCode" /></w:pPr><w:r><w:rPr><w:rStyle w:val="CommentTok" /></w:rPr><w:t xml:space="preserve"># an example that tells us which states, if any, have a murder rate less than 0.5</w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="KeywordTok" /></w:rPr><w:t xml:space="preserve">library</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">(dslabs)</w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="KeywordTok" /></w:rPr><w:t xml:space="preserve">data</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">(murders)</w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">murder_rate &lt;-</w:t></w:r><w:r><w:rPr><w:rStyle w:val="StringTok" /></w:rPr><w:t xml:space="preserve"> </w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">murders</w:t></w:r><w:r><w:rPr><w:rStyle w:val="OperatorTok" /></w:rPr><w:t xml:space="preserve">$</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">total </w:t></w:r><w:r><w:rPr><w:rStyle w:val="OperatorTok" /></w:rPr><w:t xml:space="preserve">/</w:t></w:r><w:r><w:rPr><w:rStyle w:val="StringTok" /></w:rPr><w:t xml:space="preserve"> </w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">murders</w:t></w:r><w:r><w:rPr><w:rStyle w:val="OperatorTok" /></w:rPr><w:t xml:space="preserve">$</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">population</w:t></w:r><w:r><w:rPr><w:rStyle w:val="OperatorTok" /></w:rPr><w:t xml:space="preserve">*</w:t></w:r><w:r><w:rPr><w:rStyle w:val="DecValTok" /></w:rPr><w:t xml:space="preserve">100000</w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">ind &lt;-</w:t></w:r><w:r><w:rPr><w:rStyle w:val="StringTok" /></w:rPr><w:t xml:space="preserve"> </w:t></w:r><w:r><w:rPr><w:rStyle w:val="KeywordTok" /></w:rPr><w:t xml:space="preserve">which.min</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">(murder_rate)</w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="ControlFlowTok" /></w:rPr><w:t xml:space="preserve">if</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">(murder_rate[ind] </w:t></w:r><w:r><w:rPr><w:rStyle w:val="OperatorTok" /></w:rPr><w:t xml:space="preserve">&lt;</w:t></w:r><w:r><w:rPr><w:rStyle w:val="StringTok" /></w:rPr><w:t xml:space="preserve"> </w:t></w:r><w:r><w:rPr><w:rStyle w:val="FloatTok" /></w:rPr><w:t xml:space="preserve">0.5</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">){</w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">  </w:t></w:r><w:r><w:rPr><w:rStyle w:val="KeywordTok" /></w:rPr><w:t xml:space="preserve">print</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">(murders</w:t></w:r><w:r><w:rPr><w:rStyle w:val="OperatorTok" /></w:rPr><w:t xml:space="preserve">$</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">state[ind]) </w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">} </w:t></w:r><w:r><w:rPr><w:rStyle w:val="ControlFlowTok" /></w:rPr><w:t xml:space="preserve">else</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">{</w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">  </w:t></w:r><w:r><w:rPr><w:rStyle w:val="KeywordTok" /></w:rPr><w:t xml:space="preserve">print</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">(</w:t></w:r><w:r><w:rPr><w:rStyle w:val="StringTok" /></w:rPr><w:t xml:space="preserve">&quot;No state has murder rate that low&quot;</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">)</w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">}</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="SourceCode" /></w:pPr><w:r><w:rPr><w:rStyle w:val="VerbatimChar" /></w:rPr><w:t xml:space="preserve">## [1] &quot;Vermont&quot;</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="SourceCode" /></w:pPr><w:r><w:rPr><w:rStyle w:val="CommentTok" /></w:rPr><w:t xml:space="preserve"># changing the condition to &lt; 0.25 changes the result</w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="ControlFlowTok" /></w:rPr><w:t xml:space="preserve">if</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">(murder_rate[ind] </w:t></w:r><w:r><w:rPr><w:rStyle w:val="OperatorTok" /></w:rPr><w:t xml:space="preserve">&lt;</w:t></w:r><w:r><w:rPr><w:rStyle w:val="StringTok" /></w:rPr><w:t xml:space="preserve"> </w:t></w:r><w:r><w:rPr><w:rStyle w:val="FloatTok" /></w:rPr><w:t xml:space="preserve">0.25</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">){</w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">  </w:t></w:r><w:r><w:rPr><w:rStyle w:val="KeywordTok" /></w:rPr><w:t xml:space="preserve">print</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">(murders</w:t></w:r><w:r><w:rPr><w:rStyle w:val="OperatorTok" /></w:rPr><w:t xml:space="preserve">$</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">state[ind]) </w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">} </w:t></w:r><w:r><w:rPr><w:rStyle w:val="ControlFlowTok" /></w:rPr><w:t xml:space="preserve">else</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">{</w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">  </w:t></w:r><w:r><w:rPr><w:rStyle w:val="KeywordTok" /></w:rPr><w:t xml:space="preserve">print</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">(</w:t></w:r><w:r><w:rPr><w:rStyle w:val="StringTok" /></w:rPr><w:t xml:space="preserve">&quot;No state has a murder rate that low.&quot;</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">)</w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">}</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="SourceCode" /></w:pPr><w:r><w:rPr><w:rStyle w:val="VerbatimChar" /></w:rPr><w:t xml:space="preserve">## [1] &quot;No state has a murder rate that low.&quot;</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="SourceCode" /></w:pPr><w:r><w:rPr><w:rStyle w:val="CommentTok" /></w:rPr><w:t xml:space="preserve"># the ifelse() function works similarly to an if-else conditional</w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">a &lt;-</w:t></w:r><w:r><w:rPr><w:rStyle w:val="StringTok" /></w:rPr><w:t xml:space="preserve"> </w:t></w:r><w:r><w:rPr><w:rStyle w:val="DecValTok" /></w:rPr><w:t xml:space="preserve">0</w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="KeywordTok" /></w:rPr><w:t xml:space="preserve">ifelse</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">(a </w:t></w:r><w:r><w:rPr><w:rStyle w:val="OperatorTok" /></w:rPr><w:t xml:space="preserve">&gt;</w:t></w:r><w:r><w:rPr><w:rStyle w:val="StringTok" /></w:rPr><w:t xml:space="preserve"> </w:t></w:r><w:r><w:rPr><w:rStyle w:val="DecValTok" /></w:rPr><w:t xml:space="preserve">0</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">, </w:t></w:r><w:r><w:rPr><w:rStyle w:val="DecValTok" /></w:rPr><w:t xml:space="preserve">1</w:t></w:r><w:r><w:rPr><w:rStyle w:val="OperatorTok" /></w:rPr><w:t xml:space="preserve">/</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">a, </w:t></w:r><w:r><w:rPr><w:rStyle w:val="OtherTok" /></w:rPr><w:t xml:space="preserve">NA</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">)</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="SourceCode" /></w:pPr><w:r><w:rPr><w:rStyle w:val="VerbatimChar" /></w:rPr><w:t xml:space="preserve">## [1] NA</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="SourceCode" /></w:pPr><w:r><w:rPr><w:rStyle w:val="CommentTok" /></w:rPr><w:t xml:space="preserve"># the ifelse() function is particularly useful on vectors</w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">a &lt;-</w:t></w:r><w:r><w:rPr><w:rStyle w:val="StringTok" /></w:rPr><w:t xml:space="preserve"> </w:t></w:r><w:r><w:rPr><w:rStyle w:val="KeywordTok" /></w:rPr><w:t xml:space="preserve">c</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">(</w:t></w:r><w:r><w:rPr><w:rStyle w:val="DecValTok" /></w:rPr><w:t xml:space="preserve">0</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">,</w:t></w:r><w:r><w:rPr><w:rStyle w:val="DecValTok" /></w:rPr><w:t xml:space="preserve">1</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">,</w:t></w:r><w:r><w:rPr><w:rStyle w:val="DecValTok" /></w:rPr><w:t xml:space="preserve">2</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">,</w:t></w:r><w:r><w:rPr><w:rStyle w:val="OperatorTok" /></w:rPr><w:t xml:space="preserve">-</w:t></w:r><w:r><w:rPr><w:rStyle w:val="DecValTok" /></w:rPr><w:t xml:space="preserve">4</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">,</w:t></w:r><w:r><w:rPr><w:rStyle w:val="DecValTok" /></w:rPr><w:t xml:space="preserve">5</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">)</w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">result &lt;-</w:t></w:r><w:r><w:rPr><w:rStyle w:val="StringTok" /></w:rPr><w:t xml:space="preserve"> </w:t></w:r><w:r><w:rPr><w:rStyle w:val="KeywordTok" /></w:rPr><w:t xml:space="preserve">ifelse</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">(a </w:t></w:r><w:r><w:rPr><w:rStyle w:val="OperatorTok" /></w:rPr><w:t xml:space="preserve">&gt;</w:t></w:r><w:r><w:rPr><w:rStyle w:val="StringTok" /></w:rPr><w:t xml:space="preserve"> </w:t></w:r><w:r><w:rPr><w:rStyle w:val="DecValTok" /></w:rPr><w:t xml:space="preserve">0</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">, </w:t></w:r><w:r><w:rPr><w:rStyle w:val="DecValTok" /></w:rPr><w:t xml:space="preserve">1</w:t></w:r><w:r><w:rPr><w:rStyle w:val="OperatorTok" /></w:rPr><w:t xml:space="preserve">/</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">a, </w:t></w:r><w:r><w:rPr><w:rStyle w:val="OtherTok" /></w:rPr><w:t xml:space="preserve">NA</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">)</w:t></w:r><w:r><w:br /></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="CommentTok" /></w:rPr><w:t xml:space="preserve"># the ifelse() function is also helpful for replacing missing values</w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="KeywordTok" /></w:rPr><w:t xml:space="preserve">data</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">(na_example)</w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">no_nas &lt;-</w:t></w:r><w:r><w:rPr><w:rStyle w:val="StringTok" /></w:rPr><w:t xml:space="preserve"> </w:t></w:r><w:r><w:rPr><w:rStyle w:val="KeywordTok" /></w:rPr><w:t xml:space="preserve">ifelse</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">(</w:t></w:r><w:r><w:rPr><w:rStyle w:val="KeywordTok" /></w:rPr><w:t xml:space="preserve">is.na</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">(na_example), </w:t></w:r><w:r><w:rPr><w:rStyle w:val="DecValTok" /></w:rPr><w:t xml:space="preserve">0</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">, na_example) </w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="KeywordTok" /></w:rPr><w:t xml:space="preserve">sum</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">(</w:t></w:r><w:r><w:rPr><w:rStyle w:val="KeywordTok" /></w:rPr><w:t xml:space="preserve">is.na</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">(no_nas))</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="SourceCode" /></w:pPr><w:r><w:rPr><w:rStyle w:val="VerbatimChar" /></w:rPr><w:t xml:space="preserve">## [1] 0</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="SourceCode" /></w:pPr><w:r><w:rPr><w:rStyle w:val="CommentTok" /></w:rPr><w:t xml:space="preserve"># the any() and all() functions evaluate logical vectors</w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">z &lt;-</w:t></w:r><w:r><w:rPr><w:rStyle w:val="StringTok" /></w:rPr><w:t xml:space="preserve"> </w:t></w:r><w:r><w:rPr><w:rStyle w:val="KeywordTok" /></w:rPr><w:t xml:space="preserve">c</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">(</w:t></w:r><w:r><w:rPr><w:rStyle w:val="OtherTok" /></w:rPr><w:t xml:space="preserve">TRUE</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">, </w:t></w:r><w:r><w:rPr><w:rStyle w:val="OtherTok" /></w:rPr><w:t xml:space="preserve">TRUE</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">, </w:t></w:r><w:r><w:rPr><w:rStyle w:val="OtherTok" /></w:rPr><w:t xml:space="preserve">FALSE</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">)</w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="KeywordTok" /></w:rPr><w:t xml:space="preserve">any</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">(z)</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="SourceCode" /></w:pPr><w:r><w:rPr><w:rStyle w:val="VerbatimChar" /></w:rPr><w:t xml:space="preserve">## [1] TRUE</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="SourceCode" /></w:pPr><w:r><w:rPr><w:rStyle w:val="KeywordTok" /></w:rPr><w:t xml:space="preserve">all</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">(z)</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="SourceCode" /></w:pPr><w:r><w:rPr><w:rStyle w:val="VerbatimChar" /></w:rPr><w:t xml:space="preserve">## [1] FALSE</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="Heading2" /></w:pPr><w:bookmarkStart w:id="94" w:name="functions" /><w:r><w:t xml:space="preserve">Functions</w:t></w:r><w:bookmarkEnd w:id="94" /></w:p><w:p><w:pPr><w:pStyle w:val="FirstParagraph" /></w:pPr><w:r><w:t xml:space="preserve">The textbook for this section is available</w:t></w:r><w:r><w:t xml:space="preserve"> </w:t></w:r><w:hyperlink r:id="rId95"><w:r><w:rPr><w:rStyle w:val="Hyperlink" /></w:rPr><w:t xml:space="preserve">here</w:t></w:r></w:hyperlink></w:p><w:p><w:pPr><w:pStyle w:val="BodyText" /></w:pPr><w:r><w:rPr><w:b /></w:rPr><w:t xml:space="preserve">Key points</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="Compact" /><w:numPr><w:numId w:val="1105" /><w:ilvl w:val="0" /></w:numPr></w:pPr><w:r><w:t xml:space="preserve">The R function, called</w:t></w:r><w:r><w:t xml:space="preserve"> </w:t></w:r><w:r><w:rPr><w:rStyle w:val="VerbatimChar" /></w:rPr><w:t xml:space="preserve">function()</w:t></w:r><w:r><w:t xml:space="preserve"> </w:t></w:r><w:r><w:t xml:space="preserve">tells R you are about to define a new function.</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="Compact" /><w:numPr><w:numId w:val="1105" /><w:ilvl w:val="0" /></w:numPr></w:pPr><w:r><w:t xml:space="preserve">Functions are objects, so must be assigned a variable name with the arrow operator.</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="Compact" /><w:numPr><w:numId w:val="1105" /><w:ilvl w:val="0" /></w:numPr></w:pPr><w:r><w:t xml:space="preserve">The general way to define functions is: (1) decide the function name, which will be an object, (2) type</w:t></w:r><w:r><w:t xml:space="preserve"> </w:t></w:r><w:r><w:rPr><w:rStyle w:val="VerbatimChar" /></w:rPr><w:t xml:space="preserve">function()</w:t></w:r><w:r><w:t xml:space="preserve"> </w:t></w:r><w:r><w:t xml:space="preserve">with your function’s arguments in parentheses, (3) write all the operations inside brackets.</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="Compact" /><w:numPr><w:numId w:val="1105" /><w:ilvl w:val="0" /></w:numPr></w:pPr><w:r><w:t xml:space="preserve">Variables defined inside a function are not saved in the workspace.</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="FirstParagraph" /></w:pPr><w:r><w:rPr><w:i /></w:rPr><w:t xml:space="preserve">Code</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="SourceCode" /></w:pPr><w:r><w:rPr><w:rStyle w:val="CommentTok" /></w:rPr><w:t xml:space="preserve"># example of defining a function to compute the average of a vector x</w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">avg &lt;-</w:t></w:r><w:r><w:rPr><w:rStyle w:val="StringTok" /></w:rPr><w:t xml:space="preserve"> </w:t></w:r><w:r><w:rPr><w:rStyle w:val="ControlFlowTok" /></w:rPr><w:t xml:space="preserve">function</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">(x){</w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">  s &lt;-</w:t></w:r><w:r><w:rPr><w:rStyle w:val="StringTok" /></w:rPr><w:t xml:space="preserve"> </w:t></w:r><w:r><w:rPr><w:rStyle w:val="KeywordTok" /></w:rPr><w:t xml:space="preserve">sum</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">(x)</w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">  n &lt;-</w:t></w:r><w:r><w:rPr><w:rStyle w:val="StringTok" /></w:rPr><w:t xml:space="preserve"> </w:t></w:r><w:r><w:rPr><w:rStyle w:val="KeywordTok" /></w:rPr><w:t xml:space="preserve">length</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">(x)</w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">  s</w:t></w:r><w:r><w:rPr><w:rStyle w:val="OperatorTok" /></w:rPr><w:t xml:space="preserve">/</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">n</w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">}</w:t></w:r><w:r><w:br /></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="CommentTok" /></w:rPr><w:t xml:space="preserve"># we see that the above function and the pre-built R mean() function are identical</w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">x &lt;-</w:t></w:r><w:r><w:rPr><w:rStyle w:val="StringTok" /></w:rPr><w:t xml:space="preserve"> </w:t></w:r><w:r><w:rPr><w:rStyle w:val="DecValTok" /></w:rPr><w:t xml:space="preserve">1</w:t></w:r><w:r><w:rPr><w:rStyle w:val="OperatorTok" /></w:rPr><w:t xml:space="preserve">:</w:t></w:r><w:r><w:rPr><w:rStyle w:val="DecValTok" /></w:rPr><w:t xml:space="preserve">100</w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="KeywordTok" /></w:rPr><w:t xml:space="preserve">identical</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">(</w:t></w:r><w:r><w:rPr><w:rStyle w:val="KeywordTok" /></w:rPr><w:t xml:space="preserve">mean</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">(x), </w:t></w:r><w:r><w:rPr><w:rStyle w:val="KeywordTok" /></w:rPr><w:t xml:space="preserve">avg</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">(x))</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="SourceCode" /></w:pPr><w:r><w:rPr><w:rStyle w:val="VerbatimChar" /></w:rPr><w:t xml:space="preserve">## [1] TRUE</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="SourceCode" /></w:pPr><w:r><w:rPr><w:rStyle w:val="CommentTok" /></w:rPr><w:t xml:space="preserve"># variables inside a function are not defined in the workspace</w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">s &lt;-</w:t></w:r><w:r><w:rPr><w:rStyle w:val="StringTok" /></w:rPr><w:t xml:space="preserve"> </w:t></w:r><w:r><w:rPr><w:rStyle w:val="DecValTok" /></w:rPr><w:t xml:space="preserve">3</w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="KeywordTok" /></w:rPr><w:t xml:space="preserve">avg</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">(</w:t></w:r><w:r><w:rPr><w:rStyle w:val="DecValTok" /></w:rPr><w:t xml:space="preserve">1</w:t></w:r><w:r><w:rPr><w:rStyle w:val="OperatorTok" /></w:rPr><w:t xml:space="preserve">:</w:t></w:r><w:r><w:rPr><w:rStyle w:val="DecValTok" /></w:rPr><w:t xml:space="preserve">10</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">)</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="SourceCode" /></w:pPr><w:r><w:rPr><w:rStyle w:val="VerbatimChar" /></w:rPr><w:t xml:space="preserve">## [1] 5.5</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="SourceCode" /></w:pPr><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">s</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="SourceCode" /></w:pPr><w:r><w:rPr><w:rStyle w:val="VerbatimChar" /></w:rPr><w:t xml:space="preserve">## [1] 3</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="SourceCode" /></w:pPr><w:r><w:rPr><w:rStyle w:val="CommentTok" /></w:rPr><w:t xml:space="preserve"># the general form of a function</w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">my_function &lt;-</w:t></w:r><w:r><w:rPr><w:rStyle w:val="StringTok" /></w:rPr><w:t xml:space="preserve"> </w:t></w:r><w:r><w:rPr><w:rStyle w:val="ControlFlowTok" /></w:rPr><w:t xml:space="preserve">function</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">(VARIABLE_NAME){</w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">  perform operations on VARIABLE_NAME and calculate VALUE</w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">  VALUE</w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">}</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="SourceCode" /></w:pPr><w:r><w:rPr><w:rStyle w:val="CommentTok" /></w:rPr><w:t xml:space="preserve"># functions can have multiple arguments as well as default values</w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">avg &lt;-</w:t></w:r><w:r><w:rPr><w:rStyle w:val="StringTok" /></w:rPr><w:t xml:space="preserve"> </w:t></w:r><w:r><w:rPr><w:rStyle w:val="ControlFlowTok" /></w:rPr><w:t xml:space="preserve">function</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">(x, </w:t></w:r><w:r><w:rPr><w:rStyle w:val="DataTypeTok" /></w:rPr><w:t xml:space="preserve">arithmetic =</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve"> </w:t></w:r><w:r><w:rPr><w:rStyle w:val="OtherTok" /></w:rPr><w:t xml:space="preserve">TRUE</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">){</w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">  n &lt;-</w:t></w:r><w:r><w:rPr><w:rStyle w:val="StringTok" /></w:rPr><w:t xml:space="preserve"> </w:t></w:r><w:r><w:rPr><w:rStyle w:val="KeywordTok" /></w:rPr><w:t xml:space="preserve">length</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">(x)</w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">  </w:t></w:r><w:r><w:rPr><w:rStyle w:val="KeywordTok" /></w:rPr><w:t xml:space="preserve">ifelse</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">(arithmetic, </w:t></w:r><w:r><w:rPr><w:rStyle w:val="KeywordTok" /></w:rPr><w:t xml:space="preserve">sum</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">(x)</w:t></w:r><w:r><w:rPr><w:rStyle w:val="OperatorTok" /></w:rPr><w:t xml:space="preserve">/</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">n, </w:t></w:r><w:r><w:rPr><w:rStyle w:val="KeywordTok" /></w:rPr><w:t xml:space="preserve">prod</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">(x)</w:t></w:r><w:r><w:rPr><w:rStyle w:val="OperatorTok" /></w:rPr><w:t xml:space="preserve">^</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">(</w:t></w:r><w:r><w:rPr><w:rStyle w:val="DecValTok" /></w:rPr><w:t xml:space="preserve">1</w:t></w:r><w:r><w:rPr><w:rStyle w:val="OperatorTok" /></w:rPr><w:t xml:space="preserve">/</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">n))</w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">}</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="Heading2" /></w:pPr><w:bookmarkStart w:id="96" w:name="for-loops" /><w:r><w:t xml:space="preserve">For Loops</w:t></w:r><w:bookmarkEnd w:id="96" /></w:p><w:p><w:pPr><w:pStyle w:val="FirstParagraph" /></w:pPr><w:r><w:t xml:space="preserve">The textbook for this section is available</w:t></w:r><w:r><w:t xml:space="preserve"> </w:t></w:r><w:hyperlink r:id="rId97"><w:r><w:rPr><w:rStyle w:val="Hyperlink" /></w:rPr><w:t xml:space="preserve">here</w:t></w:r></w:hyperlink></w:p><w:p><w:pPr><w:pStyle w:val="BodyText" /></w:pPr><w:r><w:rPr><w:b /></w:rPr><w:t xml:space="preserve">Key points</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="Compact" /><w:numPr><w:numId w:val="1106" /><w:ilvl w:val="0" /></w:numPr></w:pPr><w:r><w:t xml:space="preserve">For-loops perform the same task over and over while changing the variable. They let us define the range that our variable takes, and then changes the value with each loop and evaluates the expression every time inside the loop.</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="Compact" /><w:numPr><w:numId w:val="1106" /><w:ilvl w:val="0" /></w:numPr></w:pPr><w:r><w:t xml:space="preserve">The general form of a for-loop is:</w:t></w:r><w:r><w:t xml:space="preserve"> </w:t></w:r><w:r><w:t xml:space="preserve">“</w:t></w:r><w:r><w:t xml:space="preserve">For i in [some range], do operations</w:t></w:r><w:r><w:t xml:space="preserve">”</w:t></w:r><w:r><w:t xml:space="preserve">. This i changes across the range of values and the operations assume i is a value you’re interested in computing on.</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="Compact" /><w:numPr><w:numId w:val="1106" /><w:ilvl w:val="0" /></w:numPr></w:pPr><w:r><w:t xml:space="preserve">At the end of the loop, the value of i is the last value of the range.</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="FirstParagraph" /></w:pPr><w:r><w:rPr><w:i /></w:rPr><w:t xml:space="preserve">Code</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="SourceCode" /></w:pPr><w:r><w:rPr><w:rStyle w:val="CommentTok" /></w:rPr><w:t xml:space="preserve"># creating a function that computes the sum of integers 1 through n</w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">compute_s_n &lt;-</w:t></w:r><w:r><w:rPr><w:rStyle w:val="StringTok" /></w:rPr><w:t xml:space="preserve"> </w:t></w:r><w:r><w:rPr><w:rStyle w:val="ControlFlowTok" /></w:rPr><w:t xml:space="preserve">function</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">(n){</w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">  x &lt;-</w:t></w:r><w:r><w:rPr><w:rStyle w:val="StringTok" /></w:rPr><w:t xml:space="preserve"> </w:t></w:r><w:r><w:rPr><w:rStyle w:val="DecValTok" /></w:rPr><w:t xml:space="preserve">1</w:t></w:r><w:r><w:rPr><w:rStyle w:val="OperatorTok" /></w:rPr><w:t xml:space="preserve">:</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">n</w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">  </w:t></w:r><w:r><w:rPr><w:rStyle w:val="KeywordTok" /></w:rPr><w:t xml:space="preserve">sum</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">(x)</w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">}</w:t></w:r><w:r><w:br /></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="CommentTok" /></w:rPr><w:t xml:space="preserve"># a very simple for-loop</w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="ControlFlowTok" /></w:rPr><w:t xml:space="preserve">for</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">(i </w:t></w:r><w:r><w:rPr><w:rStyle w:val="ControlFlowTok" /></w:rPr><w:t xml:space="preserve">in</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve"> </w:t></w:r><w:r><w:rPr><w:rStyle w:val="DecValTok" /></w:rPr><w:t xml:space="preserve">1</w:t></w:r><w:r><w:rPr><w:rStyle w:val="OperatorTok" /></w:rPr><w:t xml:space="preserve">:</w:t></w:r><w:r><w:rPr><w:rStyle w:val="DecValTok" /></w:rPr><w:t xml:space="preserve">5</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">){</w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">  </w:t></w:r><w:r><w:rPr><w:rStyle w:val="KeywordTok" /></w:rPr><w:t xml:space="preserve">print</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">(i)</w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">}</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="SourceCode" /></w:pPr><w:r><w:rPr><w:rStyle w:val="VerbatimChar" /></w:rPr><w:t xml:space="preserve">## [1] 1</w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="VerbatimChar" /></w:rPr><w:t xml:space="preserve">## [1] 2</w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="VerbatimChar" /></w:rPr><w:t xml:space="preserve">## [1] 3</w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="VerbatimChar" /></w:rPr><w:t xml:space="preserve">## [1] 4</w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="VerbatimChar" /></w:rPr><w:t xml:space="preserve">## [1] 5</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="SourceCode" /></w:pPr><w:r><w:rPr><w:rStyle w:val="CommentTok" /></w:rPr><w:t xml:space="preserve"># a for-loop for our summation</w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">m &lt;-</w:t></w:r><w:r><w:rPr><w:rStyle w:val="StringTok" /></w:rPr><w:t xml:space="preserve"> </w:t></w:r><w:r><w:rPr><w:rStyle w:val="DecValTok" /></w:rPr><w:t xml:space="preserve">25</w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">s_n &lt;-</w:t></w:r><w:r><w:rPr><w:rStyle w:val="StringTok" /></w:rPr><w:t xml:space="preserve"> </w:t></w:r><w:r><w:rPr><w:rStyle w:val="KeywordTok" /></w:rPr><w:t xml:space="preserve">vector</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">(</w:t></w:r><w:r><w:rPr><w:rStyle w:val="DataTypeTok" /></w:rPr><w:t xml:space="preserve">length =</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve"> m) </w:t></w:r><w:r><w:rPr><w:rStyle w:val="CommentTok" /></w:rPr><w:t xml:space="preserve"># create an empty vector</w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="ControlFlowTok" /></w:rPr><w:t xml:space="preserve">for</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">(n </w:t></w:r><w:r><w:rPr><w:rStyle w:val="ControlFlowTok" /></w:rPr><w:t xml:space="preserve">in</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve"> </w:t></w:r><w:r><w:rPr><w:rStyle w:val="DecValTok" /></w:rPr><w:t xml:space="preserve">1</w:t></w:r><w:r><w:rPr><w:rStyle w:val="OperatorTok" /></w:rPr><w:t xml:space="preserve">:</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">m){</w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">  s_n[n] &lt;-</w:t></w:r><w:r><w:rPr><w:rStyle w:val="StringTok" /></w:rPr><w:t xml:space="preserve"> </w:t></w:r><w:r><w:rPr><w:rStyle w:val="KeywordTok" /></w:rPr><w:t xml:space="preserve">compute_s_n</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">(n)</w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">}</w:t></w:r><w:r><w:br /></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="CommentTok" /></w:rPr><w:t xml:space="preserve"># creating a plot for our summation function</w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">n &lt;-</w:t></w:r><w:r><w:rPr><w:rStyle w:val="StringTok" /></w:rPr><w:t xml:space="preserve"> </w:t></w:r><w:r><w:rPr><w:rStyle w:val="DecValTok" /></w:rPr><w:t xml:space="preserve">1</w:t></w:r><w:r><w:rPr><w:rStyle w:val="OperatorTok" /></w:rPr><w:t xml:space="preserve">:</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">m</w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="KeywordTok" /></w:rPr><w:t xml:space="preserve">plot</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">(n, s_n)</w:t></w:r><w:r><w:br /></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="CommentTok" /></w:rPr><w:t xml:space="preserve"># a table of values comparing our function to the summation formula</w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="KeywordTok" /></w:rPr><w:t xml:space="preserve">head</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">(</w:t></w:r><w:r><w:rPr><w:rStyle w:val="KeywordTok" /></w:rPr><w:t xml:space="preserve">data.frame</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">(</w:t></w:r><w:r><w:rPr><w:rStyle w:val="DataTypeTok" /></w:rPr><w:t xml:space="preserve">s_n =</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve"> s_n, </w:t></w:r><w:r><w:rPr><w:rStyle w:val="DataTypeTok" /></w:rPr><w:t xml:space="preserve">formula =</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve"> n</w:t></w:r><w:r><w:rPr><w:rStyle w:val="OperatorTok" /></w:rPr><w:t xml:space="preserve">*</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">(n</w:t></w:r><w:r><w:rPr><w:rStyle w:val="OperatorTok" /></w:rPr><w:t xml:space="preserve">+</w:t></w:r><w:r><w:rPr><w:rStyle w:val="DecValTok" /></w:rPr><w:t xml:space="preserve">1</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">)</w:t></w:r><w:r><w:rPr><w:rStyle w:val="OperatorTok" /></w:rPr><w:t xml:space="preserve">/</w:t></w:r><w:r><w:rPr><w:rStyle w:val="DecValTok" /></w:rPr><w:t xml:space="preserve">2</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">))</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="SourceCode" /></w:pPr><w:r><w:rPr><w:rStyle w:val="VerbatimChar" /></w:rPr><w:t xml:space="preserve">##   s_n formula</w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="VerbatimChar" /></w:rPr><w:t xml:space="preserve">## 1   1       1</w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="VerbatimChar" /></w:rPr><w:t xml:space="preserve">## 2   3       3</w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="VerbatimChar" /></w:rPr><w:t xml:space="preserve">## 3   6       6</w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="VerbatimChar" /></w:rPr><w:t xml:space="preserve">## 4  10      10</w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="VerbatimChar" /></w:rPr><w:t xml:space="preserve">## 5  15      15</w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="VerbatimChar" /></w:rPr><w:t xml:space="preserve">## 6  21      21</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="SourceCode" /></w:pPr><w:r><w:rPr><w:rStyle w:val="CommentTok" /></w:rPr><w:t xml:space="preserve"># overlaying our function with the summation formula</w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="KeywordTok" /></w:rPr><w:t xml:space="preserve">plot</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">(n, s_n)</w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="KeywordTok" /></w:rPr><w:t xml:space="preserve">lines</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">(n, n</w:t></w:r><w:r><w:rPr><w:rStyle w:val="OperatorTok" /></w:rPr><w:t xml:space="preserve">*</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">(n</w:t></w:r><w:r><w:rPr><w:rStyle w:val="OperatorTok" /></w:rPr><w:t xml:space="preserve">+</w:t></w:r><w:r><w:rPr><w:rStyle w:val="DecValTok" /></w:rPr><w:t xml:space="preserve">1</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">)</w:t></w:r><w:r><w:rPr><w:rStyle w:val="OperatorTok" /></w:rPr><w:t xml:space="preserve">/</w:t></w:r><w:r><w:rPr><w:rStyle w:val="DecValTok" /></w:rPr><w:t xml:space="preserve">2</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">)</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="FirstParagraph" /></w:pPr><w:r><w:drawing><wp:inline><wp:extent cx="5334000" cy="4267200" /><wp:effectExtent b="0" l="0" r="0" t="0" /><wp:docPr descr="" title="" id="1" name="Picture" /><a:graphic><a:graphicData uri="http://schemas.openxmlformats.org/drawingml/2006/picture"><pic:pic><pic:nvPicPr><pic:cNvPr descr="Data_Science_R_Basics_files/figure-docx/unnamed-chunk-125-1.png" id="0" name="Picture" /><pic:cNvPicPr><a:picLocks noChangeArrowheads="1" noChangeAspect="1" /></pic:cNvPicPr></pic:nvPicPr><pic:blipFill><a:blip r:embed="rId98" /><a:stretch><a:fillRect /></a:stretch></pic:blipFill><pic:spPr bwMode="auto"><a:xfrm><a:off x="0" y="0" /><a:ext cx="5334000" cy="4267200" /></a:xfrm><a:prstGeom prst="rect"><a:avLst /></a:prstGeom><a:noFill /><a:ln w="9525"><a:noFill /><a:headEnd /><a:tailEnd /></a:ln></pic:spPr></pic:pic></a:graphicData></a:graphic></wp:inline></w:drawing></w:r></w:p><w:p><w:pPr><w:pStyle w:val="Heading2" /></w:pPr><w:bookmarkStart w:id="99" w:name="assessment---programming-basics" /><w:r><w:t xml:space="preserve">Assessment - Programming Basics</w:t></w:r><w:bookmarkEnd w:id="99" /></w:p><w:p><w:pPr><w:pStyle w:val="Compact" /><w:numPr><w:numId w:val="1107" /><w:ilvl w:val="0" /></w:numPr></w:pPr><w:r><w:t xml:space="preserve">What will this conditional expression return?</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="SourceCode" /></w:pPr><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">x &lt;-</w:t></w:r><w:r><w:rPr><w:rStyle w:val="StringTok" /></w:rPr><w:t xml:space="preserve"> </w:t></w:r><w:r><w:rPr><w:rStyle w:val="KeywordTok" /></w:rPr><w:t xml:space="preserve">c</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">(</w:t></w:r><w:r><w:rPr><w:rStyle w:val="DecValTok" /></w:rPr><w:t xml:space="preserve">1</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">,</w:t></w:r><w:r><w:rPr><w:rStyle w:val="DecValTok" /></w:rPr><w:t xml:space="preserve">2</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">,</w:t></w:r><w:r><w:rPr><w:rStyle w:val="OperatorTok" /></w:rPr><w:t xml:space="preserve">-</w:t></w:r><w:r><w:rPr><w:rStyle w:val="DecValTok" /></w:rPr><w:t xml:space="preserve">3</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">,</w:t></w:r><w:r><w:rPr><w:rStyle w:val="DecValTok" /></w:rPr><w:t xml:space="preserve">4</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">)</w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="ControlFlowTok" /></w:rPr><w:t xml:space="preserve">if</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">(</w:t></w:r><w:r><w:rPr><w:rStyle w:val="KeywordTok" /></w:rPr><w:t xml:space="preserve">all</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">(x</w:t></w:r><w:r><w:rPr><w:rStyle w:val="OperatorTok" /></w:rPr><w:t xml:space="preserve">&gt;</w:t></w:r><w:r><w:rPr><w:rStyle w:val="DecValTok" /></w:rPr><w:t xml:space="preserve">0</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">)){</w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="KeywordTok" /></w:rPr><w:t xml:space="preserve">print</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">(</w:t></w:r><w:r><w:rPr><w:rStyle w:val="StringTok" /></w:rPr><w:t xml:space="preserve">&quot;All Postives&quot;</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">)</w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">} </w:t></w:r><w:r><w:rPr><w:rStyle w:val="ControlFlowTok" /></w:rPr><w:t xml:space="preserve">else</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">{</w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="KeywordTok" /></w:rPr><w:t xml:space="preserve">print</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">(</w:t></w:r><w:r><w:rPr><w:rStyle w:val="StringTok" /></w:rPr><w:t xml:space="preserve">&quot;Not all positives&quot;</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">)</w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">}</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="SourceCode" /></w:pPr><w:r><w:rPr><w:rStyle w:val="VerbatimChar" /></w:rPr><w:t xml:space="preserve">## [1] &quot;Not all positives&quot;</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="Compact" /><w:numPr><w:numId w:val="1108" /><w:ilvl w:val="0" /></w:numPr></w:pPr><w:r><w:t xml:space="preserve">☐ A. All Positives</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="Compact" /><w:numPr><w:numId w:val="1108" /><w:ilvl w:val="0" /></w:numPr></w:pPr><w:r><w:t xml:space="preserve">☒ B. Not All Positives</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="Compact" /><w:numPr><w:numId w:val="1108" /><w:ilvl w:val="0" /></w:numPr></w:pPr><w:r><w:t xml:space="preserve">☐ C. N/A</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="Compact" /><w:numPr><w:numId w:val="1108" /><w:ilvl w:val="0" /></w:numPr></w:pPr><w:r><w:t xml:space="preserve">☐ D. None of the above</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="Compact" /><w:numPr><w:numId w:val="1109" /><w:ilvl w:val="0" /></w:numPr></w:pPr><w:r><w:t xml:space="preserve">Which of the following expressions is always</w:t></w:r><w:r><w:t xml:space="preserve"> </w:t></w:r><w:r><w:rPr><w:rStyle w:val="VerbatimChar" /></w:rPr><w:t xml:space="preserve">FALSE</w:t></w:r><w:r><w:t xml:space="preserve"> </w:t></w:r><w:r><w:t xml:space="preserve">when at least one entry of a logical vector x is `</w:t></w:r><w:r><w:rPr><w:rStyle w:val="VerbatimChar" /></w:rPr><w:t xml:space="preserve">TRUE</w:t></w:r><w:r><w:t xml:space="preserve">?</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="Compact" /><w:numPr><w:numId w:val="1110" /><w:ilvl w:val="0" /></w:numPr></w:pPr><w:r><w:t xml:space="preserve">☐ A. all(x)</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="Compact" /><w:numPr><w:numId w:val="1110" /><w:ilvl w:val="0" /></w:numPr></w:pPr><w:r><w:t xml:space="preserve">☐ B. any(x)</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="Compact" /><w:numPr><w:numId w:val="1110" /><w:ilvl w:val="0" /></w:numPr></w:pPr><w:r><w:t xml:space="preserve">☐ C. any(!x)</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="Compact" /><w:numPr><w:numId w:val="1110" /><w:ilvl w:val="0" /></w:numPr></w:pPr><w:r><w:t xml:space="preserve">☒ D. all(!x)</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="Compact" /><w:numPr><w:numId w:val="1111" /><w:ilvl w:val="0" /></w:numPr></w:pPr><w:r><w:t xml:space="preserve">The function `</w:t></w:r><w:r><w:rPr><w:rStyle w:val="VerbatimChar" /></w:rPr><w:t xml:space="preserve">nchar</w:t></w:r><w:r><w:t xml:space="preserve"> </w:t></w:r><w:r><w:t xml:space="preserve">tells you how many characters long a character vector is.</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="FirstParagraph" /></w:pPr><w:r><w:t xml:space="preserve">For example:</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="SourceCode" /></w:pPr><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">char_len &lt;-</w:t></w:r><w:r><w:rPr><w:rStyle w:val="StringTok" /></w:rPr><w:t xml:space="preserve"> </w:t></w:r><w:r><w:rPr><w:rStyle w:val="KeywordTok" /></w:rPr><w:t xml:space="preserve">nchar</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">(murders</w:t></w:r><w:r><w:rPr><w:rStyle w:val="OperatorTok" /></w:rPr><w:t xml:space="preserve">$</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">state)</w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="KeywordTok" /></w:rPr><w:t xml:space="preserve">head</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">(char_len)</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="FirstParagraph" /></w:pPr><w:r><w:t xml:space="preserve">The function</w:t></w:r><w:r><w:t xml:space="preserve"> </w:t></w:r><w:r><w:rPr><w:rStyle w:val="VerbatimChar" /></w:rPr><w:t xml:space="preserve">ifelse</w:t></w:r><w:r><w:t xml:space="preserve"> </w:t></w:r><w:r><w:t xml:space="preserve">is useful because you convert a vector of logicals into something else. For example, some datasets use the number -999 to denote NA. A bad practice! You can convert the -999 in a vector to NA using the following</w:t></w:r><w:r><w:t xml:space="preserve"> </w:t></w:r><w:r><w:rPr><w:rStyle w:val="VerbatimChar" /></w:rPr><w:t xml:space="preserve">ifelse</w:t></w:r><w:r><w:t xml:space="preserve"> </w:t></w:r><w:r><w:t xml:space="preserve">call:</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="SourceCode" /></w:pPr><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">x &lt;-</w:t></w:r><w:r><w:rPr><w:rStyle w:val="StringTok" /></w:rPr><w:t xml:space="preserve"> </w:t></w:r><w:r><w:rPr><w:rStyle w:val="KeywordTok" /></w:rPr><w:t xml:space="preserve">c</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">(</w:t></w:r><w:r><w:rPr><w:rStyle w:val="DecValTok" /></w:rPr><w:t xml:space="preserve">2</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">, </w:t></w:r><w:r><w:rPr><w:rStyle w:val="DecValTok" /></w:rPr><w:t xml:space="preserve">3</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">, </w:t></w:r><w:r><w:rPr><w:rStyle w:val="DecValTok" /></w:rPr><w:t xml:space="preserve">-999</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">, </w:t></w:r><w:r><w:rPr><w:rStyle w:val="DecValTok" /></w:rPr><w:t xml:space="preserve">1</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">, </w:t></w:r><w:r><w:rPr><w:rStyle w:val="DecValTok" /></w:rPr><w:t xml:space="preserve">4</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">, </w:t></w:r><w:r><w:rPr><w:rStyle w:val="DecValTok" /></w:rPr><w:t xml:space="preserve">5</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">, </w:t></w:r><w:r><w:rPr><w:rStyle w:val="DecValTok" /></w:rPr><w:t xml:space="preserve">-999</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">, </w:t></w:r><w:r><w:rPr><w:rStyle w:val="DecValTok" /></w:rPr><w:t xml:space="preserve">3</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">, </w:t></w:r><w:r><w:rPr><w:rStyle w:val="DecValTok" /></w:rPr><w:t xml:space="preserve">2</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">, </w:t></w:r><w:r><w:rPr><w:rStyle w:val="DecValTok" /></w:rPr><w:t xml:space="preserve">9</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">)</w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="KeywordTok" /></w:rPr><w:t xml:space="preserve">ifelse</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">(x </w:t></w:r><w:r><w:rPr><w:rStyle w:val="OperatorTok" /></w:rPr><w:t xml:space="preserve">==</w:t></w:r><w:r><w:rPr><w:rStyle w:val="StringTok" /></w:rPr><w:t xml:space="preserve"> </w:t></w:r><w:r><w:rPr><w:rStyle w:val="DecValTok" /></w:rPr><w:t xml:space="preserve">-999</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">, </w:t></w:r><w:r><w:rPr><w:rStyle w:val="OtherTok" /></w:rPr><w:t xml:space="preserve">NA</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">, x)</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="FirstParagraph" /></w:pPr><w:r><w:t xml:space="preserve">If the entry is -999 it returns NA, otherwise it returns the entry.</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="SourceCode" /></w:pPr><w:r><w:rPr><w:rStyle w:val="CommentTok" /></w:rPr><w:t xml:space="preserve"># Assign the state abbreviation when the state name is longer than 8 characters </w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">char_len &lt;-</w:t></w:r><w:r><w:rPr><w:rStyle w:val="StringTok" /></w:rPr><w:t xml:space="preserve"> </w:t></w:r><w:r><w:rPr><w:rStyle w:val="KeywordTok" /></w:rPr><w:t xml:space="preserve">nchar</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">(murders</w:t></w:r><w:r><w:rPr><w:rStyle w:val="OperatorTok" /></w:rPr><w:t xml:space="preserve">$</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">state)</w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">new_names &lt;-</w:t></w:r><w:r><w:rPr><w:rStyle w:val="StringTok" /></w:rPr><w:t xml:space="preserve"> </w:t></w:r><w:r><w:rPr><w:rStyle w:val="KeywordTok" /></w:rPr><w:t xml:space="preserve">ifelse</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">(char_len </w:t></w:r><w:r><w:rPr><w:rStyle w:val="OperatorTok" /></w:rPr><w:t xml:space="preserve">&gt;</w:t></w:r><w:r><w:rPr><w:rStyle w:val="StringTok" /></w:rPr><w:t xml:space="preserve"> </w:t></w:r><w:r><w:rPr><w:rStyle w:val="DecValTok" /></w:rPr><w:t xml:space="preserve">8</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">, murders</w:t></w:r><w:r><w:rPr><w:rStyle w:val="OperatorTok" /></w:rPr><w:t xml:space="preserve">$</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">abb, murders</w:t></w:r><w:r><w:rPr><w:rStyle w:val="OperatorTok" /></w:rPr><w:t xml:space="preserve">$</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">state)</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="Compact" /><w:numPr><w:numId w:val="1112" /><w:ilvl w:val="0" /></w:numPr></w:pPr><w:r><w:t xml:space="preserve">You will encounter situations in which the function you need does not already exist. R permits you to write your own.</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="FirstParagraph" /></w:pPr><w:r><w:t xml:space="preserve">Let’s practice one such situation, in which you first need to define the function to be used. The functions you define can have multiple arguments as well as default values.</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="BodyText" /></w:pPr><w:r><w:t xml:space="preserve">To define functions we use</w:t></w:r><w:r><w:t xml:space="preserve"> </w:t></w:r><w:r><w:rPr><w:rStyle w:val="VerbatimChar" /></w:rPr><w:t xml:space="preserve">function</w:t></w:r><w:r><w:t xml:space="preserve">. For example the following function adds 1 to the number it receives as an argument:</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="BodyText" /></w:pPr><w:r><w:rPr><w:rStyle w:val="VerbatimChar" /></w:rPr><w:t xml:space="preserve">{r, eval=FALSE, echo=TRUE my_func &lt;- function(x){     y &lt;- x + 1     y }</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="BodyText" /></w:pPr><w:r><w:t xml:space="preserve">The last value in the function, in this case that stored in</w:t></w:r><w:r><w:t xml:space="preserve"> </w:t></w:r><w:r><w:rPr><w:rStyle w:val="VerbatimChar" /></w:rPr><w:t xml:space="preserve">y</w:t></w:r><w:r><w:t xml:space="preserve">, gets returned.</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="BodyText" /></w:pPr><w:r><w:t xml:space="preserve">If you run the code above R does not show anything. This means you defined the function. You can test it out like this:</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="SourceCode" /></w:pPr><w:r><w:rPr><w:rStyle w:val="KeywordTok" /></w:rPr><w:t xml:space="preserve">my_func</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">(</w:t></w:r><w:r><w:rPr><w:rStyle w:val="DecValTok" /></w:rPr><w:t xml:space="preserve">5</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">)</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="SourceCode" /></w:pPr><w:r><w:rPr><w:rStyle w:val="CommentTok" /></w:rPr><w:t xml:space="preserve"># Create function called `sum_n`</w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">sum_n &lt;-</w:t></w:r><w:r><w:rPr><w:rStyle w:val="StringTok" /></w:rPr><w:t xml:space="preserve"> </w:t></w:r><w:r><w:rPr><w:rStyle w:val="ControlFlowTok" /></w:rPr><w:t xml:space="preserve">function</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">(n){</w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">    x &lt;-</w:t></w:r><w:r><w:rPr><w:rStyle w:val="StringTok" /></w:rPr><w:t xml:space="preserve"> </w:t></w:r><w:r><w:rPr><w:rStyle w:val="DecValTok" /></w:rPr><w:t xml:space="preserve">1</w:t></w:r><w:r><w:rPr><w:rStyle w:val="OperatorTok" /></w:rPr><w:t xml:space="preserve">:</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">n</w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">    </w:t></w:r><w:r><w:rPr><w:rStyle w:val="KeywordTok" /></w:rPr><w:t xml:space="preserve">sum</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">(x)</w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">}</w:t></w:r><w:r><w:br /></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="CommentTok" /></w:rPr><w:t xml:space="preserve"># Use the function to determine the sum of integers from 1 to 5000</w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="KeywordTok" /></w:rPr><w:t xml:space="preserve">sum_n</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">(</w:t></w:r><w:r><w:rPr><w:rStyle w:val="DecValTok" /></w:rPr><w:t xml:space="preserve">5000</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">)</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="SourceCode" /></w:pPr><w:r><w:rPr><w:rStyle w:val="VerbatimChar" /></w:rPr><w:t xml:space="preserve">## [1] 12502500</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="Compact" /><w:numPr><w:numId w:val="1113" /><w:ilvl w:val="0" /></w:numPr></w:pPr><w:r><w:t xml:space="preserve">We will make another function for this exercise. We will define a function</w:t></w:r><w:r><w:t xml:space="preserve"> </w:t></w:r><w:r><w:rPr><w:rStyle w:val="VerbatimChar" /></w:rPr><w:t xml:space="preserve">altman_plot</w:t></w:r><w:r><w:t xml:space="preserve"> </w:t></w:r><w:r><w:t xml:space="preserve">that takes two arguments</w:t></w:r><w:r><w:t xml:space="preserve"> </w:t></w:r><w:r><w:rPr><w:rStyle w:val="VerbatimChar" /></w:rPr><w:t xml:space="preserve">x</w:t></w:r><w:r><w:t xml:space="preserve"> </w:t></w:r><w:r><w:t xml:space="preserve">and</w:t></w:r><w:r><w:t xml:space="preserve"> </w:t></w:r><w:r><w:rPr><w:rStyle w:val="VerbatimChar" /></w:rPr><w:t xml:space="preserve">y</w:t></w:r><w:r><w:t xml:space="preserve"> </w:t></w:r><w:r><w:t xml:space="preserve">and plots the difference</w:t></w:r><w:r><w:t xml:space="preserve"> </w:t></w:r><w:r><w:rPr><w:rStyle w:val="VerbatimChar" /></w:rPr><w:t xml:space="preserve">y-x</w:t></w:r><w:r><w:t xml:space="preserve"> </w:t></w:r><w:r><w:t xml:space="preserve">in the y-axis against the sum</w:t></w:r><w:r><w:t xml:space="preserve"> </w:t></w:r><w:r><w:rPr><w:rStyle w:val="VerbatimChar" /></w:rPr><w:t xml:space="preserve">x+y</w:t></w:r><w:r><w:t xml:space="preserve"> </w:t></w:r><w:r><w:t xml:space="preserve">in the x-axis.</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="FirstParagraph" /></w:pPr><w:r><w:t xml:space="preserve">You can define functions with as many variables as you want. For example, here we need at least two,</w:t></w:r><w:r><w:t xml:space="preserve"> </w:t></w:r><w:r><w:rPr><w:rStyle w:val="VerbatimChar" /></w:rPr><w:t xml:space="preserve">x</w:t></w:r><w:r><w:t xml:space="preserve"> </w:t></w:r><w:r><w:t xml:space="preserve">and</w:t></w:r><w:r><w:t xml:space="preserve"> </w:t></w:r><w:r><w:rPr><w:rStyle w:val="VerbatimChar" /></w:rPr><w:t xml:space="preserve">y</w:t></w:r><w:r><w:t xml:space="preserve">. The following function plots log transformed values:</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="SourceCode" /></w:pPr><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">log_plot &lt;-</w:t></w:r><w:r><w:rPr><w:rStyle w:val="StringTok" /></w:rPr><w:t xml:space="preserve"> </w:t></w:r><w:r><w:rPr><w:rStyle w:val="ControlFlowTok" /></w:rPr><w:t xml:space="preserve">function</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">(x, y){</w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">    </w:t></w:r><w:r><w:rPr><w:rStyle w:val="KeywordTok" /></w:rPr><w:t xml:space="preserve">plot</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">(</w:t></w:r><w:r><w:rPr><w:rStyle w:val="KeywordTok" /></w:rPr><w:t xml:space="preserve">log10</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">(x), </w:t></w:r><w:r><w:rPr><w:rStyle w:val="KeywordTok" /></w:rPr><w:t xml:space="preserve">log10</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">(y))</w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">}</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="FirstParagraph" /></w:pPr><w:r><w:t xml:space="preserve">This function does not return anything. It just makes a plot.</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="SourceCode" /></w:pPr><w:r><w:rPr><w:rStyle w:val="CommentTok" /></w:rPr><w:t xml:space="preserve"># Create `altman_plot` </w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">altman_plot &lt;-</w:t></w:r><w:r><w:rPr><w:rStyle w:val="StringTok" /></w:rPr><w:t xml:space="preserve"> </w:t></w:r><w:r><w:rPr><w:rStyle w:val="ControlFlowTok" /></w:rPr><w:t xml:space="preserve">function</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">(x, y) {</w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">  </w:t></w:r><w:r><w:rPr><w:rStyle w:val="KeywordTok" /></w:rPr><w:t xml:space="preserve">plot</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">(x</w:t></w:r><w:r><w:rPr><w:rStyle w:val="OperatorTok" /></w:rPr><w:t xml:space="preserve">+</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">y, y</w:t></w:r><w:r><w:rPr><w:rStyle w:val="OperatorTok" /></w:rPr><w:t xml:space="preserve">-</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">x)</w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">}</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="Compact" /><w:numPr><w:numId w:val="1114" /><w:ilvl w:val="0" /></w:numPr></w:pPr><w:r><w:t xml:space="preserve">Lexical scoping is a convention used by many languages that determine when an object is available by its name.</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="FirstParagraph" /></w:pPr><w:r><w:t xml:space="preserve">When you run the code below you will see which</w:t></w:r><w:r><w:t xml:space="preserve"> </w:t></w:r><w:r><w:rPr><w:rStyle w:val="VerbatimChar" /></w:rPr><w:t xml:space="preserve">x</w:t></w:r><w:r><w:t xml:space="preserve"> </w:t></w:r><w:r><w:t xml:space="preserve">is available at different points in the code.</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="SourceCode" /></w:pPr><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">x &lt;-</w:t></w:r><w:r><w:rPr><w:rStyle w:val="StringTok" /></w:rPr><w:t xml:space="preserve"> </w:t></w:r><w:r><w:rPr><w:rStyle w:val="DecValTok" /></w:rPr><w:t xml:space="preserve">8</w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">my_func &lt;-</w:t></w:r><w:r><w:rPr><w:rStyle w:val="StringTok" /></w:rPr><w:t xml:space="preserve"> </w:t></w:r><w:r><w:rPr><w:rStyle w:val="ControlFlowTok" /></w:rPr><w:t xml:space="preserve">function</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">(y){</w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">    x &lt;-</w:t></w:r><w:r><w:rPr><w:rStyle w:val="StringTok" /></w:rPr><w:t xml:space="preserve"> </w:t></w:r><w:r><w:rPr><w:rStyle w:val="DecValTok" /></w:rPr><w:t xml:space="preserve">9</w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">    </w:t></w:r><w:r><w:rPr><w:rStyle w:val="KeywordTok" /></w:rPr><w:t xml:space="preserve">print</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">(x)</w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">    y </w:t></w:r><w:r><w:rPr><w:rStyle w:val="OperatorTok" /></w:rPr><w:t xml:space="preserve">+</w:t></w:r><w:r><w:rPr><w:rStyle w:val="StringTok" /></w:rPr><w:t xml:space="preserve"> </w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">x</w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">}</w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="KeywordTok" /></w:rPr><w:t xml:space="preserve">my_func</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">(x)</w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="KeywordTok" /></w:rPr><w:t xml:space="preserve">print</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">(x)</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="FirstParagraph" /></w:pPr><w:r><w:t xml:space="preserve">Note that when we define</w:t></w:r><w:r><w:t xml:space="preserve"> </w:t></w:r><w:r><w:rPr><w:rStyle w:val="VerbatimChar" /></w:rPr><w:t xml:space="preserve">x</w:t></w:r><w:r><w:t xml:space="preserve"> </w:t></w:r><w:r><w:t xml:space="preserve">as 9, this is inside the function, but it is 8 after you run the function. The</w:t></w:r><w:r><w:t xml:space="preserve"> </w:t></w:r><w:r><w:rPr><w:rStyle w:val="VerbatimChar" /></w:rPr><w:t xml:space="preserve">x</w:t></w:r><w:r><w:t xml:space="preserve"> </w:t></w:r><w:r><w:t xml:space="preserve">changed inside the function but not outside.</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="SourceCode" /></w:pPr><w:r><w:rPr><w:rStyle w:val="CommentTok" /></w:rPr><w:t xml:space="preserve"># Run this code </w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">x &lt;-</w:t></w:r><w:r><w:rPr><w:rStyle w:val="StringTok" /></w:rPr><w:t xml:space="preserve"> </w:t></w:r><w:r><w:rPr><w:rStyle w:val="DecValTok" /></w:rPr><w:t xml:space="preserve">3</w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">    my_func &lt;-</w:t></w:r><w:r><w:rPr><w:rStyle w:val="StringTok" /></w:rPr><w:t xml:space="preserve"> </w:t></w:r><w:r><w:rPr><w:rStyle w:val="ControlFlowTok" /></w:rPr><w:t xml:space="preserve">function</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">(y){</w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">    x &lt;-</w:t></w:r><w:r><w:rPr><w:rStyle w:val="StringTok" /></w:rPr><w:t xml:space="preserve"> </w:t></w:r><w:r><w:rPr><w:rStyle w:val="DecValTok" /></w:rPr><w:t xml:space="preserve">5</w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">    y</w:t></w:r><w:r><w:rPr><w:rStyle w:val="OperatorTok" /></w:rPr><w:t xml:space="preserve">+</w:t></w:r><w:r><w:rPr><w:rStyle w:val="DecValTok" /></w:rPr><w:t xml:space="preserve">5</w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">}</w:t></w:r><w:r><w:br /></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="CommentTok" /></w:rPr><w:t xml:space="preserve"># Print the value of x </w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">x &lt;-</w:t></w:r><w:r><w:rPr><w:rStyle w:val="StringTok" /></w:rPr><w:t xml:space="preserve"> </w:t></w:r><w:r><w:rPr><w:rStyle w:val="DecValTok" /></w:rPr><w:t xml:space="preserve">3</w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">my_func &lt;-</w:t></w:r><w:r><w:rPr><w:rStyle w:val="StringTok" /></w:rPr><w:t xml:space="preserve"> </w:t></w:r><w:r><w:rPr><w:rStyle w:val="ControlFlowTok" /></w:rPr><w:t xml:space="preserve">function</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">(y){</w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">    x &lt;-</w:t></w:r><w:r><w:rPr><w:rStyle w:val="StringTok" /></w:rPr><w:t xml:space="preserve"> </w:t></w:r><w:r><w:rPr><w:rStyle w:val="DecValTok" /></w:rPr><w:t xml:space="preserve">5</w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">    y</w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">    </w:t></w:r><w:r><w:rPr><w:rStyle w:val="KeywordTok" /></w:rPr><w:t xml:space="preserve">print</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">(x)</w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">}</w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="KeywordTok" /></w:rPr><w:t xml:space="preserve">my_func</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">(x)</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="SourceCode" /></w:pPr><w:r><w:rPr><w:rStyle w:val="VerbatimChar" /></w:rPr><w:t xml:space="preserve">## [1] 5</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="SourceCode" /></w:pPr><w:r><w:rPr><w:rStyle w:val="KeywordTok" /></w:rPr><w:t xml:space="preserve">print</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">(x)</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="SourceCode" /></w:pPr><w:r><w:rPr><w:rStyle w:val="VerbatimChar" /></w:rPr><w:t xml:space="preserve">## [1] 3</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="Compact" /><w:numPr><w:numId w:val="1115" /><w:ilvl w:val="0" /></w:numPr></w:pPr><w:r><w:t xml:space="preserve">In the next exercise we are going to write a for-loop. In that for-loop we are going to call a function. We define that function here.</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="SourceCode" /></w:pPr><w:r><w:rPr><w:rStyle w:val="CommentTok" /></w:rPr><w:t xml:space="preserve"># Here is an example of a function that adds numbers from 1 to n</w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">example_func &lt;-</w:t></w:r><w:r><w:rPr><w:rStyle w:val="StringTok" /></w:rPr><w:t xml:space="preserve"> </w:t></w:r><w:r><w:rPr><w:rStyle w:val="ControlFlowTok" /></w:rPr><w:t xml:space="preserve">function</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">(n){</w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">    x &lt;-</w:t></w:r><w:r><w:rPr><w:rStyle w:val="StringTok" /></w:rPr><w:t xml:space="preserve"> </w:t></w:r><w:r><w:rPr><w:rStyle w:val="DecValTok" /></w:rPr><w:t xml:space="preserve">1</w:t></w:r><w:r><w:rPr><w:rStyle w:val="OperatorTok" /></w:rPr><w:t xml:space="preserve">:</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">n</w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">    </w:t></w:r><w:r><w:rPr><w:rStyle w:val="KeywordTok" /></w:rPr><w:t xml:space="preserve">sum</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">(x)</w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">}</w:t></w:r><w:r><w:br /></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="CommentTok" /></w:rPr><w:t xml:space="preserve"># Here is the sum of the first 100 numbers</w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="KeywordTok" /></w:rPr><w:t xml:space="preserve">example_func</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">(</w:t></w:r><w:r><w:rPr><w:rStyle w:val="DecValTok" /></w:rPr><w:t xml:space="preserve">100</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">)</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="SourceCode" /></w:pPr><w:r><w:rPr><w:rStyle w:val="VerbatimChar" /></w:rPr><w:t xml:space="preserve">## [1] 5050</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="SourceCode" /></w:pPr><w:r><w:rPr><w:rStyle w:val="CommentTok" /></w:rPr><w:t xml:space="preserve"># Write a function compute_s_n with argument n that for any given n computes the sum of 1 + 2^2 + ...+ n^2</w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">compute_s_n &lt;-</w:t></w:r><w:r><w:rPr><w:rStyle w:val="StringTok" /></w:rPr><w:t xml:space="preserve"> </w:t></w:r><w:r><w:rPr><w:rStyle w:val="ControlFlowTok" /></w:rPr><w:t xml:space="preserve">function</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">(n){</w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">    x &lt;-</w:t></w:r><w:r><w:rPr><w:rStyle w:val="StringTok" /></w:rPr><w:t xml:space="preserve"> </w:t></w:r><w:r><w:rPr><w:rStyle w:val="DecValTok" /></w:rPr><w:t xml:space="preserve">1</w:t></w:r><w:r><w:rPr><w:rStyle w:val="OperatorTok" /></w:rPr><w:t xml:space="preserve">:</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">n</w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">    </w:t></w:r><w:r><w:rPr><w:rStyle w:val="KeywordTok" /></w:rPr><w:t xml:space="preserve">sum</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">(x</w:t></w:r><w:r><w:rPr><w:rStyle w:val="OperatorTok" /></w:rPr><w:t xml:space="preserve">^</w:t></w:r><w:r><w:rPr><w:rStyle w:val="DecValTok" /></w:rPr><w:t xml:space="preserve">2</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">)</w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">}</w:t></w:r><w:r><w:br /></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="CommentTok" /></w:rPr><w:t xml:space="preserve"># Report the value of the sum when n=10</w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="KeywordTok" /></w:rPr><w:t xml:space="preserve">compute_s_n</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">(</w:t></w:r><w:r><w:rPr><w:rStyle w:val="DecValTok" /></w:rPr><w:t xml:space="preserve">10</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">)</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="SourceCode" /></w:pPr><w:r><w:rPr><w:rStyle w:val="VerbatimChar" /></w:rPr><w:t xml:space="preserve">## [1] 385</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="Compact" /><w:numPr><w:numId w:val="1116" /><w:ilvl w:val="0" /></w:numPr></w:pPr><w:r><w:t xml:space="preserve">Now we are going to compute the sum of the squares for several values of</w:t></w:r><w:r><w:t xml:space="preserve"> </w:t></w:r><w:r><w:rPr><w:i /></w:rPr><w:t xml:space="preserve">n</w:t></w:r><w:r><w:t xml:space="preserve">. We will use a for-loop for this.</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="FirstParagraph" /></w:pPr><w:r><w:t xml:space="preserve">Here is an example of a for-loop:</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="SourceCode" /></w:pPr><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">results &lt;-</w:t></w:r><w:r><w:rPr><w:rStyle w:val="StringTok" /></w:rPr><w:t xml:space="preserve"> </w:t></w:r><w:r><w:rPr><w:rStyle w:val="KeywordTok" /></w:rPr><w:t xml:space="preserve">vector</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">(</w:t></w:r><w:r><w:rPr><w:rStyle w:val="StringTok" /></w:rPr><w:t xml:space="preserve">&quot;numeric&quot;</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">, </w:t></w:r><w:r><w:rPr><w:rStyle w:val="DecValTok" /></w:rPr><w:t xml:space="preserve">10</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">)</w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">n &lt;-</w:t></w:r><w:r><w:rPr><w:rStyle w:val="StringTok" /></w:rPr><w:t xml:space="preserve"> </w:t></w:r><w:r><w:rPr><w:rStyle w:val="DecValTok" /></w:rPr><w:t xml:space="preserve">10</w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="ControlFlowTok" /></w:rPr><w:t xml:space="preserve">for</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">(i </w:t></w:r><w:r><w:rPr><w:rStyle w:val="ControlFlowTok" /></w:rPr><w:t xml:space="preserve">in</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve"> </w:t></w:r><w:r><w:rPr><w:rStyle w:val="DecValTok" /></w:rPr><w:t xml:space="preserve">1</w:t></w:r><w:r><w:rPr><w:rStyle w:val="OperatorTok" /></w:rPr><w:t xml:space="preserve">:</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">n){</w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">    x &lt;-</w:t></w:r><w:r><w:rPr><w:rStyle w:val="StringTok" /></w:rPr><w:t xml:space="preserve"> </w:t></w:r><w:r><w:rPr><w:rStyle w:val="DecValTok" /></w:rPr><w:t xml:space="preserve">1</w:t></w:r><w:r><w:rPr><w:rStyle w:val="OperatorTok" /></w:rPr><w:t xml:space="preserve">:</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">i</w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">    results[i] &lt;-</w:t></w:r><w:r><w:rPr><w:rStyle w:val="StringTok" /></w:rPr><w:t xml:space="preserve"> </w:t></w:r><w:r><w:rPr><w:rStyle w:val="KeywordTok" /></w:rPr><w:t xml:space="preserve">sum</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">(x)</w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">}</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="FirstParagraph" /></w:pPr><w:r><w:t xml:space="preserve">Note that we start with a call to</w:t></w:r><w:r><w:t xml:space="preserve"> </w:t></w:r><w:r><w:rPr><w:rStyle w:val="VerbatimChar" /></w:rPr><w:t xml:space="preserve">vector</w:t></w:r><w:r><w:t xml:space="preserve"> </w:t></w:r><w:r><w:t xml:space="preserve">which constructs an empty vector that we will fill while the loop runs.</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="SourceCode" /></w:pPr><w:r><w:rPr><w:rStyle w:val="CommentTok" /></w:rPr><w:t xml:space="preserve"># Define a function and store it in `compute_s_n`</w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">compute_s_n &lt;-</w:t></w:r><w:r><w:rPr><w:rStyle w:val="StringTok" /></w:rPr><w:t xml:space="preserve"> </w:t></w:r><w:r><w:rPr><w:rStyle w:val="ControlFlowTok" /></w:rPr><w:t xml:space="preserve">function</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">(n){</w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">  x &lt;-</w:t></w:r><w:r><w:rPr><w:rStyle w:val="StringTok" /></w:rPr><w:t xml:space="preserve"> </w:t></w:r><w:r><w:rPr><w:rStyle w:val="DecValTok" /></w:rPr><w:t xml:space="preserve">1</w:t></w:r><w:r><w:rPr><w:rStyle w:val="OperatorTok" /></w:rPr><w:t xml:space="preserve">:</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">n</w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">  </w:t></w:r><w:r><w:rPr><w:rStyle w:val="KeywordTok" /></w:rPr><w:t xml:space="preserve">sum</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">(x</w:t></w:r><w:r><w:rPr><w:rStyle w:val="OperatorTok" /></w:rPr><w:t xml:space="preserve">^</w:t></w:r><w:r><w:rPr><w:rStyle w:val="DecValTok" /></w:rPr><w:t xml:space="preserve">2</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">)</w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">}</w:t></w:r><w:r><w:br /></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="CommentTok" /></w:rPr><w:t xml:space="preserve"># Create a vector for storing results</w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">s_n &lt;-</w:t></w:r><w:r><w:rPr><w:rStyle w:val="StringTok" /></w:rPr><w:t xml:space="preserve"> </w:t></w:r><w:r><w:rPr><w:rStyle w:val="KeywordTok" /></w:rPr><w:t xml:space="preserve">vector</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">(</w:t></w:r><w:r><w:rPr><w:rStyle w:val="StringTok" /></w:rPr><w:t xml:space="preserve">&quot;numeric&quot;</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">, </w:t></w:r><w:r><w:rPr><w:rStyle w:val="DecValTok" /></w:rPr><w:t xml:space="preserve">25</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">)</w:t></w:r><w:r><w:br /></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="CommentTok" /></w:rPr><w:t xml:space="preserve"># write a for-loop to store the results in s_n</w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="ControlFlowTok" /></w:rPr><w:t xml:space="preserve">for</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">(n </w:t></w:r><w:r><w:rPr><w:rStyle w:val="ControlFlowTok" /></w:rPr><w:t xml:space="preserve">in</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve"> </w:t></w:r><w:r><w:rPr><w:rStyle w:val="DecValTok" /></w:rPr><w:t xml:space="preserve">1</w:t></w:r><w:r><w:rPr><w:rStyle w:val="OperatorTok" /></w:rPr><w:t xml:space="preserve">:</w:t></w:r><w:r><w:rPr><w:rStyle w:val="KeywordTok" /></w:rPr><w:t xml:space="preserve">length</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">(s_n)){</w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">  s_n[n] &lt;-</w:t></w:r><w:r><w:rPr><w:rStyle w:val="StringTok" /></w:rPr><w:t xml:space="preserve"> </w:t></w:r><w:r><w:rPr><w:rStyle w:val="KeywordTok" /></w:rPr><w:t xml:space="preserve">compute_s_n</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">(n)</w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">}</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="Compact" /><w:numPr><w:numId w:val="1117" /><w:ilvl w:val="0" /></w:numPr></w:pPr><w:r><w:t xml:space="preserve">If we do the math, we can show that</w:t></w:r><w:r><w:t xml:space="preserve"> </w:t></w:r><m:oMath><m:sSub><m:e><m:r><m:t>S</m:t></m:r></m:e><m:sub><m:r><m:t>n</m:t></m:r></m:sub></m:sSub><m:r><m:t>=</m:t></m:r><m:sSup><m:e><m:r><m:t>1</m:t></m:r></m:e><m:sup><m:r><m:t>2</m:t></m:r></m:sup></m:sSup><m:r><m:t>+</m:t></m:r><m:sSup><m:e><m:r><m:t>2</m:t></m:r></m:e><m:sup><m:r><m:t>2</m:t></m:r></m:sup></m:sSup><m:r><m:t>+</m:t></m:r><m:sSup><m:e><m:r><m:t>3</m:t></m:r></m:e><m:sup><m:r><m:t>2</m:t></m:r></m:sup></m:sSup><m:r><m:t>+</m:t></m:r><m:r><m:t>⋯</m:t></m:r><m:r><m:t>+</m:t></m:r><m:sSup><m:e><m:r><m:t>n</m:t></m:r></m:e><m:sup><m:r><m:t>2</m:t></m:r></m:sup></m:sSup><m:r><m:t>=</m:t></m:r><m:r><m:t>n</m:t></m:r><m:r><m:t>(</m:t></m:r><m:r><m:t>n</m:t></m:r><m:r><m:t>+</m:t></m:r><m:r><m:t>1</m:t></m:r><m:r><m:t>)</m:t></m:r><m:r><m:t>(</m:t></m:r><m:r><m:t>2</m:t></m:r><m:r><m:t>n</m:t></m:r><m:r><m:t>+</m:t></m:r><m:r><m:t>1</m:t></m:r><m:r><m:t>)</m:t></m:r><m:r><m:t>/</m:t></m:r><m:r><m:t>6</m:t></m:r></m:oMath></w:p><w:p><w:pPr><w:pStyle w:val="FirstParagraph" /></w:pPr><w:r><w:t xml:space="preserve">We have already computed the values of</w:t></w:r><w:r><w:t xml:space="preserve"> </w:t></w:r><m:oMath><m:sSub><m:e><m:r><m:t>S</m:t></m:r></m:e><m:sub><m:r><m:t>n</m:t></m:r></m:sub></m:sSub></m:oMath><w:r><w:t xml:space="preserve"> </w:t></w:r><w:r><w:t xml:space="preserve">from 1 to 25 using a for loop.</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="BodyText" /></w:pPr><w:r><w:t xml:space="preserve">If the formula is correct then a plot of</w:t></w:r><w:r><w:t xml:space="preserve"> </w:t></w:r><m:oMath><m:sSub><m:e><m:r><m:t>S</m:t></m:r></m:e><m:sub><m:r><m:t>n</m:t></m:r></m:sub></m:sSub></m:oMath><w:r><w:t xml:space="preserve"> </w:t></w:r><w:r><w:t xml:space="preserve">versus</w:t></w:r><w:r><w:t xml:space="preserve"> </w:t></w:r><w:r><w:rPr><w:i /></w:rPr><w:t xml:space="preserve">n</w:t></w:r><w:r><w:t xml:space="preserve"> </w:t></w:r><w:r><w:t xml:space="preserve">should look cubic.</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="BodyText" /></w:pPr><w:r><w:t xml:space="preserve">Let’s make this plot.</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="SourceCode" /></w:pPr><w:r><w:rPr><w:rStyle w:val="CommentTok" /></w:rPr><w:t xml:space="preserve"># Define the function</w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">compute_s_n &lt;-</w:t></w:r><w:r><w:rPr><w:rStyle w:val="StringTok" /></w:rPr><w:t xml:space="preserve"> </w:t></w:r><w:r><w:rPr><w:rStyle w:val="ControlFlowTok" /></w:rPr><w:t xml:space="preserve">function</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">(n){</w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">  x &lt;-</w:t></w:r><w:r><w:rPr><w:rStyle w:val="StringTok" /></w:rPr><w:t xml:space="preserve"> </w:t></w:r><w:r><w:rPr><w:rStyle w:val="DecValTok" /></w:rPr><w:t xml:space="preserve">1</w:t></w:r><w:r><w:rPr><w:rStyle w:val="OperatorTok" /></w:rPr><w:t xml:space="preserve">:</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">n</w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">  </w:t></w:r><w:r><w:rPr><w:rStyle w:val="KeywordTok" /></w:rPr><w:t xml:space="preserve">sum</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">(x</w:t></w:r><w:r><w:rPr><w:rStyle w:val="OperatorTok" /></w:rPr><w:t xml:space="preserve">^</w:t></w:r><w:r><w:rPr><w:rStyle w:val="DecValTok" /></w:rPr><w:t xml:space="preserve">2</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">)</w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">}</w:t></w:r><w:r><w:br /></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="CommentTok" /></w:rPr><w:t xml:space="preserve"># Define the vector of n</w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">n &lt;-</w:t></w:r><w:r><w:rPr><w:rStyle w:val="StringTok" /></w:rPr><w:t xml:space="preserve"> </w:t></w:r><w:r><w:rPr><w:rStyle w:val="DecValTok" /></w:rPr><w:t xml:space="preserve">1</w:t></w:r><w:r><w:rPr><w:rStyle w:val="OperatorTok" /></w:rPr><w:t xml:space="preserve">:</w:t></w:r><w:r><w:rPr><w:rStyle w:val="DecValTok" /></w:rPr><w:t xml:space="preserve">25</w:t></w:r><w:r><w:br /></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="CommentTok" /></w:rPr><w:t xml:space="preserve"># Define the vector to store data</w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">s_n &lt;-</w:t></w:r><w:r><w:rPr><w:rStyle w:val="StringTok" /></w:rPr><w:t xml:space="preserve"> </w:t></w:r><w:r><w:rPr><w:rStyle w:val="KeywordTok" /></w:rPr><w:t xml:space="preserve">vector</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">(</w:t></w:r><w:r><w:rPr><w:rStyle w:val="StringTok" /></w:rPr><w:t xml:space="preserve">&quot;numeric&quot;</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">, </w:t></w:r><w:r><w:rPr><w:rStyle w:val="DecValTok" /></w:rPr><w:t xml:space="preserve">25</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">)</w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="ControlFlowTok" /></w:rPr><w:t xml:space="preserve">for</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">(i </w:t></w:r><w:r><w:rPr><w:rStyle w:val="ControlFlowTok" /></w:rPr><w:t xml:space="preserve">in</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve"> n){</w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">  s_n[i] &lt;-</w:t></w:r><w:r><w:rPr><w:rStyle w:val="StringTok" /></w:rPr><w:t xml:space="preserve"> </w:t></w:r><w:r><w:rPr><w:rStyle w:val="KeywordTok" /></w:rPr><w:t xml:space="preserve">compute_s_n</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">(i)</w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">}</w:t></w:r><w:r><w:br /></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="CommentTok" /></w:rPr><w:t xml:space="preserve">#  Create the plot </w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="KeywordTok" /></w:rPr><w:t xml:space="preserve">plot</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">(n,s_n)</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="FirstParagraph" /></w:pPr><w:r><w:drawing><wp:inline><wp:extent cx="5334000" cy="4267200" /><wp:effectExtent b="0" l="0" r="0" t="0" /><wp:docPr descr="" title="" id="1" name="Picture" /><a:graphic><a:graphicData uri="http://schemas.openxmlformats.org/drawingml/2006/picture"><pic:pic><pic:nvPicPr><pic:cNvPr descr="Data_Science_R_Basics_files/figure-docx/unnamed-chunk-139-1.png" id="0" name="Picture" /><pic:cNvPicPr><a:picLocks noChangeArrowheads="1" noChangeAspect="1" /></pic:cNvPicPr></pic:nvPicPr><pic:blipFill><a:blip r:embed="rId100" /><a:stretch><a:fillRect /></a:stretch></pic:blipFill><pic:spPr bwMode="auto"><a:xfrm><a:off x="0" y="0" /><a:ext cx="5334000" cy="4267200" /></a:xfrm><a:prstGeom prst="rect"><a:avLst /></a:prstGeom><a:noFill /><a:ln w="9525"><a:noFill /><a:headEnd /><a:tailEnd /></a:ln></pic:spPr></pic:pic></a:graphicData></a:graphic></wp:inline></w:drawing></w:r></w:p><w:p><w:pPr><w:pStyle w:val="Compact" /><w:numPr><w:numId w:val="1118" /><w:ilvl w:val="0" /></w:numPr></w:pPr><w:r><w:t xml:space="preserve">Now let’s actually check if we get the exact same answer.</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="SourceCode" /></w:pPr><w:r><w:rPr><w:rStyle w:val="CommentTok" /></w:rPr><w:t xml:space="preserve"># Define the function</w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">compute_s_n &lt;-</w:t></w:r><w:r><w:rPr><w:rStyle w:val="StringTok" /></w:rPr><w:t xml:space="preserve"> </w:t></w:r><w:r><w:rPr><w:rStyle w:val="ControlFlowTok" /></w:rPr><w:t xml:space="preserve">function</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">(n){</w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">  x &lt;-</w:t></w:r><w:r><w:rPr><w:rStyle w:val="StringTok" /></w:rPr><w:t xml:space="preserve"> </w:t></w:r><w:r><w:rPr><w:rStyle w:val="DecValTok" /></w:rPr><w:t xml:space="preserve">1</w:t></w:r><w:r><w:rPr><w:rStyle w:val="OperatorTok" /></w:rPr><w:t xml:space="preserve">:</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">n</w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">  </w:t></w:r><w:r><w:rPr><w:rStyle w:val="KeywordTok" /></w:rPr><w:t xml:space="preserve">sum</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">(x</w:t></w:r><w:r><w:rPr><w:rStyle w:val="OperatorTok" /></w:rPr><w:t xml:space="preserve">^</w:t></w:r><w:r><w:rPr><w:rStyle w:val="DecValTok" /></w:rPr><w:t xml:space="preserve">2</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">)</w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">}</w:t></w:r><w:r><w:br /></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="CommentTok" /></w:rPr><w:t xml:space="preserve"># Define the vector of n</w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">n &lt;-</w:t></w:r><w:r><w:rPr><w:rStyle w:val="StringTok" /></w:rPr><w:t xml:space="preserve"> </w:t></w:r><w:r><w:rPr><w:rStyle w:val="DecValTok" /></w:rPr><w:t xml:space="preserve">1</w:t></w:r><w:r><w:rPr><w:rStyle w:val="OperatorTok" /></w:rPr><w:t xml:space="preserve">:</w:t></w:r><w:r><w:rPr><w:rStyle w:val="DecValTok" /></w:rPr><w:t xml:space="preserve">25</w:t></w:r><w:r><w:br /></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="CommentTok" /></w:rPr><w:t xml:space="preserve"># Define the vector to store data</w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">s_n &lt;-</w:t></w:r><w:r><w:rPr><w:rStyle w:val="StringTok" /></w:rPr><w:t xml:space="preserve"> </w:t></w:r><w:r><w:rPr><w:rStyle w:val="KeywordTok" /></w:rPr><w:t xml:space="preserve">vector</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">(</w:t></w:r><w:r><w:rPr><w:rStyle w:val="StringTok" /></w:rPr><w:t xml:space="preserve">&quot;numeric&quot;</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">, </w:t></w:r><w:r><w:rPr><w:rStyle w:val="DecValTok" /></w:rPr><w:t xml:space="preserve">25</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">)</w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="ControlFlowTok" /></w:rPr><w:t xml:space="preserve">for</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">(i </w:t></w:r><w:r><w:rPr><w:rStyle w:val="ControlFlowTok" /></w:rPr><w:t xml:space="preserve">in</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve"> n){</w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">  s_n[i] &lt;-</w:t></w:r><w:r><w:rPr><w:rStyle w:val="StringTok" /></w:rPr><w:t xml:space="preserve"> </w:t></w:r><w:r><w:rPr><w:rStyle w:val="KeywordTok" /></w:rPr><w:t xml:space="preserve">compute_s_n</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">(i)</w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">}</w:t></w:r><w:r><w:br /></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="CommentTok" /></w:rPr><w:t xml:space="preserve"># Check that s_n is identical to the formula given in the instructions.</w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="KeywordTok" /></w:rPr><w:t xml:space="preserve">identical</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">(s_n,(n</w:t></w:r><w:r><w:rPr><w:rStyle w:val="OperatorTok" /></w:rPr><w:t xml:space="preserve">*</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">(n</w:t></w:r><w:r><w:rPr><w:rStyle w:val="OperatorTok" /></w:rPr><w:t xml:space="preserve">+</w:t></w:r><w:r><w:rPr><w:rStyle w:val="DecValTok" /></w:rPr><w:t xml:space="preserve">1</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">)</w:t></w:r><w:r><w:rPr><w:rStyle w:val="OperatorTok" /></w:rPr><w:t xml:space="preserve">*</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">(</w:t></w:r><w:r><w:rPr><w:rStyle w:val="DecValTok" /></w:rPr><w:t xml:space="preserve">2</w:t></w:r><w:r><w:rPr><w:rStyle w:val="OperatorTok" /></w:rPr><w:t xml:space="preserve">*</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">n</w:t></w:r><w:r><w:rPr><w:rStyle w:val="OperatorTok" /></w:rPr><w:t xml:space="preserve">+</w:t></w:r><w:r><w:rPr><w:rStyle w:val="DecValTok" /></w:rPr><w:t xml:space="preserve">1</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">))</w:t></w:r><w:r><w:rPr><w:rStyle w:val="OperatorTok" /></w:rPr><w:t xml:space="preserve">/</w:t></w:r><w:r><w:rPr><w:rStyle w:val="DecValTok" /></w:rPr><w:t xml:space="preserve">6</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">)</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="SourceCode" /></w:pPr><w:r><w:rPr><w:rStyle w:val="VerbatimChar" /></w:rPr><w:t xml:space="preserve">## [1] TRUE</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="Heading2" /></w:pPr><w:bookmarkStart w:id="101" w:name="section-4-assessment" /><w:r><w:t xml:space="preserve">Section 4 Assessment</w:t></w:r><w:bookmarkEnd w:id="101" /></w:p><w:p><w:pPr><w:pStyle w:val="Compact" /><w:numPr><w:numId w:val="1119" /><w:ilvl w:val="0" /></w:numPr></w:pPr><w:r><w:t xml:space="preserve">Load the</w:t></w:r><w:r><w:t xml:space="preserve"> </w:t></w:r><w:r><w:rPr><w:b /></w:rPr><w:t xml:space="preserve">heights</w:t></w:r><w:r><w:t xml:space="preserve"> </w:t></w:r><w:r><w:t xml:space="preserve">dataset from dslabs:</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="SourceCode" /></w:pPr><w:r><w:rPr><w:rStyle w:val="KeywordTok" /></w:rPr><w:t xml:space="preserve">library</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">(dslabs)</w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="KeywordTok" /></w:rPr><w:t xml:space="preserve">data</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">(heights)</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="FirstParagraph" /></w:pPr><w:r><w:t xml:space="preserve">Write an</w:t></w:r><w:r><w:t xml:space="preserve"> </w:t></w:r><w:r><w:rPr><w:rStyle w:val="VerbatimChar" /></w:rPr><w:t xml:space="preserve">ifelse</w:t></w:r><w:r><w:t xml:space="preserve"> </w:t></w:r><w:r><w:t xml:space="preserve">statement that returns 1 if the sex is Female and 2 if the sex is Male.</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="BodyText" /></w:pPr><w:r><w:t xml:space="preserve">What is the sum of the resulting vector?</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="SourceCode" /></w:pPr><w:r><w:rPr><w:rStyle w:val="KeywordTok" /></w:rPr><w:t xml:space="preserve">sum</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">(</w:t></w:r><w:r><w:rPr><w:rStyle w:val="KeywordTok" /></w:rPr><w:t xml:space="preserve">ifelse</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">(heights</w:t></w:r><w:r><w:rPr><w:rStyle w:val="OperatorTok" /></w:rPr><w:t xml:space="preserve">$</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">sex </w:t></w:r><w:r><w:rPr><w:rStyle w:val="OperatorTok" /></w:rPr><w:t xml:space="preserve">==</w:t></w:r><w:r><w:rPr><w:rStyle w:val="StringTok" /></w:rPr><w:t xml:space="preserve"> &quot;Female&quot;</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">, </w:t></w:r><w:r><w:rPr><w:rStyle w:val="DecValTok" /></w:rPr><w:t xml:space="preserve">1</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">, </w:t></w:r><w:r><w:rPr><w:rStyle w:val="DecValTok" /></w:rPr><w:t xml:space="preserve">2</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">))</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="SourceCode" /></w:pPr><w:r><w:rPr><w:rStyle w:val="VerbatimChar" /></w:rPr><w:t xml:space="preserve">## [1] 1862</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="Compact" /><w:numPr><w:numId w:val="1120" /><w:ilvl w:val="0" /></w:numPr></w:pPr><w:r><w:t xml:space="preserve">Write an</w:t></w:r><w:r><w:t xml:space="preserve"> </w:t></w:r><w:r><w:rPr><w:rStyle w:val="VerbatimChar" /></w:rPr><w:t xml:space="preserve">ifelse</w:t></w:r><w:r><w:t xml:space="preserve"> </w:t></w:r><w:r><w:t xml:space="preserve">statement that takes the height column and returns the height if it is greater than 72 inches and returns 0 otherwise.</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="FirstParagraph" /></w:pPr><w:r><w:t xml:space="preserve">What is the mean of the resulting vector?</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="SourceCode" /></w:pPr><w:r><w:rPr><w:rStyle w:val="KeywordTok" /></w:rPr><w:t xml:space="preserve">mean</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">(</w:t></w:r><w:r><w:rPr><w:rStyle w:val="KeywordTok" /></w:rPr><w:t xml:space="preserve">ifelse</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">(heights</w:t></w:r><w:r><w:rPr><w:rStyle w:val="OperatorTok" /></w:rPr><w:t xml:space="preserve">$</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">height </w:t></w:r><w:r><w:rPr><w:rStyle w:val="OperatorTok" /></w:rPr><w:t xml:space="preserve">&gt;</w:t></w:r><w:r><w:rPr><w:rStyle w:val="StringTok" /></w:rPr><w:t xml:space="preserve"> </w:t></w:r><w:r><w:rPr><w:rStyle w:val="DecValTok" /></w:rPr><w:t xml:space="preserve">72</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">, heights</w:t></w:r><w:r><w:rPr><w:rStyle w:val="OperatorTok" /></w:rPr><w:t xml:space="preserve">$</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">height, </w:t></w:r><w:r><w:rPr><w:rStyle w:val="DecValTok" /></w:rPr><w:t xml:space="preserve">0</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">))</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="SourceCode" /></w:pPr><w:r><w:rPr><w:rStyle w:val="VerbatimChar" /></w:rPr><w:t xml:space="preserve">## [1] 9.65</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="Compact" /><w:numPr><w:numId w:val="1121" /><w:ilvl w:val="0" /></w:numPr></w:pPr><w:r><w:t xml:space="preserve">Write a function</w:t></w:r><w:r><w:t xml:space="preserve"> </w:t></w:r><w:r><w:rPr><w:rStyle w:val="VerbatimChar" /></w:rPr><w:t xml:space="preserve">inches_to_ft</w:t></w:r><w:r><w:t xml:space="preserve"> </w:t></w:r><w:r><w:t xml:space="preserve">that takes a number of inches x and returns the number of feet. One foot equals 12 inches.</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="FirstParagraph" /></w:pPr><w:r><w:t xml:space="preserve">What is</w:t></w:r><w:r><w:t xml:space="preserve"> </w:t></w:r><w:r><w:rPr><w:rStyle w:val="VerbatimChar" /></w:rPr><w:t xml:space="preserve">inches_to_ft(144)</w:t></w:r><w:r><w:t xml:space="preserve">?</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="SourceCode" /></w:pPr><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">inches_to_ft &lt;-</w:t></w:r><w:r><w:rPr><w:rStyle w:val="StringTok" /></w:rPr><w:t xml:space="preserve"> </w:t></w:r><w:r><w:rPr><w:rStyle w:val="ControlFlowTok" /></w:rPr><w:t xml:space="preserve">function</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">(x){x</w:t></w:r><w:r><w:rPr><w:rStyle w:val="OperatorTok" /></w:rPr><w:t xml:space="preserve">/</w:t></w:r><w:r><w:rPr><w:rStyle w:val="DecValTok" /></w:rPr><w:t xml:space="preserve">12</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">}</w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="KeywordTok" /></w:rPr><w:t xml:space="preserve">inches_to_ft</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">(</w:t></w:r><w:r><w:rPr><w:rStyle w:val="DecValTok" /></w:rPr><w:t xml:space="preserve">144</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">)</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="SourceCode" /></w:pPr><w:r><w:rPr><w:rStyle w:val="VerbatimChar" /></w:rPr><w:t xml:space="preserve">## [1] 12</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="FirstParagraph" /></w:pPr><w:r><w:t xml:space="preserve">How many individuals in the heights dataset have a height less than 5 feet?</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="SourceCode" /></w:pPr><w:r><w:rPr><w:rStyle w:val="KeywordTok" /></w:rPr><w:t xml:space="preserve">sum</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">(</w:t></w:r><w:r><w:rPr><w:rStyle w:val="KeywordTok" /></w:rPr><w:t xml:space="preserve">inches_to_ft</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">(heights</w:t></w:r><w:r><w:rPr><w:rStyle w:val="OperatorTok" /></w:rPr><w:t xml:space="preserve">$</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">height) </w:t></w:r><w:r><w:rPr><w:rStyle w:val="OperatorTok" /></w:rPr><w:t xml:space="preserve">&lt;</w:t></w:r><w:r><w:rPr><w:rStyle w:val="StringTok" /></w:rPr><w:t xml:space="preserve"> </w:t></w:r><w:r><w:rPr><w:rStyle w:val="DecValTok" /></w:rPr><w:t xml:space="preserve">5</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">)</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="SourceCode" /></w:pPr><w:r><w:rPr><w:rStyle w:val="VerbatimChar" /></w:rPr><w:t xml:space="preserve">## [1] 20</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="Compact" /><w:numPr><w:numId w:val="1122" /><w:ilvl w:val="0" /></w:numPr></w:pPr><w:r><w:t xml:space="preserve">Which of the following are TRUE?</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="FirstParagraph" /></w:pPr><w:r><w:t xml:space="preserve">Select ALL that apply.</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="Compact" /><w:numPr><w:numId w:val="1123" /><w:ilvl w:val="0" /></w:numPr></w:pPr><w:r><w:t xml:space="preserve">☒ A. any(TRUE, TRUE, TRUE)</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="Compact" /><w:numPr><w:numId w:val="1123" /><w:ilvl w:val="0" /></w:numPr></w:pPr><w:r><w:t xml:space="preserve">☒ B. any(TRUE, TRUE, FALSE)</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="Compact" /><w:numPr><w:numId w:val="1123" /><w:ilvl w:val="0" /></w:numPr></w:pPr><w:r><w:t xml:space="preserve">☒ C. any(TRUE, FALSE, FALSE)</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="Compact" /><w:numPr><w:numId w:val="1123" /><w:ilvl w:val="0" /></w:numPr></w:pPr><w:r><w:t xml:space="preserve">☐ D. any(FALSE, FALSE, FALSE)</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="Compact" /><w:numPr><w:numId w:val="1123" /><w:ilvl w:val="0" /></w:numPr></w:pPr><w:r><w:t xml:space="preserve">☒ E. all(TRUE, TRUE, TRUE)</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="Compact" /><w:numPr><w:numId w:val="1123" /><w:ilvl w:val="0" /></w:numPr></w:pPr><w:r><w:t xml:space="preserve">☐ F. all(TRUE, TRUE, FALSE)</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="Compact" /><w:numPr><w:numId w:val="1123" /><w:ilvl w:val="0" /></w:numPr></w:pPr><w:r><w:t xml:space="preserve">☐ G. all(TRUE, FALSE, FALSE)</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="Compact" /><w:numPr><w:numId w:val="1123" /><w:ilvl w:val="0" /></w:numPr></w:pPr><w:r><w:t xml:space="preserve">☐ H. all(FALSE, FALSE, FALSE)</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="Compact" /><w:numPr><w:numId w:val="1124" /><w:ilvl w:val="0" /></w:numPr></w:pPr><w:r><w:t xml:space="preserve">Given an integer x, the factorial of x is called x! and is the product of all integers up to and including x. The</w:t></w:r><w:r><w:t xml:space="preserve"> </w:t></w:r><w:r><w:rPr><w:rStyle w:val="VerbatimChar" /></w:rPr><w:t xml:space="preserve">factorial()</w:t></w:r><w:r><w:t xml:space="preserve"> </w:t></w:r><w:r><w:t xml:space="preserve">function computes factorials in R. For example,</w:t></w:r><w:r><w:t xml:space="preserve"> </w:t></w:r><w:r><w:rPr><w:rStyle w:val="VerbatimChar" /></w:rPr><w:t xml:space="preserve">factorial(4)</w:t></w:r><w:r><w:t xml:space="preserve"> </w:t></w:r><w:r><w:t xml:space="preserve">returns</w:t></w:r><w:r><w:t xml:space="preserve"> </w:t></w:r><m:oMath><m:r><m:t>4</m:t></m:r><m:r><m:t>!</m:t></m:r><m:r><m:t>=</m:t></m:r><m:r><m:t>4</m:t></m:r><m:r><m:t>×</m:t></m:r><m:r><m:t>3</m:t></m:r><m:r><m:t>×</m:t></m:r><m:r><m:t>2</m:t></m:r><m:r><m:t>×</m:t></m:r><m:r><m:t>1</m:t></m:r><m:r><m:t>=</m:t></m:r><m:r><m:t>24</m:t></m:r></m:oMath><w:r><w:t xml:space="preserve">.</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="FirstParagraph" /></w:pPr><w:r><w:t xml:space="preserve">Complete the code below to generate a vector of length m where the first entry is 1!, the second entry is 2!, and so on up to m!.</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="SourceCode" /></w:pPr><w:r><w:rPr><w:rStyle w:val="CommentTok" /></w:rPr><w:t xml:space="preserve"># define a vector of length m</w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">m &lt;-</w:t></w:r><w:r><w:rPr><w:rStyle w:val="StringTok" /></w:rPr><w:t xml:space="preserve"> </w:t></w:r><w:r><w:rPr><w:rStyle w:val="DecValTok" /></w:rPr><w:t xml:space="preserve">10</w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">f_n &lt;-</w:t></w:r><w:r><w:rPr><w:rStyle w:val="StringTok" /></w:rPr><w:t xml:space="preserve"> </w:t></w:r><w:r><w:rPr><w:rStyle w:val="KeywordTok" /></w:rPr><w:t xml:space="preserve">vector</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">(</w:t></w:r><w:r><w:rPr><w:rStyle w:val="DataTypeTok" /></w:rPr><w:t xml:space="preserve">length =</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve"> m)</w:t></w:r><w:r><w:br /></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="CommentTok" /></w:rPr><w:t xml:space="preserve"># make a vector of factorials</w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="ControlFlowTok" /></w:rPr><w:t xml:space="preserve">for</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">(n </w:t></w:r><w:r><w:rPr><w:rStyle w:val="ControlFlowTok" /></w:rPr><w:t xml:space="preserve">in</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve"> </w:t></w:r><w:r><w:rPr><w:rStyle w:val="DecValTok" /></w:rPr><w:t xml:space="preserve">1</w:t></w:r><w:r><w:rPr><w:rStyle w:val="OperatorTok" /></w:rPr><w:t xml:space="preserve">:</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">m){</w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">f_n[n] &lt;-</w:t></w:r><w:r><w:rPr><w:rStyle w:val="StringTok" /></w:rPr><w:t xml:space="preserve"> </w:t></w:r><w:r><w:rPr><w:rStyle w:val="KeywordTok" /></w:rPr><w:t xml:space="preserve">factorial</w:t></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">(n)</w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">}</w:t></w:r><w:r><w:br /></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="CommentTok" /></w:rPr><w:t xml:space="preserve"># inspect f_n</w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="NormalTok" /></w:rPr><w:t xml:space="preserve">f_n</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="SourceCode" /></w:pPr><w:r><w:rPr><w:rStyle w:val="VerbatimChar" /></w:rPr><w:t xml:space="preserve">##  [1]       1       2       6      24     120     720    5040   40320  362880</w:t></w:r><w:r><w:br /></w:r><w:r><w:rPr><w:rStyle w:val="VerbatimChar" /></w:rPr><w:t xml:space="preserve">## [10] 3628800</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="Compact" /><w:numPr><w:numId w:val="1125" /><w:ilvl w:val="0" /></w:numPr></w:pPr><w:r><w:t xml:space="preserve">☐ A. function(n)</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="Compact" /><w:numPr><w:numId w:val="1125" /><w:ilvl w:val="0" /></w:numPr></w:pPr><w:r><w:t xml:space="preserve">☐ B. if(n &lt; m)</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="Compact" /><w:numPr><w:numId w:val="1125" /><w:ilvl w:val="0" /></w:numPr></w:pPr><w:r><w:t xml:space="preserve">☒ C. for(n in 1:m)</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="Compact" /><w:numPr><w:numId w:val="1125" /><w:ilvl w:val="0" /></w:numPr></w:pPr><w:r><w:t xml:space="preserve">☐ D. function(m,n)</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="Compact" /><w:numPr><w:numId w:val="1125" /><w:ilvl w:val="0" /></w:numPr></w:pPr><w:r><w:t xml:space="preserve">☐ E. if(m &lt; n)</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="Compact" /><w:numPr><w:numId w:val="1125" /><w:ilvl w:val="0" /></w:numPr></w:pPr><w:r><w:t xml:space="preserve">☐ F. for(m in 1:n)</w:t></w:r></w:p><w:sectPr /></w:body></w:document>